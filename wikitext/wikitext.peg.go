// Code generated by pigeon; DO NOT EDIT.

package wikitext

import (
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/davecgh/go-spew/spew"
	"github.com/pkg/errors"
	"golang.org/x/net/html"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 10, col: 1, offset: 165},
			expr: &actionExpr{
				pos: position{line: 10, col: 10, offset: 174},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 10, col: 10, offset: 174},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 10, col: 10, offset: 174},
							label: "tlb",
							expr: &zeroOrMoreExpr{
								pos: position{line: 10, col: 14, offset: 178},
								expr: &ruleRefExpr{
									pos:  position{line: 10, col: 14, offset: 178},
									name: "tlb",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 10, col: 19, offset: 183},
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 19, offset: 183},
								name: "newlineToken",
							},
						},
					},
				},
			},
		},
		{
			name: "redirect",
			pos:  position{line: 25, col: 1, offset: 487},
			expr: &actionExpr{
				pos: position{line: 25, col: 13, offset: 499},
				run: (*parser).callonredirect1,
				expr: &seqExpr{
					pos: position{line: 25, col: 13, offset: 499},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 25, col: 13, offset: 499},
							name: "redirect_word",
						},
						&zeroOrMoreExpr{
							pos: position{line: 26, col: 5, offset: 517},
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 5, offset: 517},
								name: "space_or_newline",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 27, col: 5, offset: 539},
							expr: &seqExpr{
								pos: position{line: 27, col: 6, offset: 540},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 27, col: 6, offset: 540},
										val:        ":",
										ignoreCase: false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 27, col: 10, offset: 544},
										expr: &ruleRefExpr{
											pos:  position{line: 27, col: 10, offset: 544},
											name: "space_or_newline",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 28, col: 5, offset: 568},
							label: "wl",
							expr: &ruleRefExpr{
								pos:  position{line: 28, col: 8, offset: 571},
								name: "wikilink",
							},
						},
						&andCodeExpr{
							pos: position{line: 28, col: 17, offset: 580},
							run: (*parser).callonredirect13,
						},
					},
				},
			},
		},
		{
			name: "generic_newline_attributes",
			pos:  position{line: 53, col: 1, offset: 1195},
			expr: &zeroOrMoreExpr{
				pos: position{line: 53, col: 31, offset: 1225},
				expr: &ruleRefExpr{
					pos:  position{line: 53, col: 31, offset: 1225},
					name: "generic_newline_attribute",
				},
			},
		},
		{
			name: "table_attributes",
			pos:  position{line: 55, col: 1, offset: 1253},
			expr: &zeroOrMoreExpr{
				pos: position{line: 56, col: 6, offset: 1275},
				expr: &choiceExpr{
					pos: position{line: 56, col: 7, offset: 1276},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 56, col: 7, offset: 1276},
							name: "table_attribute",
						},
						&actionExpr{
							pos: position{line: 56, col: 25, offset: 1294},
							run: (*parser).callontable_attributes4,
							expr: &seqExpr{
								pos: position{line: 56, col: 25, offset: 1294},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 56, col: 25, offset: 1294},
										name: "optionalSpaceToken",
									},
									&labeledExpr{
										pos:   position{line: 56, col: 44, offset: 1313},
										label: "b",
										expr: &ruleRefExpr{
											pos:  position{line: 56, col: 46, offset: 1315},
											name: "broken_table_attribute_name_char",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "redirect_word",
			pos:  position{line: 62, col: 1, offset: 1470},
			expr: &seqExpr{
				pos: position{line: 63, col: 7, offset: 1490},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 63, col: 7, offset: 1490},
						expr: &charClassMatcher{
							pos:        position{line: 63, col: 7, offset: 1490},
							val:        "[ \\t\\n\\r]",
							chars:      []rune{' ', '\t', '\n', '\r'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 64, col: 5, offset: 1505},
						expr: &seqExpr{
							pos: position{line: 64, col: 6, offset: 1506},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 64, col: 6, offset: 1506},
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 7, offset: 1507},
										name: "space_or_newline",
									},
								},
								&notExpr{
									pos: position{line: 64, col: 24, offset: 1524},
									expr: &charClassMatcher{
										pos:        position{line: 64, col: 25, offset: 1525},
										val:        "[:[]",
										chars:      []rune{':', '['},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&anyMatcher{
									line: 64, col: 30, offset: 1530,
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 65, col: 5, offset: 1538},
						run: (*parser).callonredirect_word11,
					},
				},
			},
		},
		{
			name: "start_async",
			pos:  position{line: 73, col: 1, offset: 1899},
			expr: &zeroOrMoreExpr{
				pos: position{line: 74, col: 6, offset: 1916},
				expr: &choiceExpr{
					pos: position{line: 74, col: 7, offset: 1917},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 74, col: 7, offset: 1917},
							name: "tlb",
						},
						&seqExpr{
							pos: position{line: 75, col: 7, offset: 1927},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 75, col: 7, offset: 1927},
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 7, offset: 1927},
										name: "newlineToken",
									},
								},
								&andCodeExpr{
									pos: position{line: 75, col: 21, offset: 1941},
									run: (*parser).callonstart_async7,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "tlb",
			pos:  position{line: 91, col: 1, offset: 2276},
			expr: &actionExpr{
				pos: position{line: 91, col: 8, offset: 2283},
				run: (*parser).callontlb1,
				expr: &seqExpr{
					pos: position{line: 91, col: 8, offset: 2283},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 91, col: 8, offset: 2283},
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 9, offset: 2284},
								name: "eof",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 13, offset: 2288},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 15, offset: 2290},
								name: "block",
							},
						},
					},
				},
			},
		},
		{
			name: "block",
			pos:  position{line: 98, col: 1, offset: 2359},
			expr: &choiceExpr{
				pos: position{line: 100, col: 8, offset: 2442},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 100, col: 8, offset: 2442},
						run: (*parser).callonblock2,
						expr: &seqExpr{
							pos: position{line: 100, col: 8, offset: 2442},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 100, col: 8, offset: 2442},
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 9, offset: 2443},
										name: "sof",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 13, offset: 2447},
									name: "redirect",
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 22, offset: 2456},
									name: "comment_or_includes",
								},
								&zeroOrOneExpr{
									pos: position{line: 100, col: 42, offset: 2476},
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 42, offset: 2476},
										name: "block_line",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 101, col: 7, offset: 2570},
						name: "block_lines",
					},
					&actionExpr{
						pos: position{line: 102, col: 7, offset: 2588},
						run: (*parser).callonblock11,
						expr: &seqExpr{
							pos: position{line: 102, col: 7, offset: 2588},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 102, col: 7, offset: 2588},
									expr: &litMatcher{
										pos:        position{line: 102, col: 9, offset: 2590},
										val:        "<",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 102, col: 13, offset: 2594},
									label: "rs",
									expr: &choiceExpr{
										pos: position{line: 102, col: 18, offset: 2599},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 102, col: 18, offset: 2599},
												run: (*parser).callonblock17,
												expr: &seqExpr{
													pos: position{line: 102, col: 18, offset: 2599},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 102, col: 18, offset: 2599},
															label: "cm",
															expr: &ruleRefExpr{
																pos:  position{line: 102, col: 21, offset: 2602},
																name: "comment",
															},
														},
														&andExpr{
															pos: position{line: 102, col: 29, offset: 2610},
															expr: &ruleRefExpr{
																pos:  position{line: 102, col: 30, offset: 2611},
																name: "eolf",
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 104, col: 14, offset: 2743},
												name: "block_tag",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 106, col: 7, offset: 2806},
						name: "paragraph",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 7, offset: 2935},
						name: "inlineline",
					},
					&actionExpr{
						pos: position{line: 110, col: 7, offset: 2952},
						run: (*parser).callonblock26,
						expr: &seqExpr{
							pos: position{line: 110, col: 7, offset: 2952},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 110, col: 7, offset: 2952},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 9, offset: 2954},
										name: "sol",
									},
								},
								&notExpr{
									pos: position{line: 110, col: 13, offset: 2958},
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 14, offset: 2959},
										name: "inline_breaks",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "nested_block",
			pos:  position{line: 116, col: 1, offset: 3141},
			expr: &actionExpr{
				pos: position{line: 116, col: 17, offset: 3157},
				run: (*parser).callonnested_block1,
				expr: &seqExpr{
					pos: position{line: 116, col: 17, offset: 3157},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 116, col: 17, offset: 3157},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 18, offset: 3158},
								name: "inline_breaks",
							},
						},
						&labeledExpr{
							pos:   position{line: 116, col: 32, offset: 3172},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 34, offset: 3174},
								name: "block",
							},
						},
					},
				},
			},
		},
		{
			name: "nested_block_in_table",
			pos:  position{line: 124, col: 1, offset: 3446},
			expr: &choiceExpr{
				pos: position{line: 129, col: 5, offset: 3637},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 129, col: 5, offset: 3637},
						run: (*parser).callonnested_block_in_table2,
						expr: &seqExpr{
							pos: position{line: 129, col: 5, offset: 3637},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 129, col: 5, offset: 3637},
									run: (*parser).callonnested_block_in_table4,
								},
								&notExpr{
									pos: position{line: 140, col: 5, offset: 4045},
									expr: &seqExpr{
										pos: position{line: 140, col: 7, offset: 4047},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 140, col: 7, offset: 4047},
												name: "sol",
											},
											&zeroOrOneExpr{
												pos: position{line: 140, col: 11, offset: 4051},
												expr: &seqExpr{
													pos: position{line: 140, col: 12, offset: 4052},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 140, col: 12, offset: 4052},
															expr: &ruleRefExpr{
																pos:  position{line: 140, col: 12, offset: 4052},
																name: "space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 140, col: 19, offset: 4059},
															name: "sol",
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 140, col: 25, offset: 4065},
												expr: &ruleRefExpr{
													pos:  position{line: 140, col: 25, offset: 4065},
													name: "space",
												},
											},
											&choiceExpr{
												pos: position{line: 140, col: 33, offset: 4073},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 140, col: 33, offset: 4073},
														name: "pipe",
													},
													&litMatcher{
														pos:        position{line: 140, col: 40, offset: 4080},
														val:        "!",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 140, col: 46, offset: 4086},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 140, col: 48, offset: 4088},
										name: "nested_block",
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 148, col: 5, offset: 4233},
						run: (*parser).callonnested_block_in_table20,
					},
				},
			},
		},
		{
			name: "block_lines",
			pos:  position{line: 157, col: 1, offset: 4373},
			expr: &seqExpr{
				pos: position{line: 158, col: 6, offset: 4390},
				exprs: []interface{}{
					&labeledExpr{
						pos:   position{line: 158, col: 6, offset: 4390},
						label: "s",
						expr: &ruleRefExpr{
							pos:  position{line: 158, col: 8, offset: 4392},
							name: "sol",
						},
					},
					&labeledExpr{
						pos:   position{line: 160, col: 5, offset: 4438},
						label: "s2",
						expr: &seqExpr{
							pos: position{line: 160, col: 9, offset: 4442},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 160, col: 9, offset: 4442},
									label: "os",
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 12, offset: 4445},
										name: "optionalSpaceToken",
									},
								},
								&labeledExpr{
									pos:   position{line: 160, col: 31, offset: 4464},
									label: "so",
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 34, offset: 4467},
										name: "sol",
									},
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 161, col: 5, offset: 4476},
						label: "bl",
						expr: &ruleRefExpr{
							pos:  position{line: 161, col: 8, offset: 4479},
							name: "block_line",
						},
					},
				},
			},
		},
		{
			name: "hr",
			pos:  position{line: 164, col: 1, offset: 4511},
			expr: &actionExpr{
				pos: position{line: 164, col: 7, offset: 4517},
				run: (*parser).callonhr1,
				expr: &seqExpr{
					pos: position{line: 164, col: 7, offset: 4517},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 164, col: 7, offset: 4517},
							val:        "----",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 164, col: 14, offset: 4524},
							expr: &litMatcher{
								pos:        position{line: 164, col: 14, offset: 4524},
								val:        "-",
								ignoreCase: false,
							},
						},
						&choiceExpr{
							pos: position{line: 166, col: 5, offset: 4574},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 166, col: 5, offset: 4574},
									run: (*parser).callonhr7,
									expr: &seqExpr{
										pos: position{line: 166, col: 5, offset: 4574},
										exprs: []interface{}{
											&andExpr{
												pos: position{line: 166, col: 5, offset: 4574},
												expr: &ruleRefExpr{
													pos:  position{line: 166, col: 6, offset: 4575},
													name: "sol",
												},
											},
											&litMatcher{
												pos:        position{line: 166, col: 10, offset: 4579},
												val:        "",
												ignoreCase: false,
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 166, col: 56, offset: 4625},
									run: (*parser).callonhr12,
									expr: &litMatcher{
										pos:        position{line: 166, col: 56, offset: 4625},
										val:        "",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "block_line",
			pos:  position{line: 186, col: 1, offset: 5032},
			expr: &choiceExpr{
				pos: position{line: 187, col: 6, offset: 5048},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 187, col: 6, offset: 5048},
						name: "heading",
					},
					&ruleRefExpr{
						pos:  position{line: 188, col: 5, offset: 5060},
						name: "list_item",
					},
					&ruleRefExpr{
						pos:  position{line: 189, col: 5, offset: 5074},
						name: "hr",
					},
					&actionExpr{
						pos: position{line: 190, col: 5, offset: 5081},
						run: (*parser).callonblock_line5,
						expr: &seqExpr{
							pos: position{line: 190, col: 5, offset: 5081},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 190, col: 5, offset: 5081},
									label: "st",
									expr: &zeroOrMoreExpr{
										pos: position{line: 190, col: 9, offset: 5085},
										expr: &ruleRefExpr{
											pos:  position{line: 190, col: 9, offset: 5085},
											name: "space_or_newline",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 191, col: 5, offset: 5107},
									label: "r",
									expr: &choiceExpr{
										pos: position{line: 191, col: 9, offset: 5111},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 191, col: 9, offset: 5111},
												run: (*parser).callonblock_line12,
												expr: &seqExpr{
													pos: position{line: 191, col: 9, offset: 5111},
													exprs: []interface{}{
														&andExpr{
															pos: position{line: 191, col: 9, offset: 5111},
															expr: &charClassMatcher{
																pos:        position{line: 191, col: 11, offset: 5113},
																val:        "[ <{}|!]",
																chars:      []rune{' ', '<', '{', '}', '|', '!'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 191, col: 20, offset: 5122},
															label: "tl",
															expr: &ruleRefExpr{
																pos:  position{line: 191, col: 23, offset: 5125},
																name: "table_line",
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 193, col: 9, offset: 5225},
												run: (*parser).callonblock_line18,
												expr: &seqExpr{
													pos: position{line: 193, col: 9, offset: 5225},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 193, col: 9, offset: 5225},
															label: "bts",
															expr: &oneOrMoreExpr{
																pos: position{line: 193, col: 13, offset: 5229},
																expr: &actionExpr{
																	pos: position{line: 193, col: 14, offset: 5230},
																	run: (*parser).callonblock_line22,
																	expr: &seqExpr{
																		pos: position{line: 193, col: 14, offset: 5230},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 193, col: 14, offset: 5230},
																				label: "bt",
																				expr: &ruleRefExpr{
																					pos:  position{line: 193, col: 17, offset: 5233},
																					name: "block_tag",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 193, col: 27, offset: 5243},
																				label: "stl",
																				expr: &ruleRefExpr{
																					pos:  position{line: 193, col: 31, offset: 5247},
																					name: "optionalSpaceToken",
																				},
																			},
																		},
																	},
																},
															},
														},
														&andExpr{
															pos: position{line: 194, col: 9, offset: 5334},
															expr: &ruleRefExpr{
																pos:  position{line: 194, col: 10, offset: 5335},
																name: "eolf",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "paragraph",
			pos:  position{line: 206, col: 1, offset: 5682},
			expr: &actionExpr{
				pos: position{line: 207, col: 6, offset: 5697},
				run: (*parser).callonparagraph1,
				expr: &seqExpr{
					pos: position{line: 207, col: 6, offset: 5697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 207, col: 6, offset: 5697},
							label: "s1",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 9, offset: 5700},
								name: "sol",
							},
						},
						&labeledExpr{
							pos:   position{line: 207, col: 13, offset: 5704},
							label: "s2",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 16, offset: 5707},
								name: "sol",
							},
						},
						&labeledExpr{
							pos:   position{line: 207, col: 20, offset: 5711},
							label: "c1",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 23, offset: 5714},
								name: "inlineline",
							},
						},
					},
				},
			},
		},
		{
			name: "br",
			pos:  position{line: 216, col: 1, offset: 5830},
			expr: &actionExpr{
				pos: position{line: 216, col: 7, offset: 5836},
				run: (*parser).callonbr1,
				expr: &seqExpr{
					pos: position{line: 216, col: 7, offset: 5836},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 216, col: 7, offset: 5836},
							name: "optionalSpaceToken",
						},
						&andExpr{
							pos: position{line: 216, col: 26, offset: 5855},
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 27, offset: 5856},
								name: "newline",
							},
						},
					},
				},
			},
		},
		{
			name: "inline_breaks",
			pos:  position{line: 228, col: 1, offset: 6044},
			expr: &andCodeExpr{
				pos: position{line: 228, col: 18, offset: 6061},
				run: (*parser).calloninline_breaks1,
			},
		},
		{
			name: "inlineline",
			pos:  position{line: 230, col: 1, offset: 6091},
			expr: &oneOrMoreExpr{
				pos: position{line: 231, col: 6, offset: 6107},
				expr: &choiceExpr{
					pos: position{line: 231, col: 7, offset: 6108},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 231, col: 7, offset: 6108},
							name: "urltext",
						},
						&actionExpr{
							pos: position{line: 232, col: 8, offset: 6123},
							run: (*parser).calloninlineline4,
							expr: &seqExpr{
								pos: position{line: 232, col: 8, offset: 6123},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 232, col: 8, offset: 6123},
										expr: &ruleRefExpr{
											pos:  position{line: 232, col: 9, offset: 6124},
											name: "inline_breaks",
										},
									},
									&labeledExpr{
										pos:   position{line: 233, col: 5, offset: 6142},
										label: "r",
										expr: &choiceExpr{
											pos: position{line: 233, col: 8, offset: 6145},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 233, col: 8, offset: 6145},
													name: "inline_element",
												},
												&charClassMatcher{
													pos:        position{line: 233, col: 25, offset: 6162},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "inline_element",
			pos:  position{line: 235, col: 1, offset: 6191},
			expr: &choiceExpr{
				pos: position{line: 236, col: 6, offset: 6211},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 236, col: 6, offset: 6211},
						run: (*parser).calloninline_element2,
						expr: &seqExpr{
							pos: position{line: 236, col: 6, offset: 6211},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 236, col: 6, offset: 6211},
									expr: &litMatcher{
										pos:        position{line: 236, col: 8, offset: 6213},
										val:        "<",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 236, col: 12, offset: 6217},
									label: "r",
									expr: &choiceExpr{
										pos: position{line: 236, col: 16, offset: 6221},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 236, col: 16, offset: 6221},
												name: "xmlish_tag",
											},
											&ruleRefExpr{
												pos:  position{line: 237, col: 13, offset: 6244},
												name: "comment",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 239, col: 7, offset: 6301},
						run: (*parser).calloninline_element10,
						expr: &seqExpr{
							pos: position{line: 239, col: 7, offset: 6301},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 239, col: 7, offset: 6301},
									expr: &litMatcher{
										pos:        position{line: 239, col: 9, offset: 6303},
										val:        "{",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 239, col: 13, offset: 6307},
									label: "r",
									expr: &ruleRefExpr{
										pos:  position{line: 239, col: 15, offset: 6309},
										name: "tplarg_or_template",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 240, col: 7, offset: 6365},
						run: (*parser).calloninline_element16,
						expr: &seqExpr{
							pos: position{line: 240, col: 7, offset: 6365},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 240, col: 7, offset: 6365},
									expr: &litMatcher{
										pos:        position{line: 240, col: 9, offset: 6367},
										val:        "-{",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 240, col: 14, offset: 6372},
									label: "r",
									expr: &ruleRefExpr{
										pos:  position{line: 240, col: 16, offset: 6374},
										name: "lang_variant_or_tpl",
									},
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 247, col: 7, offset: 6853},
						expr: &seqExpr{
							pos: position{line: 247, col: 8, offset: 6854},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 247, col: 8, offset: 6854},
									val:        "[[",
									ignoreCase: false,
								},
								&andExpr{
									pos: position{line: 247, col: 13, offset: 6859},
									expr: &litMatcher{
										pos:        position{line: 247, col: 14, offset: 6860},
										val:        "[",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 248, col: 7, offset: 6872},
						run: (*parser).calloninline_element27,
						expr: &seqExpr{
							pos: position{line: 248, col: 7, offset: 6872},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 248, col: 7, offset: 6872},
									expr: &litMatcher{
										pos:        position{line: 248, col: 9, offset: 6874},
										val:        "[",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 248, col: 13, offset: 6878},
									label: "r",
									expr: &choiceExpr{
										pos: position{line: 248, col: 17, offset: 6882},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 248, col: 17, offset: 6882},
												name: "wikilink",
											},
											&ruleRefExpr{
												pos:  position{line: 248, col: 28, offset: 6893},
												name: "extlink",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 249, col: 7, offset: 6940},
						run: (*parser).calloninline_element35,
						expr: &seqExpr{
							pos: position{line: 249, col: 7, offset: 6940},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 249, col: 7, offset: 6940},
									expr: &litMatcher{
										pos:        position{line: 249, col: 9, offset: 6942},
										val:        "'",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 249, col: 13, offset: 6946},
									label: "r",
									expr: &ruleRefExpr{
										pos:  position{line: 249, col: 15, offset: 6948},
										name: "quote",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "heading",
			pos:  position{line: 253, col: 1, offset: 7003},
			expr: &actionExpr{
				pos: position{line: 253, col: 12, offset: 7014},
				run: (*parser).callonheading1,
				expr: &seqExpr{
					pos: position{line: 253, col: 12, offset: 7014},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 253, col: 12, offset: 7014},
							expr: &litMatcher{
								pos:        position{line: 253, col: 14, offset: 7016},
								val:        "=",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 255, col: 5, offset: 7115},
							label: "r",
							expr: &choiceExpr{
								pos: position{line: 256, col: 6, offset: 7124},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 256, col: 6, offset: 7124},
										run: (*parser).callonheading7,
										expr: &seqExpr{
											pos: position{line: 256, col: 6, offset: 7124},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 256, col: 6, offset: 7124},
													run: (*parser).callonheading9,
												},
												&labeledExpr{
													pos:   position{line: 257, col: 6, offset: 7192},
													label: "s",
													expr: &oneOrMoreExpr{
														pos: position{line: 257, col: 8, offset: 7194},
														expr: &litMatcher{
															pos:        position{line: 257, col: 8, offset: 7194},
															val:        "=",
															ignoreCase: false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 258, col: 6, offset: 7258},
													label: "ce",
													expr: &zeroOrOneExpr{
														pos: position{line: 258, col: 9, offset: 7261},
														expr: &actionExpr{
															pos: position{line: 260, col: 8, offset: 7335},
															run: (*parser).callonheading15,
															expr: &seqExpr{
																pos: position{line: 260, col: 8, offset: 7335},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 260, col: 9, offset: 7336},
																		label: "ill",
																		expr: &choiceExpr{
																			pos: position{line: 260, col: 14, offset: 7341},
																			alternatives: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 260, col: 14, offset: 7341},
																					expr: &ruleRefExpr{
																						pos:  position{line: 260, col: 14, offset: 7341},
																						name: "urltext",
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 260, col: 25, offset: 7352},
																					expr: &ruleRefExpr{
																						pos:  position{line: 260, col: 25, offset: 7352},
																						name: "inlineline",
																					},
																				},
																			},
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 261, col: 8, offset: 7373},
																		expr: &litMatcher{
																			pos:        position{line: 261, col: 8, offset: 7373},
																			val:        "=",
																			ignoreCase: false,
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 263, col: 6, offset: 7409},
													run: (*parser).callonheading25,
												},
												&labeledExpr{
													pos:   position{line: 268, col: 6, offset: 7567},
													label: "spc",
													expr: &zeroOrMoreExpr{
														pos: position{line: 268, col: 10, offset: 7571},
														expr: &choiceExpr{
															pos: position{line: 268, col: 11, offset: 7572},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 268, col: 11, offset: 7572},
																	name: "spaces",
																},
																&ruleRefExpr{
																	pos:  position{line: 268, col: 20, offset: 7581},
																	name: "comment",
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 269, col: 6, offset: 7596},
													expr: &ruleRefExpr{
														pos:  position{line: 269, col: 7, offset: 7597},
														name: "eolf",
													},
												},
											},
										},
									},
									&andCodeExpr{
										pos: position{line: 324, col: 7, offset: 9166},
										run: (*parser).callonheading33,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "comment",
			pos:  position{line: 340, col: 1, offset: 9684},
			expr: &actionExpr{
				pos: position{line: 341, col: 8, offset: 9699},
				run: (*parser).calloncomment1,
				expr: &seqExpr{
					pos: position{line: 341, col: 8, offset: 9699},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 341, col: 8, offset: 9699},
							val:        "<!--",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 341, col: 15, offset: 9706},
							label: "c1",
							expr: &zeroOrMoreExpr{
								pos: position{line: 341, col: 18, offset: 9709},
								expr: &seqExpr{
									pos: position{line: 341, col: 19, offset: 9710},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 341, col: 19, offset: 9710},
											expr: &litMatcher{
												pos:        position{line: 341, col: 20, offset: 9711},
												val:        "-->",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 341, col: 26, offset: 9717,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 341, col: 31, offset: 9722},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 341, col: 31, offset: 9722},
									val:        "-->",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 39, offset: 9730},
									name: "eof",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "behavior_switch",
			pos:  position{line: 355, col: 1, offset: 10052},
			expr: &actionExpr{
				pos: position{line: 356, col: 6, offset: 10073},
				run: (*parser).callonbehavior_switch1,
				expr: &seqExpr{
					pos: position{line: 356, col: 7, offset: 10074},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 7, offset: 10074},
							val:        "__",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 356, col: 12, offset: 10079},
							name: "behavior_text",
						},
						&litMatcher{
							pos:        position{line: 356, col: 26, offset: 10093},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "behavior_text",
			pos:  position{line: 374, col: 1, offset: 10670},
			expr: &oneOrMoreExpr{
				pos: position{line: 374, col: 18, offset: 10687},
				expr: &seqExpr{
					pos: position{line: 374, col: 20, offset: 10689},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 374, col: 20, offset: 10689},
							expr: &litMatcher{
								pos:        position{line: 374, col: 21, offset: 10690},
								val:        "__",
								ignoreCase: false,
							},
						},
						&charClassMatcher{
							pos:        position{line: 374, col: 26, offset: 10695},
							val:        "[^'\"<~[{\\n\\r:;\\]}|!=]",
							chars:      []rune{'\'', '"', '<', '~', '[', '{', '\n', '\r', ':', ';', ']', '}', '|', '!', '='},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "autolink",
			pos:  position{line: 381, col: 1, offset: 10897},
			expr: &actionExpr{
				pos: position{line: 382, col: 6, offset: 10911},
				run: (*parser).callonautolink1,
				expr: &seqExpr{
					pos: position{line: 382, col: 6, offset: 10911},
					exprs: []interface{}{
						&notCodeExpr{
							pos: position{line: 382, col: 6, offset: 10911},
							run: (*parser).callonautolink3,
						},
						&notCodeExpr{
							pos: position{line: 384, col: 5, offset: 11046},
							run: (*parser).callonautolink4,
						},
						&labeledExpr{
							pos:   position{line: 385, col: 3, offset: 11122},
							label: "r",
							expr: &choiceExpr{
								pos: position{line: 387, col: 7, offset: 11152},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 387, col: 7, offset: 11152},
										run: (*parser).callonautolink7,
										expr: &labeledExpr{
											pos:   position{line: 387, col: 7, offset: 11152},
											label: "target",
											expr: &ruleRefExpr{
												pos:  position{line: 387, col: 14, offset: 11159},
												name: "autourl",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 393, col: 7, offset: 11350},
										name: "autoref",
									},
									&ruleRefExpr{
										pos:  position{line: 394, col: 7, offset: 11364},
										name: "isbn",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "extlink",
			pos:  position{line: 396, col: 1, offset: 11402},
			expr: &actionExpr{
				pos: position{line: 397, col: 6, offset: 11415},
				run: (*parser).callonextlink1,
				expr: &seqExpr{
					pos: position{line: 397, col: 6, offset: 11415},
					exprs: []interface{}{
						&notCodeExpr{
							pos: position{line: 397, col: 6, offset: 11415},
							run: (*parser).callonextlink3,
						},
						&choiceExpr{
							pos: position{line: 399, col: 9, offset: 11514},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 399, col: 9, offset: 11514},
									run: (*parser).callonextlink5,
									expr: &seqExpr{
										pos: position{line: 399, col: 9, offset: 11514},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 399, col: 9, offset: 11514},
												val:        "[",
												ignoreCase: false,
											},
											&andCodeExpr{
												pos: position{line: 400, col: 9, offset: 11526},
												run: (*parser).callonextlink8,
											},
											&choiceExpr{
												pos: position{line: 401, col: 10, offset: 11610},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 401, col: 10, offset: 11610},
														exprs: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 401, col: 10, offset: 11610},
																name: "url_protocol",
															},
															&ruleRefExpr{
																pos:  position{line: 401, col: 23, offset: 11623},
																name: "urladdr",
															},
														},
													},
													&litMatcher{
														pos:        position{line: 401, col: 33, offset: 11633},
														val:        "",
														ignoreCase: false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 402, col: 10, offset: 11646},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 402, col: 10, offset: 11646},
														name: "extlink_preprocessor_text",
													},
													&litMatcher{
														pos:        position{line: 402, col: 38, offset: 11674},
														val:        "",
														ignoreCase: false,
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 403, col: 9, offset: 11686},
												run: (*parser).callonextlink17,
											},
											&zeroOrMoreExpr{
												pos: position{line: 415, col: 9, offset: 12131},
												expr: &choiceExpr{
													pos: position{line: 415, col: 11, offset: 12133},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 415, col: 11, offset: 12133},
															name: "space",
														},
														&ruleRefExpr{
															pos:  position{line: 415, col: 19, offset: 12141},
															name: "unispace",
														},
													},
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 417, col: 9, offset: 12220},
												expr: &ruleRefExpr{
													pos:  position{line: 417, col: 9, offset: 12220},
													name: "inlineline",
												},
											},
											&litMatcher{
												pos:        position{line: 418, col: 9, offset: 12240},
												val:        "]",
												ignoreCase: false,
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 434, col: 9, offset: 12782},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 434, col: 9, offset: 12782},
											val:        "[",
											ignoreCase: false,
										},
										&andCodeExpr{
											pos: position{line: 434, col: 13, offset: 12786},
											run: (*parser).callonextlink27,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "autoref",
			pos:  position{line: 437, col: 1, offset: 12882},
			expr: &actionExpr{
				pos: position{line: 438, col: 6, offset: 12895},
				run: (*parser).callonautoref1,
				expr: &seqExpr{
					pos: position{line: 438, col: 6, offset: 12895},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 438, col: 7, offset: 12896},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 438, col: 7, offset: 12896},
									val:        "RFC",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 438, col: 15, offset: 12904},
									val:        "PMID",
									ignoreCase: false,
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 438, col: 23, offset: 12912},
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 23, offset: 12912},
								name: "space_or_nbsp",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 438, col: 38, offset: 12927},
							expr: &charClassMatcher{
								pos:        position{line: 438, col: 38, offset: 12927},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 438, col: 45, offset: 12934},
							name: "end_of_word",
						},
					},
				},
			},
		},
		{
			name: "isbn",
			pos:  position{line: 456, col: 1, offset: 13434},
			expr: &actionExpr{
				pos: position{line: 457, col: 6, offset: 13444},
				run: (*parser).callonisbn1,
				expr: &seqExpr{
					pos: position{line: 457, col: 6, offset: 13444},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 6, offset: 13444},
							val:        "ISBN",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 457, col: 13, offset: 13451},
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 13, offset: 13451},
								name: "space_or_nbsp",
							},
						},
						&seqExpr{
							pos: position{line: 458, col: 7, offset: 13474},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 458, col: 7, offset: 13474},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&oneOrMoreExpr{
									pos: position{line: 459, col: 7, offset: 13486},
									expr: &choiceExpr{
										pos: position{line: 459, col: 8, offset: 13487},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 459, col: 8, offset: 13487},
												run: (*parser).callonisbn10,
												expr: &seqExpr{
													pos: position{line: 459, col: 8, offset: 13487},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 459, col: 8, offset: 13487},
															name: "space_or_nbsp_or_dash",
														},
														&andExpr{
															pos: position{line: 459, col: 30, offset: 13509},
															expr: &charClassMatcher{
																pos:        position{line: 459, col: 31, offset: 13510},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 459, col: 72, offset: 13551},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 460, col: 8, offset: 13566},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 460, col: 8, offset: 13566},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 460, col: 9, offset: 13567},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 460, col: 9, offset: 13567},
															name: "space_or_nbsp_or_dash",
														},
														&litMatcher{
															pos:        position{line: 460, col: 33, offset: 13591},
															val:        "",
															ignoreCase: false,
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 460, col: 37, offset: 13595},
													val:        "[xX]",
													chars:      []rune{'x', 'X'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 460, col: 44, offset: 13602},
											val:        "",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 462, col: 7, offset: 13620},
							run: (*parser).callonisbn23,
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 7, offset: 13620},
								name: "end_of_word",
							},
						},
						&andCodeExpr{
							pos: position{line: 471, col: 7, offset: 13913},
							run: (*parser).callonisbn25,
						},
					},
				},
			},
		},
		{
			name: "url_protocol",
			pos:  position{line: 495, col: 1, offset: 14601},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 14621},
				run: (*parser).callonurl_protocol1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 14621},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 496, col: 5, offset: 14621},
							run: (*parser).callonurl_protocol3,
						},
						&choiceExpr{
							pos: position{line: 497, col: 7, offset: 14715},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 497, col: 7, offset: 14715},
									val:        "//",
									ignoreCase: false,
								},
								&seqExpr{
									pos: position{line: 497, col: 14, offset: 14722},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 497, col: 14, offset: 14722},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 497, col: 23, offset: 14731},
											expr: &charClassMatcher{
												pos:        position{line: 497, col: 23, offset: 14731},
												val:        "[-A-Za-z0-9+.]",
												chars:      []rune{'-', '+', '.'},
												ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 497, col: 39, offset: 14747},
											val:        ":",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 497, col: 43, offset: 14751},
											expr: &litMatcher{
												pos:        position{line: 497, col: 43, offset: 14751},
												val:        "//",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "no_punctuation_char",
			pos:  position{line: 500, col: 1, offset: 14843},
			expr: &charClassMatcher{
				pos:        position{line: 500, col: 24, offset: 14866},
				val:        "[^ :\\][\\r\\n\"'<>,.&%{]",
				chars:      []rune{' ', ':', ']', '[', '\r', '\n', '"', '\'', '<', '>', ',', '.', '&', '%', '{'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "url",
			pos:  position{line: 508, col: 1, offset: 15264},
			expr: &actionExpr{
				pos: position{line: 509, col: 6, offset: 15273},
				run: (*parser).callonurl1,
				expr: &seqExpr{
					pos: position{line: 509, col: 6, offset: 15273},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 509, col: 6, offset: 15273},
							label: "proto",
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 12, offset: 15279},
								name: "url_protocol",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 5, offset: 15296},
							label: "addr",
							expr: &choiceExpr{
								pos: position{line: 510, col: 11, offset: 15302},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 510, col: 11, offset: 15302},
										name: "urladdr",
									},
									&litMatcher{
										pos:        position{line: 510, col: 21, offset: 15312},
										val:        "",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 511, col: 5, offset: 15320},
							label: "path",
							expr: &zeroOrMoreExpr{
								pos: position{line: 511, col: 10, offset: 15325},
								expr: &choiceExpr{
									pos: position{line: 511, col: 13, offset: 15328},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 511, col: 15, offset: 15330},
											run: (*parser).callonurl12,
											expr: &seqExpr{
												pos: position{line: 511, col: 15, offset: 15330},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 511, col: 15, offset: 15330},
														expr: &ruleRefExpr{
															pos:  position{line: 511, col: 16, offset: 15331},
															name: "inline_breaks",
														},
													},
													&labeledExpr{
														pos:   position{line: 512, col: 15, offset: 15359},
														label: "c1",
														expr: &ruleRefExpr{
															pos:  position{line: 512, col: 18, offset: 15362},
															name: "no_punctuation_char",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 515, col: 15, offset: 15456},
											run: (*parser).callonurl18,
											expr: &labeledExpr{
												pos:   position{line: 515, col: 15, offset: 15456},
												label: "s",
												expr: &charClassMatcher{
													pos:        position{line: 515, col: 17, offset: 15458},
													val:        "[.:,']",
													chars:      []rune{'.', ':', ',', '\''},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 516, col: 15, offset: 15511},
											name: "comment",
										},
										&ruleRefExpr{
											pos:  position{line: 517, col: 15, offset: 15533},
											name: "tplarg_or_template",
										},
										&actionExpr{
											pos: position{line: 518, col: 15, offset: 15566},
											run: (*parser).callonurl23,
											expr: &seqExpr{
												pos: position{line: 518, col: 15, offset: 15566},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 518, col: 15, offset: 15566},
														expr: &seqExpr{
															pos: position{line: 518, col: 19, offset: 15570},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 518, col: 19, offset: 15570},
																	val:        "&",
																	ignoreCase: false,
																},
																&choiceExpr{
																	pos: position{line: 518, col: 25, offset: 15576},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 518, col: 25, offset: 15576},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 518, col: 25, offset: 15576},
																					val:        "[lL]",
																					chars:      []rune{'l', 'L'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 518, col: 29, offset: 15580},
																					val:        "[tT]",
																					chars:      []rune{'t', 'T'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 518, col: 36, offset: 15587},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 518, col: 36, offset: 15587},
																					val:        "[gG]",
																					chars:      []rune{'g', 'G'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 518, col: 40, offset: 15591},
																					val:        "[tT]",
																					chars:      []rune{'t', 'T'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 518, col: 47, offset: 15598},
																	val:        ";",
																	ignoreCase: false,
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 519, col: 17, offset: 15620},
														label: "r",
														expr: &choiceExpr{
															pos: position{line: 520, col: 21, offset: 15644},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 520, col: 21, offset: 15644},
																	run: (*parser).callonurl38,
																	expr: &seqExpr{
																		pos: position{line: 520, col: 21, offset: 15644},
																		exprs: []interface{}{
																			&andExpr{
																				pos: position{line: 520, col: 21, offset: 15644},
																				expr: &litMatcher{
																					pos:        position{line: 520, col: 23, offset: 15646},
																					val:        "&",
																					ignoreCase: false,
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 520, col: 27, offset: 15650},
																				label: "he",
																				expr: &ruleRefExpr{
																					pos:  position{line: 520, col: 30, offset: 15653},
																					name: "htmlentity",
																				},
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 521, col: 21, offset: 15717},
																	val:        "[&%{]",
																	chars:      []rune{'&', '%', '{'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 525, col: 10, offset: 15846},
							run: (*parser).callonurl45,
						},
					},
				},
			},
		},
		{
			name: "autourl",
			pos:  position{line: 539, col: 1, offset: 16457},
			expr: &choiceExpr{
				pos: position{line: 540, col: 6, offset: 16470},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 540, col: 6, offset: 16470},
						run: (*parser).callonautourl2,
						expr: &seqExpr{
							pos: position{line: 540, col: 6, offset: 16470},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 540, col: 6, offset: 16470},
									run: (*parser).callonautourl4,
								},
								&notExpr{
									pos: position{line: 541, col: 5, offset: 16551},
									expr: &litMatcher{
										pos:        position{line: 541, col: 7, offset: 16553},
										val:        "//",
										ignoreCase: false,
									},
								},
								&actionExpr{
									pos: position{line: 543, col: 5, offset: 16620},
									run: (*parser).callonautourl7,
									expr: &seqExpr{
										pos: position{line: 543, col: 5, offset: 16620},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 543, col: 5, offset: 16620},
												name: "url_protocol",
											},
											&choiceExpr{
												pos: position{line: 544, col: 6, offset: 16638},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 544, col: 6, offset: 16638},
														name: "urladdr",
													},
													&litMatcher{
														pos:        position{line: 544, col: 16, offset: 16648},
														val:        "",
														ignoreCase: false,
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 545, col: 5, offset: 16656},
												expr: &choiceExpr{
													pos: position{line: 545, col: 8, offset: 16659},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 545, col: 10, offset: 16661},
															run: (*parser).callonautourl15,
															expr: &seqExpr{
																pos: position{line: 545, col: 10, offset: 16661},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 545, col: 10, offset: 16661},
																		expr: &ruleRefExpr{
																			pos:  position{line: 545, col: 11, offset: 16662},
																			name: "inline_breaks",
																		},
																	},
																	&notExpr{
																		pos: position{line: 546, col: 15, offset: 16690},
																		expr: &litMatcher{
																			pos:        position{line: 546, col: 17, offset: 16692},
																			val:        "(",
																			ignoreCase: false,
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 547, col: 15, offset: 16710},
																		label: "c1",
																		expr: &ruleRefExpr{
																			pos:  position{line: 547, col: 18, offset: 16713},
																			name: "no_punctuation_char",
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 550, col: 15, offset: 16807},
															run: (*parser).callonautourl23,
															expr: &litMatcher{
																pos:        position{line: 550, col: 15, offset: 16807},
																val:        "(",
																ignoreCase: false,
															},
														},
														&charClassMatcher{
															pos:        position{line: 551, col: 15, offset: 16903},
															val:        "[.:,]",
															chars:      []rune{'.', ':', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 552, col: 16, offset: 16924},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 552, col: 16, offset: 16924},
																	val:        "[']",
																	chars:      []rune{'\''},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 552, col: 20, offset: 16928},
																	expr: &charClassMatcher{
																		pos:        position{line: 552, col: 21, offset: 16929},
																		val:        "[']",
																		chars:      []rune{'\''},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 553, col: 15, offset: 16995},
															name: "comment",
														},
														&ruleRefExpr{
															pos:  position{line: 554, col: 15, offset: 17017},
															name: "tplarg_or_template",
														},
														&actionExpr{
															pos: position{line: 555, col: 15, offset: 17050},
															run: (*parser).callonautourl32,
															expr: &seqExpr{
																pos: position{line: 555, col: 15, offset: 17050},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 555, col: 15, offset: 17050},
																		expr: &seqExpr{
																			pos: position{line: 555, col: 19, offset: 17054},
																			exprs: []interface{}{
																				&ruleRefExpr{
																					pos:  position{line: 555, col: 19, offset: 17054},
																					name: "raw_htmlentity",
																				},
																				&andCodeExpr{
																					pos: position{line: 555, col: 34, offset: 17069},
																					run: (*parser).callonautourl37,
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 556, col: 17, offset: 17147},
																		label: "r",
																		expr: &choiceExpr{
																			pos: position{line: 557, col: 21, offset: 17171},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 557, col: 21, offset: 17171},
																					run: (*parser).callonautourl40,
																					expr: &seqExpr{
																						pos: position{line: 557, col: 21, offset: 17171},
																						exprs: []interface{}{
																							&andExpr{
																								pos: position{line: 557, col: 21, offset: 17171},
																								expr: &litMatcher{
																									pos:        position{line: 557, col: 23, offset: 17173},
																									val:        "&",
																									ignoreCase: false,
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 557, col: 27, offset: 17177},
																								label: "he",
																								expr: &ruleRefExpr{
																									pos:  position{line: 557, col: 30, offset: 17180},
																									name: "htmlentity",
																								},
																							},
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 558, col: 21, offset: 17244},
																					val:        "[&%{]",
																					chars:      []rune{'&', '%', '{'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 586, col: 5, offset: 18248},
									run: (*parser).callonautourl47,
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 587, col: 7, offset: 18331},
						run: (*parser).callonautourl48,
					},
				},
			},
		},
		{
			name: "urladdr",
			pos:  position{line: 593, col: 1, offset: 18646},
			expr: &seqExpr{
				pos: position{line: 594, col: 8, offset: 18661},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 594, col: 8, offset: 18661},
						val:        "[",
						ignoreCase: false,
					},
					&oneOrMoreExpr{
						pos: position{line: 594, col: 12, offset: 18665},
						expr: &charClassMatcher{
							pos:        position{line: 594, col: 12, offset: 18665},
							val:        "[0-9A-Fa-f:.]",
							chars:      []rune{':', '.'},
							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 594, col: 27, offset: 18680},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "tplarg_or_template",
			pos:  position{line: 610, col: 1, offset: 19258},
			expr: &actionExpr{
				pos: position{line: 611, col: 6, offset: 19282},
				run: (*parser).callontplarg_or_template1,
				expr: &seqExpr{
					pos: position{line: 611, col: 6, offset: 19282},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 611, col: 6, offset: 19282},
							expr: &litMatcher{
								pos:        position{line: 611, col: 7, offset: 19283},
								val:        "{{",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 623, col: 5, offset: 19787},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 623, col: 7, offset: 19789},
								name: "tplarg_or_template_guarded",
							},
						},
					},
				},
			},
		},
		{
			name: "tplarg_or_template_guarded",
			pos:  position{line: 625, col: 1, offset: 19848},
			expr: &choiceExpr{
				pos: position{line: 626, col: 6, offset: 19880},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 626, col: 6, offset: 19880},
						run: (*parser).callontplarg_or_template_guarded2,
						expr: &seqExpr{
							pos: position{line: 626, col: 6, offset: 19880},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 626, col: 6, offset: 19880},
									run: (*parser).callontplarg_or_template_guarded4,
								},
								&labeledExpr{
									pos:   position{line: 627, col: 5, offset: 19970},
									label: "r",
									expr: &choiceExpr{
										pos: position{line: 627, col: 9, offset: 19974},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 627, col: 9, offset: 19974},
												run: (*parser).callontplarg_or_template_guarded7,
												expr: &seqExpr{
													pos: position{line: 627, col: 9, offset: 19974},
													exprs: []interface{}{
														&andExpr{
															pos: position{line: 627, col: 9, offset: 19974},
															expr: &seqExpr{
																pos: position{line: 627, col: 11, offset: 19976},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 627, col: 11, offset: 19976},
																		val:        "{{",
																		ignoreCase: false,
																	},
																	&andExpr{
																		pos: position{line: 627, col: 16, offset: 19981},
																		expr: &seqExpr{
																			pos: position{line: 627, col: 18, offset: 19983},
																			exprs: []interface{}{
																				&oneOrMoreExpr{
																					pos: position{line: 627, col: 18, offset: 19983},
																					expr: &litMatcher{
																						pos:        position{line: 627, col: 18, offset: 19983},
																						val:        "{{{",
																						ignoreCase: false,
																					},
																				},
																				&notExpr{
																					pos: position{line: 627, col: 25, offset: 19990},
																					expr: &litMatcher{
																						pos:        position{line: 627, col: 26, offset: 19991},
																						val:        "{",
																						ignoreCase: false,
																					},
																				},
																			},
																		},
																	},
																	&ruleRefExpr{
																		pos:  position{line: 627, col: 31, offset: 19996},
																		name: "tplarg",
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 627, col: 39, offset: 20004},
															label: "a",
															expr: &choiceExpr{
																pos: position{line: 627, col: 42, offset: 20007},
																alternatives: []interface{}{
																	&ruleRefExpr{
																		pos:  position{line: 627, col: 42, offset: 20007},
																		name: "template",
																	},
																	&ruleRefExpr{
																		pos:  position{line: 627, col: 51, offset: 20016},
																		name: "broken_template",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 628, col: 9, offset: 20072},
												run: (*parser).callontplarg_or_template_guarded23,
												expr: &seqExpr{
													pos: position{line: 628, col: 9, offset: 20072},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 628, col: 9, offset: 20072},
															label: "a",
															expr: &zeroOrOneExpr{
																pos: position{line: 628, col: 11, offset: 20074},
																expr: &seqExpr{
																	pos: position{line: 628, col: 12, offset: 20075},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 628, col: 12, offset: 20075},
																			val:        "{",
																			ignoreCase: false,
																		},
																		&andExpr{
																			pos: position{line: 628, col: 16, offset: 20079},
																			expr: &seqExpr{
																				pos: position{line: 628, col: 18, offset: 20081},
																				exprs: []interface{}{
																					&oneOrMoreExpr{
																						pos: position{line: 628, col: 18, offset: 20081},
																						expr: &litMatcher{
																							pos:        position{line: 628, col: 18, offset: 20081},
																							val:        "{{{",
																							ignoreCase: false,
																						},
																					},
																					&notExpr{
																						pos: position{line: 628, col: 25, offset: 20088},
																						expr: &litMatcher{
																							pos:        position{line: 628, col: 26, offset: 20089},
																							val:        "{",
																							ignoreCase: false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 628, col: 33, offset: 20096},
															label: "b",
															expr: &ruleRefExpr{
																pos:  position{line: 628, col: 35, offset: 20098},
																name: "tplarg",
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 629, col: 9, offset: 20167},
												run: (*parser).callontplarg_or_template_guarded37,
												expr: &seqExpr{
													pos: position{line: 629, col: 9, offset: 20167},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 629, col: 9, offset: 20167},
															label: "a",
															expr: &zeroOrOneExpr{
																pos: position{line: 629, col: 11, offset: 20169},
																expr: &seqExpr{
																	pos: position{line: 629, col: 12, offset: 20170},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 629, col: 12, offset: 20170},
																			val:        "{",
																			ignoreCase: false,
																		},
																		&andExpr{
																			pos: position{line: 629, col: 16, offset: 20174},
																			expr: &seqExpr{
																				pos: position{line: 629, col: 18, offset: 20176},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 629, col: 18, offset: 20176},
																						val:        "{{",
																						ignoreCase: false,
																					},
																					&notExpr{
																						pos: position{line: 629, col: 23, offset: 20181},
																						expr: &litMatcher{
																							pos:        position{line: 629, col: 24, offset: 20182},
																							val:        "{",
																							ignoreCase: false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 629, col: 31, offset: 20189},
															label: "b",
															expr: &ruleRefExpr{
																pos:  position{line: 629, col: 33, offset: 20191},
																name: "template",
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 630, col: 9, offset: 20262},
												run: (*parser).callontplarg_or_template_guarded50,
												expr: &labeledExpr{
													pos:   position{line: 630, col: 9, offset: 20262},
													label: "a",
													expr: &ruleRefExpr{
														pos:  position{line: 630, col: 11, offset: 20264},
														name: "broken_template",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 639, col: 7, offset: 20443},
						run: (*parser).callontplarg_or_template_guarded53,
					},
				},
			},
		},
		{
			name: "tplarg_or_template_or_bust",
			pos:  position{line: 641, col: 1, offset: 20531},
			expr: &oneOrMoreExpr{
				pos: position{line: 642, col: 8, offset: 20565},
				expr: &choiceExpr{
					pos: position{line: 642, col: 9, offset: 20566},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 642, col: 9, offset: 20566},
							name: "tplarg_or_template",
						},
						&anyMatcher{
							line: 642, col: 30, offset: 20587,
						},
					},
				},
			},
		},
		{
			name: "template",
			pos:  position{line: 644, col: 1, offset: 20592},
			expr: &actionExpr{
				pos: position{line: 645, col: 6, offset: 20606},
				run: (*parser).callontemplate1,
				expr: &seqExpr{
					pos: position{line: 645, col: 6, offset: 20606},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 645, col: 7, offset: 20607},
							run: (*parser).callontemplate3,
							expr: &litMatcher{
								pos:        position{line: 645, col: 7, offset: 20607},
								val:        "",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 5, offset: 20741},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 7, offset: 20743},
								name: "template_preproc",
							},
						},
					},
				},
			},
		},
		{
			name: "broken_template",
			pos:  position{line: 685, col: 1, offset: 22827},
			expr: &actionExpr{
				pos: position{line: 686, col: 6, offset: 22848},
				run: (*parser).callonbroken_template1,
				expr: &seqExpr{
					pos: position{line: 686, col: 6, offset: 22848},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 686, col: 6, offset: 22848},
							expr: &litMatcher{
								pos:        position{line: 686, col: 7, offset: 22849},
								val:        "{{",
								ignoreCase: false,
							},
						},
						&andCodeExpr{
							pos: position{line: 686, col: 12, offset: 22854},
							run: (*parser).callonbroken_template5,
						},
						&labeledExpr{
							pos:   position{line: 688, col: 5, offset: 22998},
							label: "t",
							expr: &litMatcher{
								pos:        position{line: 688, col: 7, offset: 23000},
								val:        "{{",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "template_preproc",
			pos:  position{line: 690, col: 1, offset: 23037},
			expr: &choiceExpr{
				pos: position{line: 691, col: 6, offset: 23059},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 691, col: 6, offset: 23059},
						run: (*parser).callontemplate_preproc2,
						expr: &seqExpr{
							pos: position{line: 691, col: 6, offset: 23059},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 691, col: 6, offset: 23059},
									val:        "{{",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 691, col: 11, offset: 23064},
									expr: &ruleRefExpr{
										pos:  position{line: 691, col: 11, offset: 23064},
										name: "nl_comment_space",
									},
								},
								&labeledExpr{
									pos:   position{line: 692, col: 5, offset: 23086},
									label: "target",
									expr: &ruleRefExpr{
										pos:  position{line: 692, col: 12, offset: 23093},
										name: "template_param_value",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 693, col: 5, offset: 23118},
									expr: &actionExpr{
										pos: position{line: 693, col: 6, offset: 23119},
										run: (*parser).callontemplate_preproc10,
										expr: &seqExpr{
											pos: position{line: 693, col: 6, offset: 23119},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 693, col: 6, offset: 23119},
													expr: &ruleRefExpr{
														pos:  position{line: 693, col: 6, offset: 23119},
														name: "nl_comment_space",
													},
												},
												&litMatcher{
													pos:        position{line: 693, col: 24, offset: 23137},
													val:        "|",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 694, col: 17, offset: 23157},
													label: "r",
													expr: &choiceExpr{
														pos: position{line: 694, col: 21, offset: 23161},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 694, col: 21, offset: 23161},
																run: (*parser).callontemplate_preproc17,
																expr: &seqExpr{
																	pos: position{line: 694, col: 21, offset: 23161},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 694, col: 22, offset: 23162},
																			run: (*parser).callontemplate_preproc19,
																			expr: &litMatcher{
																				pos:        position{line: 694, col: 22, offset: 23162},
																				val:        "",
																				ignoreCase: false,
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 695, col: 21, offset: 23229},
																			label: "v",
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 695, col: 23, offset: 23231},
																				expr: &ruleRefExpr{
																					pos:  position{line: 695, col: 23, offset: 23231},
																					name: "nl_comment_space",
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 696, col: 22, offset: 23270},
																			run: (*parser).callontemplate_preproc24,
																			expr: &litMatcher{
																				pos:        position{line: 696, col: 22, offset: 23270},
																				val:        "",
																				ignoreCase: false,
																			},
																		},
																		&andExpr{
																			pos: position{line: 697, col: 21, offset: 23337},
																			expr: &choiceExpr{
																				pos: position{line: 697, col: 23, offset: 23339},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 697, col: 23, offset: 23339},
																						val:        "|",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 697, col: 29, offset: 23345},
																						val:        "}}",
																						ignoreCase: false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&ruleRefExpr{
																pos:  position{line: 701, col: 23, offset: 23530},
																name: "template_param",
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 704, col: 5, offset: 23615},
									expr: &ruleRefExpr{
										pos:  position{line: 704, col: 5, offset: 23615},
										name: "nl_comment_space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 705, col: 5, offset: 23637},
									name: "inline_breaks",
								},
								&litMatcher{
									pos:        position{line: 705, col: 19, offset: 23651},
									val:        "}}",
									ignoreCase: false,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 714, col: 10, offset: 24048},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 714, col: 10, offset: 24048},
								val:        "{{",
								ignoreCase: false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 714, col: 15, offset: 24053},
								expr: &ruleRefExpr{
									pos:  position{line: 714, col: 15, offset: 24053},
									name: "space_or_newline",
								},
							},
							&litMatcher{
								pos:        position{line: 714, col: 33, offset: 24071},
								val:        "}}",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "tplarg",
			pos:  position{line: 716, col: 1, offset: 24078},
			expr: &actionExpr{
				pos: position{line: 718, col: 5, offset: 24170},
				run: (*parser).callontplarg1,
				expr: &labeledExpr{
					pos:   position{line: 718, col: 5, offset: 24170},
					label: "t",
					expr: &choiceExpr{
						pos: position{line: 718, col: 8, offset: 24173},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 718, col: 8, offset: 24173},
								name: "tplarg_preproc",
							},
							&andCodeExpr{
								pos: position{line: 718, col: 25, offset: 24190},
								run: (*parser).callontplarg5,
							},
						},
					},
				},
			},
		},
		{
			name: "tplarg_preproc",
			pos:  position{line: 721, col: 1, offset: 24328},
			expr: &actionExpr{
				pos: position{line: 722, col: 6, offset: 24348},
				run: (*parser).callontplarg_preproc1,
				expr: &seqExpr{
					pos: position{line: 722, col: 6, offset: 24348},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 722, col: 6, offset: 24348},
							val:        "{{{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 724, col: 5, offset: 24412},
							label: "target",
							expr: &zeroOrOneExpr{
								pos: position{line: 724, col: 12, offset: 24419},
								expr: &ruleRefExpr{
									pos:  position{line: 724, col: 12, offset: 24419},
									name: "template_param_value",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 725, col: 5, offset: 24445},
							label: "params",
							expr: &zeroOrMoreExpr{
								pos: position{line: 725, col: 12, offset: 24452},
								expr: &actionExpr{
									pos: position{line: 725, col: 13, offset: 24453},
									run: (*parser).callontplarg_preproc9,
									expr: &seqExpr{
										pos: position{line: 725, col: 13, offset: 24453},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 725, col: 13, offset: 24453},
												expr: &ruleRefExpr{
													pos:  position{line: 725, col: 13, offset: 24453},
													name: "nl_comment_space",
												},
											},
											&litMatcher{
												pos:        position{line: 725, col: 31, offset: 24471},
												val:        "|",
												ignoreCase: false,
											},
											&choiceExpr{
												pos: position{line: 726, col: 19, offset: 24493},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 726, col: 19, offset: 24493},
														run: (*parser).callontplarg_preproc15,
														expr: &seqExpr{
															pos: position{line: 726, col: 19, offset: 24493},
															exprs: []interface{}{
																&actionExpr{
																	pos: position{line: 726, col: 20, offset: 24494},
																	run: (*parser).callontplarg_preproc17,
																	expr: &litMatcher{
																		pos:        position{line: 726, col: 20, offset: 24494},
																		val:        "",
																		ignoreCase: false,
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 727, col: 21, offset: 24561},
																	expr: &ruleRefExpr{
																		pos:  position{line: 727, col: 21, offset: 24561},
																		name: "nl_comment_space",
																	},
																},
																&actionExpr{
																	pos: position{line: 728, col: 22, offset: 24600},
																	run: (*parser).callontplarg_preproc21,
																	expr: &litMatcher{
																		pos:        position{line: 728, col: 22, offset: 24600},
																		val:        "",
																		ignoreCase: false,
																	},
																},
																&andExpr{
																	pos: position{line: 729, col: 21, offset: 24667},
																	expr: &choiceExpr{
																		pos: position{line: 729, col: 23, offset: 24669},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 729, col: 23, offset: 24669},
																				val:        "|",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 729, col: 29, offset: 24675},
																				val:        "}}}",
																				ignoreCase: false,
																			},
																		},
																	},
																},
															},
														},
													},
													&ruleRefExpr{
														pos:  position{line: 731, col: 23, offset: 24825},
														name: "template_param_value",
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 734, col: 5, offset: 24918},
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 5, offset: 24918},
								name: "nl_comment_space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 735, col: 5, offset: 24940},
							name: "inline_breaks",
						},
						&litMatcher{
							pos:        position{line: 735, col: 19, offset: 24954},
							val:        "}}}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "template_param",
			pos:  position{line: 751, col: 1, offset: 25613},
			expr: &choiceExpr{
				pos: position{line: 752, col: 6, offset: 25633},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 752, col: 6, offset: 25633},
						run: (*parser).callontemplate_param2,
						expr: &seqExpr{
							pos: position{line: 752, col: 6, offset: 25633},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 752, col: 6, offset: 25633},
									name: "template_param_name",
								},
								&labeledExpr{
									pos:   position{line: 753, col: 5, offset: 25657},
									label: "val",
									expr: &zeroOrOneExpr{
										pos: position{line: 753, col: 9, offset: 25661},
										expr: &actionExpr{
											pos: position{line: 755, col: 9, offset: 25729},
											run: (*parser).callontemplate_param7,
											expr: &seqExpr{
												pos: position{line: 755, col: 9, offset: 25729},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 755, col: 9, offset: 25729},
														name: "optionalSpaceToken",
													},
													&litMatcher{
														pos:        position{line: 756, col: 9, offset: 25756},
														val:        "=",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 758, col: 9, offset: 25826},
														name: "optionalSpaceToken",
													},
													&labeledExpr{
														pos:   position{line: 759, col: 9, offset: 25853},
														label: "tpv",
														expr: &zeroOrOneExpr{
															pos: position{line: 759, col: 13, offset: 25857},
															expr: &ruleRefExpr{
																pos:  position{line: 759, col: 13, offset: 25857},
																name: "template_param_value",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 778, col: 5, offset: 26561},
						run: (*parser).callontemplate_param15,
						expr: &andExpr{
							pos: position{line: 778, col: 5, offset: 26561},
							expr: &charClassMatcher{
								pos:        position{line: 778, col: 7, offset: 26563},
								val:        "[|}]",
								chars:      []rune{'|', '}'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "template_param_name",
			pos:  position{line: 784, col: 1, offset: 26689},
			expr: &choiceExpr{
				pos: position{line: 785, col: 6, offset: 26714},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 785, col: 6, offset: 26714},
						run: (*parser).callontemplate_param_name2,
						expr: &seqExpr{
							pos: position{line: 785, col: 6, offset: 26714},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 785, col: 6, offset: 26714},
									run: (*parser).callontemplate_param_name4,
								},
								&labeledExpr{
									pos:   position{line: 788, col: 5, offset: 26806},
									label: "tpt",
									expr: &choiceExpr{
										pos: position{line: 788, col: 10, offset: 26811},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 788, col: 10, offset: 26811},
												name: "template_param_text",
											},
											&actionExpr{
												pos: position{line: 788, col: 32, offset: 26833},
												run: (*parser).callontemplate_param_name8,
												expr: &andExpr{
													pos: position{line: 788, col: 32, offset: 26833},
													expr: &litMatcher{
														pos:        position{line: 788, col: 33, offset: 26834},
														val:        "=",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 798, col: 5, offset: 26995},
						run: (*parser).callontemplate_param_name11,
					},
				},
			},
		},
		{
			name: "template_param_value",
			pos:  position{line: 804, col: 1, offset: 27083},
			expr: &choiceExpr{
				pos: position{line: 805, col: 6, offset: 27109},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 805, col: 6, offset: 27109},
						run: (*parser).callontemplate_param_value2,
						expr: &seqExpr{
							pos: position{line: 805, col: 6, offset: 27109},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 805, col: 6, offset: 27109},
									run: (*parser).callontemplate_param_value4,
								},
								&labeledExpr{
									pos:   position{line: 808, col: 5, offset: 27203},
									label: "tpt",
									expr: &ruleRefExpr{
										pos:  position{line: 808, col: 9, offset: 27207},
										name: "template_param_text",
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 817, col: 5, offset: 27387},
						run: (*parser).callontemplate_param_value7,
					},
				},
			},
		},
		{
			name: "template_param_text",
			pos:  position{line: 823, col: 1, offset: 27475},
			expr: &choiceExpr{
				pos: position{line: 824, col: 6, offset: 27500},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 824, col: 6, offset: 27500},
						run: (*parser).callontemplate_param_text2,
						expr: &seqExpr{
							pos: position{line: 824, col: 6, offset: 27500},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 824, col: 6, offset: 27500},
									run: (*parser).callontemplate_param_text4,
								},
								&labeledExpr{
									pos:   position{line: 840, col: 5, offset: 27933},
									label: "il",
									expr: &oneOrMoreExpr{
										pos: position{line: 840, col: 8, offset: 27936},
										expr: &choiceExpr{
											pos: position{line: 840, col: 9, offset: 27937},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 840, col: 9, offset: 27937},
													name: "nested_block",
												},
												&ruleRefExpr{
													pos:  position{line: 840, col: 24, offset: 27952},
													name: "newlineToken",
												},
											},
										},
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 862, col: 5, offset: 28533},
						run: (*parser).callontemplate_param_text10,
					},
				},
			},
		},
		{
			name: "lang_variant_or_tpl",
			pos:  position{line: 885, col: 1, offset: 29137},
			expr: &choiceExpr{
				pos: position{line: 886, col: 6, offset: 29162},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 886, col: 6, offset: 29162},
						run: (*parser).callonlang_variant_or_tpl2,
						expr: &seqExpr{
							pos: position{line: 886, col: 6, offset: 29162},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 886, col: 6, offset: 29162},
									expr: &seqExpr{
										pos: position{line: 886, col: 8, offset: 29164},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 886, col: 8, offset: 29164},
												val:        "-{",
												ignoreCase: false,
											},
											&andExpr{
												pos: position{line: 886, col: 13, offset: 29169},
												expr: &seqExpr{
													pos: position{line: 886, col: 15, offset: 29171},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 886, col: 15, offset: 29171},
															expr: &litMatcher{
																pos:        position{line: 886, col: 15, offset: 29171},
																val:        "{{{",
																ignoreCase: false,
															},
														},
														&notExpr{
															pos: position{line: 886, col: 22, offset: 29178},
															expr: &litMatcher{
																pos:        position{line: 886, col: 23, offset: 29179},
																val:        "{",
																ignoreCase: false,
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 886, col: 28, offset: 29184},
												name: "tplarg",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 886, col: 36, offset: 29192},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 886, col: 38, offset: 29194},
										name: "lang_variant",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 887, col: 5, offset: 29242},
						run: (*parser).callonlang_variant_or_tpl16,
						expr: &seqExpr{
							pos: position{line: 887, col: 5, offset: 29242},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 887, col: 5, offset: 29242},
									label: "a",
									expr: &seqExpr{
										pos: position{line: 887, col: 8, offset: 29245},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 887, col: 8, offset: 29245},
												val:        "-",
												ignoreCase: false,
											},
											&andExpr{
												pos: position{line: 887, col: 12, offset: 29249},
												expr: &seqExpr{
													pos: position{line: 887, col: 14, offset: 29251},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 887, col: 14, offset: 29251},
															expr: &litMatcher{
																pos:        position{line: 887, col: 14, offset: 29251},
																val:        "{{{",
																ignoreCase: false,
															},
														},
														&notExpr{
															pos: position{line: 887, col: 21, offset: 29258},
															expr: &litMatcher{
																pos:        position{line: 887, col: 22, offset: 29259},
																val:        "{",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 887, col: 28, offset: 29265},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 887, col: 30, offset: 29267},
										name: "tplarg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 888, col: 5, offset: 29332},
						run: (*parser).callonlang_variant_or_tpl29,
						expr: &seqExpr{
							pos: position{line: 888, col: 5, offset: 29332},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 888, col: 5, offset: 29332},
									label: "a",
									expr: &seqExpr{
										pos: position{line: 888, col: 8, offset: 29335},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 888, col: 8, offset: 29335},
												val:        "-",
												ignoreCase: false,
											},
											&andExpr{
												pos: position{line: 888, col: 12, offset: 29339},
												expr: &seqExpr{
													pos: position{line: 888, col: 14, offset: 29341},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 888, col: 14, offset: 29341},
															val:        "{{",
															ignoreCase: false,
														},
														&zeroOrMoreExpr{
															pos: position{line: 888, col: 19, offset: 29346},
															expr: &litMatcher{
																pos:        position{line: 888, col: 19, offset: 29346},
																val:        "{{{",
																ignoreCase: false,
															},
														},
														&notExpr{
															pos: position{line: 888, col: 26, offset: 29353},
															expr: &litMatcher{
																pos:        position{line: 888, col: 27, offset: 29354},
																val:        "{",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 888, col: 33, offset: 29360},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 888, col: 35, offset: 29362},
										name: "template",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 889, col: 5, offset: 29429},
						run: (*parser).callonlang_variant_or_tpl43,
						expr: &seqExpr{
							pos: position{line: 889, col: 5, offset: 29429},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 889, col: 5, offset: 29429},
									expr: &litMatcher{
										pos:        position{line: 889, col: 6, offset: 29430},
										val:        "-{",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 889, col: 11, offset: 29435},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 889, col: 13, offset: 29437},
										name: "lang_variant",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "broken_lang_variant",
			pos:  position{line: 891, col: 1, offset: 29482},
			expr: &actionExpr{
				pos: position{line: 892, col: 6, offset: 29507},
				run: (*parser).callonbroken_lang_variant1,
				expr: &seqExpr{
					pos: position{line: 892, col: 6, offset: 29507},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 892, col: 6, offset: 29507},
							run: (*parser).callonbroken_lang_variant3,
						},
						&labeledExpr{
							pos:   position{line: 894, col: 5, offset: 29646},
							label: "r",
							expr: &litMatcher{
								pos:        position{line: 894, col: 7, offset: 29648},
								val:        "-{",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant",
			pos:  position{line: 896, col: 1, offset: 29685},
			expr: &choiceExpr{
				pos: position{line: 897, col: 6, offset: 29703},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 897, col: 6, offset: 29703},
						run: (*parser).callonlang_variant2,
						expr: &seqExpr{
							pos: position{line: 897, col: 6, offset: 29703},
							exprs: []interface{}{
								&actionExpr{
									pos: position{line: 897, col: 7, offset: 29704},
									run: (*parser).callonlang_variant4,
									expr: &litMatcher{
										pos:        position{line: 897, col: 7, offset: 29704},
										val:        "",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 898, col: 5, offset: 29781},
									label: "lv",
									expr: &choiceExpr{
										pos: position{line: 898, col: 9, offset: 29785},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 898, col: 9, offset: 29785},
												name: "lang_variant_preproc",
											},
											&andCodeExpr{
												pos: position{line: 898, col: 32, offset: 29808},
												run: (*parser).callonlang_variant9,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 900, col: 5, offset: 29950},
						name: "broken_lang_variant",
					},
				},
			},
		},
		{
			name: "lang_variant_preproc",
			pos:  position{line: 902, col: 1, offset: 29971},
			expr: &actionExpr{
				pos: position{line: 903, col: 6, offset: 29997},
				run: (*parser).callonlang_variant_preproc1,
				expr: &seqExpr{
					pos: position{line: 903, col: 6, offset: 29997},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 903, col: 7, offset: 29998},
							run: (*parser).callonlang_variant_preproc3,
							expr: &litMatcher{
								pos:        position{line: 903, col: 7, offset: 29998},
								val:        "-{",
								ignoreCase: false,
							},
						},
						&choiceExpr{
							pos: position{line: 905, col: 8, offset: 30062},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 905, col: 8, offset: 30062},
									run: (*parser).callonlang_variant_preproc6,
									expr: &seqExpr{
										pos: position{line: 905, col: 8, offset: 30062},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 905, col: 8, offset: 30062},
												run: (*parser).callonlang_variant_preproc8,
											},
											&labeledExpr{
												pos:   position{line: 906, col: 8, offset: 30131},
												label: "ff",
												expr: &ruleRefExpr{
													pos:  position{line: 906, col: 11, offset: 30134},
													name: "opt_lang_variant_flags",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 919, col: 8, offset: 30538},
									run: (*parser).callonlang_variant_preproc11,
									expr: &seqExpr{
										pos: position{line: 919, col: 8, offset: 30538},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 919, col: 8, offset: 30538},
												run: (*parser).callonlang_variant_preproc13,
											},
											&litMatcher{
												pos:        position{line: 920, col: 8, offset: 30608},
												val:        "",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 928, col: 7, offset: 30773},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 928, col: 7, offset: 30773},
									run: (*parser).callonlang_variant_preproc16,
									expr: &seqExpr{
										pos: position{line: 928, col: 7, offset: 30773},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 928, col: 7, offset: 30773},
												run: (*parser).callonlang_variant_preproc18,
											},
											&labeledExpr{
												pos:   position{line: 928, col: 48, offset: 30814},
												label: "lv",
												expr: &ruleRefExpr{
													pos:  position{line: 928, col: 51, offset: 30817},
													name: "lang_variant_text",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 930, col: 7, offset: 30894},
									run: (*parser).callonlang_variant_preproc21,
									expr: &seqExpr{
										pos: position{line: 930, col: 7, offset: 30894},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 930, col: 7, offset: 30894},
												run: (*parser).callonlang_variant_preproc23,
											},
											&labeledExpr{
												pos:   position{line: 930, col: 49, offset: 30936},
												label: "lv",
												expr: &ruleRefExpr{
													pos:  position{line: 930, col: 52, offset: 30939},
													name: "lang_variant_option_list",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 932, col: 5, offset: 31007},
							name: "inline_breaks",
						},
						&actionExpr{
							pos: position{line: 933, col: 6, offset: 31026},
							run: (*parser).callonlang_variant_preproc27,
							expr: &litMatcher{
								pos:        position{line: 933, col: 6, offset: 31026},
								val:        "}-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "opt_lang_variant_flags",
			pos:  position{line: 973, col: 1, offset: 32298},
			expr: &actionExpr{
				pos: position{line: 974, col: 6, offset: 32326},
				run: (*parser).callonopt_lang_variant_flags1,
				expr: &labeledExpr{
					pos:   position{line: 974, col: 6, offset: 32326},
					label: "f",
					expr: &zeroOrOneExpr{
						pos: position{line: 974, col: 8, offset: 32328},
						expr: &actionExpr{
							pos: position{line: 974, col: 10, offset: 32330},
							run: (*parser).callonopt_lang_variant_flags4,
							expr: &seqExpr{
								pos: position{line: 974, col: 10, offset: 32330},
								exprs: []interface{}{
									&labeledExpr{
										pos:   position{line: 974, col: 10, offset: 32330},
										label: "ff",
										expr: &ruleRefExpr{
											pos:  position{line: 974, col: 13, offset: 32333},
											name: "lang_variant_flags",
										},
									},
									&litMatcher{
										pos:        position{line: 974, col: 32, offset: 32352},
										val:        "|",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant_flags",
			pos:  position{line: 1047, col: 1, offset: 34652},
			expr: &choiceExpr{
				pos: position{line: 1048, col: 6, offset: 34676},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1048, col: 6, offset: 34676},
						run: (*parser).callonlang_variant_flags2,
						expr: &seqExpr{
							pos: position{line: 1048, col: 6, offset: 34676},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 1048, col: 7, offset: 34677},
									expr: &ruleRefExpr{
										pos:  position{line: 1048, col: 7, offset: 34677},
										name: "space_or_newline",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1048, col: 26, offset: 34696},
									name: "lang_variant_flag",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1048, col: 45, offset: 34715},
									expr: &ruleRefExpr{
										pos:  position{line: 1048, col: 45, offset: 34715},
										name: "space_or_newline",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1049, col: 5, offset: 34738},
									expr: &seqExpr{
										pos: position{line: 1049, col: 7, offset: 34740},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1049, col: 7, offset: 34740},
												val:        ";",
												ignoreCase: false,
											},
											&zeroOrOneExpr{
												pos: position{line: 1049, col: 11, offset: 34744},
												expr: &ruleRefExpr{
													pos:  position{line: 1049, col: 11, offset: 34744},
													name: "lang_variant_flags",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1060, col: 5, offset: 35084},
						run: (*parser).callonlang_variant_flags14,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1060, col: 6, offset: 35085},
							expr: &ruleRefExpr{
								pos:  position{line: 1060, col: 6, offset: 35085},
								name: "space_or_newline",
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant_flag",
			pos:  position{line: 1066, col: 1, offset: 35185},
			expr: &choiceExpr{
				pos: position{line: 1067, col: 6, offset: 35208},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1067, col: 6, offset: 35208},
						run: (*parser).callonlang_variant_flag2,
						expr: &charClassMatcher{
							pos:        position{line: 1067, col: 6, offset: 35208},
							val:        "[-+A-Z]",
							chars:      []rune{'-', '+'},
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&actionExpr{
						pos: position{line: 1068, col: 5, offset: 35273},
						run: (*parser).callonlang_variant_flag4,
						expr: &ruleRefExpr{
							pos:  position{line: 1068, col: 5, offset: 35273},
							name: "lang_variant_name",
						},
					},
					&actionExpr{
						pos: position{line: 1069, col: 5, offset: 35341},
						run: (*parser).callonlang_variant_flag6,
						expr: &oneOrMoreExpr{
							pos: position{line: 1069, col: 5, offset: 35341},
							expr: &seqExpr{
								pos: position{line: 1069, col: 6, offset: 35342},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1069, col: 6, offset: 35342},
										expr: &ruleRefExpr{
											pos:  position{line: 1069, col: 7, offset: 35343},
											name: "space_or_newline",
										},
									},
									&notExpr{
										pos: position{line: 1069, col: 24, offset: 35360},
										expr: &ruleRefExpr{
											pos:  position{line: 1069, col: 25, offset: 35361},
											name: "nowiki",
										},
									},
									&charClassMatcher{
										pos:        position{line: 1069, col: 32, offset: 35368},
										val:        "[^{}|;]",
										chars:      []rune{'{', '}', '|', ';'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant_name",
			pos:  position{line: 1072, col: 1, offset: 35449},
			expr: &choiceExpr{
				pos: position{line: 1073, col: 6, offset: 35519},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1073, col: 6, offset: 35519},
						run: (*parser).callonlang_variant_name2,
						expr: &seqExpr{
							pos: position{line: 1073, col: 6, offset: 35519},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 1073, col: 6, offset: 35519},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1073, col: 12, offset: 35525},
									expr: &charClassMatcher{
										pos:        position{line: 1073, col: 12, offset: 35525},
										val:        "[-a-z]",
										chars:      []rune{'-'},
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1077, col: 5, offset: 35735},
						name: "nowiki_text",
					},
				},
			},
		},
		{
			name: "lang_variant_option_list",
			pos:  position{line: 1079, col: 1, offset: 35748},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 6, offset: 35778},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1080, col: 6, offset: 35778},
						run: (*parser).callonlang_variant_option_list2,
						expr: &seqExpr{
							pos: position{line: 1080, col: 6, offset: 35778},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1080, col: 6, offset: 35778},
									name: "lang_variant_option",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1080, col: 26, offset: 35798},
									expr: &actionExpr{
										pos: position{line: 1080, col: 28, offset: 35800},
										run: (*parser).callonlang_variant_option_list6,
										expr: &seqExpr{
											pos: position{line: 1080, col: 28, offset: 35800},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1080, col: 28, offset: 35800},
													val:        ";",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1080, col: 32, offset: 35804},
													name: "lang_variant_option",
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1081, col: 5, offset: 35864},
									expr: &seqExpr{
										pos: position{line: 1081, col: 7, offset: 35866},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1081, col: 7, offset: 35866},
												val:        ";",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1081, col: 11, offset: 35870},
												expr: &ruleRefExpr{
													pos:  position{line: 1081, col: 11, offset: 35870},
													name: "space_or_newline",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1089, col: 5, offset: 36081},
						run: (*parser).callonlang_variant_option_list15,
						expr: &ruleRefExpr{
							pos:  position{line: 1089, col: 5, offset: 36081},
							name: "lang_variant_text",
						},
					},
				},
			},
		},
		{
			name: "lang_variant_option",
			pos:  position{line: 1091, col: 1, offset: 36150},
			expr: &choiceExpr{
				pos: position{line: 1092, col: 6, offset: 36175},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1092, col: 6, offset: 36175},
						run: (*parser).callonlang_variant_option2,
						expr: &seqExpr{
							pos: position{line: 1092, col: 6, offset: 36175},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 1092, col: 7, offset: 36176},
									expr: &ruleRefExpr{
										pos:  position{line: 1092, col: 7, offset: 36176},
										name: "space_or_newline",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1092, col: 26, offset: 36195},
									name: "lang_variant_name",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1093, col: 6, offset: 36218},
									expr: &ruleRefExpr{
										pos:  position{line: 1093, col: 6, offset: 36218},
										name: "space_or_newline",
									},
								},
								&litMatcher{
									pos:        position{line: 1093, col: 25, offset: 36237},
									val:        ":",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1094, col: 6, offset: 36246},
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 6, offset: 36246},
										name: "space_or_newline",
									},
								},
								&choiceExpr{
									pos: position{line: 1095, col: 6, offset: 36270},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1095, col: 6, offset: 36270},
											name: "lang_variant_nowiki",
										},
										&ruleRefExpr{
											pos:  position{line: 1095, col: 28, offset: 36292},
											name: "lang_variant_text_no_semi",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1106, col: 5, offset: 36509},
						run: (*parser).callonlang_variant_option15,
						expr: &seqExpr{
							pos: position{line: 1106, col: 5, offset: 36509},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 1106, col: 6, offset: 36510},
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 6, offset: 36510},
										name: "space_or_newline",
									},
								},
								&choiceExpr{
									pos: position{line: 1107, col: 6, offset: 36534},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1107, col: 6, offset: 36534},
											name: "lang_variant_nowiki",
										},
										&ruleRefExpr{
											pos:  position{line: 1107, col: 28, offset: 36556},
											name: "lang_variant_text_no_semi_or_arrow",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1108, col: 5, offset: 36596},
									val:        "=>",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1109, col: 6, offset: 36606},
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 6, offset: 36606},
										name: "space_or_newline",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1109, col: 25, offset: 36625},
									name: "lang_variant_name",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1110, col: 6, offset: 36648},
									expr: &ruleRefExpr{
										pos:  position{line: 1110, col: 6, offset: 36648},
										name: "space_or_newline",
									},
								},
								&litMatcher{
									pos:        position{line: 1110, col: 25, offset: 36667},
									val:        ":",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1111, col: 6, offset: 36676},
									expr: &ruleRefExpr{
										pos:  position{line: 1111, col: 6, offset: 36676},
										name: "space_or_newline",
									},
								},
								&choiceExpr{
									pos: position{line: 1112, col: 6, offset: 36700},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1112, col: 6, offset: 36700},
											name: "lang_variant_nowiki",
										},
										&ruleRefExpr{
											pos:  position{line: 1112, col: 28, offset: 36722},
											name: "lang_variant_text_no_semi",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant_nowiki",
			pos:  position{line: 1128, col: 1, offset: 37152},
			expr: &actionExpr{
				pos: position{line: 1129, col: 6, offset: 37177},
				run: (*parser).callonlang_variant_nowiki1,
				expr: &seqExpr{
					pos: position{line: 1129, col: 6, offset: 37177},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 1129, col: 7, offset: 37178},
							run: (*parser).callonlang_variant_nowiki3,
							expr: &litMatcher{
								pos:        position{line: 1129, col: 7, offset: 37178},
								val:        "",
								ignoreCase: false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1130, col: 5, offset: 37229},
							name: "nowiki_text",
						},
						&actionExpr{
							pos: position{line: 1131, col: 6, offset: 37246},
							run: (*parser).callonlang_variant_nowiki6,
							expr: &litMatcher{
								pos:        position{line: 1131, col: 6, offset: 37246},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1132, col: 5, offset: 37296},
							expr: &ruleRefExpr{
								pos:  position{line: 1132, col: 5, offset: 37296},
								name: "space_or_newline",
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant_text",
			pos:  position{line: 1138, col: 1, offset: 37400},
			expr: &actionExpr{
				pos: position{line: 1139, col: 6, offset: 37423},
				run: (*parser).callonlang_variant_text1,
				expr: &seqExpr{
					pos: position{line: 1139, col: 6, offset: 37423},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 1139, col: 7, offset: 37424},
							run: (*parser).callonlang_variant_text3,
							expr: &litMatcher{
								pos:        position{line: 1139, col: 7, offset: 37424},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1140, col: 5, offset: 37475},
							expr: &choiceExpr{
								pos: position{line: 1140, col: 6, offset: 37476},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1140, col: 6, offset: 37476},
										name: "inlineline",
									},
									&litMatcher{
										pos:        position{line: 1140, col: 19, offset: 37489},
										val:        "|",
										ignoreCase: false,
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 1141, col: 6, offset: 37501},
							run: (*parser).callonlang_variant_text9,
							expr: &litMatcher{
								pos:        position{line: 1141, col: 6, offset: 37501},
								val:        "",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant_text_no_semi",
			pos:  position{line: 1144, col: 1, offset: 37633},
			expr: &choiceExpr{
				pos: position{line: 1145, col: 6, offset: 37664},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1145, col: 6, offset: 37664},
						run: (*parser).callonlang_variant_text_no_semi2,
						expr: &seqExpr{
							pos: position{line: 1145, col: 6, offset: 37664},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1145, col: 6, offset: 37664},
									run: (*parser).callonlang_variant_text_no_semi4,
								},
								&ruleRefExpr{
									pos:  position{line: 1146, col: 5, offset: 37733},
									name: "lang_variant_text",
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1148, col: 5, offset: 37821},
						run: (*parser).callonlang_variant_text_no_semi6,
					},
				},
			},
		},
		{
			name: "lang_variant_text_no_semi_or_arrow",
			pos:  position{line: 1150, col: 1, offset: 37880},
			expr: &choiceExpr{
				pos: position{line: 1151, col: 6, offset: 37920},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1151, col: 6, offset: 37920},
						run: (*parser).callonlang_variant_text_no_semi_or_arrow2,
						expr: &seqExpr{
							pos: position{line: 1151, col: 6, offset: 37920},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1151, col: 6, offset: 37920},
									run: (*parser).callonlang_variant_text_no_semi_or_arrow4,
								},
								&ruleRefExpr{
									pos:  position{line: 1152, col: 5, offset: 37985},
									name: "lang_variant_text_no_semi",
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1153, col: 5, offset: 38073},
						run: (*parser).callonlang_variant_text_no_semi_or_arrow6,
					},
				},
			},
		},
		{
			name: "wikilink_content",
			pos:  position{line: 1155, col: 1, offset: 38128},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1156, col: 7, offset: 38151},
				expr: &actionExpr{
					pos: position{line: 1156, col: 8, offset: 38152},
					run: (*parser).callonwikilink_content2,
					expr: &seqExpr{
						pos: position{line: 1156, col: 8, offset: 38152},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1156, col: 8, offset: 38152},
								name: "pipe",
							},
							&labeledExpr{
								pos:   position{line: 1156, col: 13, offset: 38157},
								label: "lt",
								expr: &zeroOrOneExpr{
									pos: position{line: 1156, col: 16, offset: 38160},
									expr: &ruleRefExpr{
										pos:  position{line: 1156, col: 16, offset: 38160},
										name: "link_text",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "wikilink",
			pos:  position{line: 1165, col: 1, offset: 38397},
			expr: &choiceExpr{
				pos: position{line: 1166, col: 3, offset: 38411},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1167, col: 5, offset: 38417},
						exprs: []interface{}{
							&stateCodeExpr{
								pos: position{line: 1167, col: 5, offset: 38417},
								run: (*parser).callonwikilink3,
							},
							&ruleRefExpr{
								pos:  position{line: 1168, col: 5, offset: 38463},
								name: "wikilink_preproc",
							},
							&stateCodeExpr{
								pos: position{line: 1169, col: 5, offset: 38484},
								run: (*parser).callonwikilink5,
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1170, col: 7, offset: 38525},
						name: "broken_wikilink",
					},
				},
			},
		},
		{
			name: "broken_wikilink",
			pos:  position{line: 1176, col: 1, offset: 38810},
			expr: &actionExpr{
				pos: position{line: 1177, col: 6, offset: 38831},
				run: (*parser).callonbroken_wikilink1,
				expr: &seqExpr{
					pos: position{line: 1177, col: 6, offset: 38831},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1177, col: 6, offset: 38831},
							expr: &litMatcher{
								pos:        position{line: 1177, col: 7, offset: 38832},
								val:        "[[",
								ignoreCase: false,
							},
						},
						&stateCodeExpr{
							pos: position{line: 1177, col: 12, offset: 38837},
							run: (*parser).callonbroken_wikilink5,
						},
						&labeledExpr{
							pos:   position{line: 1182, col: 5, offset: 38954},
							label: "a",
							expr: &seqExpr{
								pos: position{line: 1182, col: 8, offset: 38957},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1182, col: 8, offset: 38957},
										val:        "[",
										ignoreCase: false,
									},
									&choiceExpr{
										pos: position{line: 1182, col: 13, offset: 38962},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1182, col: 13, offset: 38962},
												name: "extlink",
											},
											&litMatcher{
												pos:        position{line: 1182, col: 23, offset: 38972},
												val:        "[",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 1183, col: 5, offset: 38982},
							run: (*parser).callonbroken_wikilink12,
						},
					},
				},
			},
		},
		{
			name: "wikilink_preproc",
			pos:  position{line: 1189, col: 1, offset: 39072},
			expr: &actionExpr{
				pos: position{line: 1190, col: 6, offset: 39094},
				run: (*parser).callonwikilink_preproc1,
				expr: &seqExpr{
					pos: position{line: 1190, col: 6, offset: 39094},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1190, col: 6, offset: 39094},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1191, col: 5, offset: 39103},
							label: "target",
							expr: &zeroOrOneExpr{
								pos: position{line: 1191, col: 12, offset: 39110},
								expr: &ruleRefExpr{
									pos:  position{line: 1191, col: 12, offset: 39110},
									name: "wikilink_preprocessor_text",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1192, col: 5, offset: 39142},
							run: (*parser).callonwikilink_preproc7,
						},
						&labeledExpr{
							pos:   position{line: 1194, col: 5, offset: 39266},
							label: "lcs",
							expr: &ruleRefExpr{
								pos:  position{line: 1194, col: 9, offset: 39270},
								name: "wikilink_content",
							},
						},
						&andCodeExpr{
							pos: position{line: 1195, col: 5, offset: 39291},
							run: (*parser).callonwikilink_preproc10,
						},
						&ruleRefExpr{
							pos:  position{line: 1196, col: 5, offset: 39388},
							name: "inline_breaks",
						},
						&litMatcher{
							pos:        position{line: 1196, col: 19, offset: 39402},
							val:        "]]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "link_text",
			pos:  position{line: 1243, col: 1, offset: 40652},
			expr: &choiceExpr{
				pos: position{line: 1244, col: 6, offset: 40667},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1244, col: 6, offset: 40667},
						run: (*parser).callonlink_text2,
						expr: &seqExpr{
							pos: position{line: 1244, col: 6, offset: 40667},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1244, col: 6, offset: 40667},
									run: (*parser).callonlink_text4,
								},
								&labeledExpr{
									pos:   position{line: 1250, col: 5, offset: 40843},
									label: "c1",
									expr: &oneOrMoreExpr{
										pos: position{line: 1250, col: 8, offset: 40846},
										expr: &choiceExpr{
											pos: position{line: 1253, col: 10, offset: 41040},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 1253, col: 11, offset: 41041},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1253, col: 11, offset: 41041},
															name: "sol",
														},
														&choiceExpr{
															pos: position{line: 1253, col: 16, offset: 41046},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1253, col: 16, offset: 41046},
																	name: "heading",
																},
																&ruleRefExpr{
																	pos:  position{line: 1253, col: 26, offset: 41056},
																	name: "hr",
																},
																&ruleRefExpr{
																	pos:  position{line: 1253, col: 31, offset: 41061},
																	name: "full_table_in_link_caption",
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1254, col: 10, offset: 41099},
													name: "urltext",
												},
												&actionExpr{
													pos: position{line: 1255, col: 11, offset: 41117},
													run: (*parser).callonlink_text15,
													expr: &seqExpr{
														pos: position{line: 1255, col: 11, offset: 41117},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1255, col: 11, offset: 41117},
																expr: &ruleRefExpr{
																	pos:  position{line: 1255, col: 12, offset: 41118},
																	name: "inline_breaks",
																},
															},
															&labeledExpr{
																pos:   position{line: 1256, col: 11, offset: 41142},
																label: "r",
																expr: &choiceExpr{
																	pos: position{line: 1256, col: 15, offset: 41146},
																	alternatives: []interface{}{
																		&ruleRefExpr{
																			pos:  position{line: 1256, col: 15, offset: 41146},
																			name: "inline_element",
																		},
																		&seqExpr{
																			pos: position{line: 1256, col: 32, offset: 41163},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1256, col: 32, offset: 41163},
																					val:        "[",
																					ignoreCase: false,
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1256, col: 36, offset: 41167},
																					expr: &ruleRefExpr{
																						pos:  position{line: 1256, col: 36, offset: 41167},
																						name: "text_char",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1256, col: 47, offset: 41178},
																					val:        "]",
																					ignoreCase: false,
																				},
																				&andExpr{
																					pos: position{line: 1256, col: 52, offset: 41183},
																					expr: &choiceExpr{
																						pos: position{line: 1256, col: 54, offset: 41185},
																						alternatives: []interface{}{
																							&notExpr{
																								pos: position{line: 1256, col: 54, offset: 41185},
																								expr: &litMatcher{
																									pos:        position{line: 1256, col: 55, offset: 41186},
																									val:        "]",
																									ignoreCase: false,
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 1256, col: 61, offset: 41192},
																								val:        "]]",
																								ignoreCase: false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 1256, col: 70, offset: 41201,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1263, col: 7, offset: 41321},
						run: (*parser).callonlink_text33,
					},
				},
			},
		},
		{
			name: "quote",
			pos:  position{line: 1276, col: 1, offset: 41787},
			expr: &actionExpr{
				pos: position{line: 1276, col: 10, offset: 41796},
				run: (*parser).callonquote1,
				expr: &seqExpr{
					pos: position{line: 1276, col: 11, offset: 41797},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1276, col: 11, offset: 41797},
							val:        "''",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1276, col: 16, offset: 41802},
							expr: &litMatcher{
								pos:        position{line: 1276, col: 16, offset: 41802},
								val:        "'",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "extension_tag",
			pos:  position{line: 1305, col: 1, offset: 42630},
			expr: &actionExpr{
				pos: position{line: 1306, col: 3, offset: 42649},
				run: (*parser).callonextension_tag1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 3, offset: 42649},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1306, col: 3, offset: 42649},
							run: (*parser).callonextension_tag3,
						},
						&ruleRefExpr{
							pos:  position{line: 1307, col: 3, offset: 42711},
							name: "xmlish_tag",
						},
						&andCodeExpr{
							pos: position{line: 1309, col: 3, offset: 42796},
							run: (*parser).callonextension_tag5,
						},
					},
				},
			},
		},
		{
			name: "nowiki",
			pos:  position{line: 1312, col: 1, offset: 42904},
			expr: &actionExpr{
				pos: position{line: 1313, col: 6, offset: 42916},
				run: (*parser).callonnowiki1,
				expr: &seqExpr{
					pos: position{line: 1313, col: 6, offset: 42916},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1313, col: 6, offset: 42916},
							name: "extension_tag",
						},
						&andCodeExpr{
							pos: position{line: 1314, col: 5, offset: 42934},
							run: (*parser).callonnowiki4,
						},
					},
				},
			},
		},
		{
			name: "nowiki_content",
			pos:  position{line: 1318, col: 1, offset: 43112},
			expr: &actionExpr{
				pos: position{line: 1319, col: 6, offset: 43132},
				run: (*parser).callonnowiki_content1,
				expr: &labeledExpr{
					pos:   position{line: 1319, col: 6, offset: 43132},
					label: "c2",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1319, col: 9, offset: 43135},
						expr: &choiceExpr{
							pos: position{line: 1319, col: 10, offset: 43136},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1319, col: 10, offset: 43136},
									name: "htmlentity",
								},
								&anyMatcher{
									line: 1319, col: 23, offset: 43149,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "nowiki_text",
			pos:  position{line: 1323, col: 1, offset: 43301},
			expr: &actionExpr{
				pos: position{line: 1324, col: 6, offset: 43318},
				run: (*parser).callonnowiki_text1,
				expr: &ruleRefExpr{
					pos:  position{line: 1324, col: 6, offset: 43318},
					name: "nowiki",
				},
			},
		},
		{
			name: "tag_name_chars",
			pos:  position{line: 1341, col: 1, offset: 43862},
			expr: &charClassMatcher{
				pos:        position{line: 1341, col: 19, offset: 43880},
				val:        "[^\\t\\n\\v />\\x00]",
				chars:      []rune{'\t', '\n', '\v', ' ', '/', '>', '\x00'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "tag_name",
			pos:  position{line: 1342, col: 1, offset: 43897},
			expr: &seqExpr{
				pos: position{line: 1342, col: 14, offset: 43910},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1342, col: 14, offset: 43910},
						val:        "[A-Za-z]",
						ranges:     []rune{'A', 'Z', 'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1342, col: 23, offset: 43919},
						expr: &ruleRefExpr{
							pos:  position{line: 1342, col: 23, offset: 43919},
							name: "tag_name_chars",
						},
					},
				},
			},
		},
		{
			name: "xmlish_tag",
			pos:  position{line: 1344, col: 1, offset: 43937},
			expr: &choiceExpr{
				pos: position{line: 1345, col: 6, offset: 43953},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1345, col: 6, offset: 43953},
						run: (*parser).callonxmlish_tag2,
						expr: &seqExpr{
							pos: position{line: 1345, col: 6, offset: 43953},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1345, col: 6, offset: 43953},
									run: (*parser).callonxmlish_tag4,
								},
								&litMatcher{
									pos:        position{line: 1352, col: 5, offset: 44220},
									val:        "<",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 1352, col: 9, offset: 44224},
									expr: &litMatcher{
										pos:        position{line: 1352, col: 9, offset: 44224},
										val:        "/",
										ignoreCase: false,
									},
								},
								&seqExpr{
									pos: position{line: 1353, col: 6, offset: 44234},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1353, col: 6, offset: 44234},
											name: "tag_name",
										},
										&andCodeExpr{
											pos: position{line: 1353, col: 15, offset: 44243},
											run: (*parser).callonxmlish_tag10,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1359, col: 5, offset: 44375},
									name: "generic_newline_attributes",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1360, col: 5, offset: 44406},
									expr: &ruleRefExpr{
										pos:  position{line: 1360, col: 5, offset: 44406},
										name: "space_or_newline",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1361, col: 5, offset: 44493},
									expr: &litMatcher{
										pos:        position{line: 1361, col: 5, offset: 44493},
										val:        "/",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1362, col: 5, offset: 44502},
									expr: &ruleRefExpr{
										pos:  position{line: 1362, col: 5, offset: 44502},
										name: "space",
									},
								},
								&litMatcher{
									pos:        position{line: 1363, col: 5, offset: 44567},
									val:        ">",
									ignoreCase: false,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1392, col: 7, offset: 45452},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1392, col: 7, offset: 45452},
								val:        "<",
								ignoreCase: false,
							},
							&zeroOrOneExpr{
								pos: position{line: 1392, col: 11, offset: 45456},
								expr: &litMatcher{
									pos:        position{line: 1392, col: 11, offset: 45456},
									val:        "/",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1392, col: 16, offset: 45461},
								name: "tag_name",
							},
							&andCodeExpr{
								pos: position{line: 1392, col: 25, offset: 45470},
								run: (*parser).callonxmlish_tag24,
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1393, col: 7, offset: 45532},
						run: (*parser).callonxmlish_tag25,
					},
				},
			},
		},
		{
			name: "block_tag",
			pos:  position{line: 1401, col: 1, offset: 45803},
			expr: &choiceExpr{
				pos: position{line: 1402, col: 6, offset: 45818},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1402, col: 6, offset: 45818},
						run: (*parser).callonblock_tag2,
						expr: &seqExpr{
							pos: position{line: 1402, col: 6, offset: 45818},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1402, col: 6, offset: 45818},
									run: (*parser).callonblock_tag4,
								},
								&litMatcher{
									pos:        position{line: 1409, col: 5, offset: 46067},
									val:        "<",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 1409, col: 9, offset: 46071},
									expr: &litMatcher{
										pos:        position{line: 1409, col: 9, offset: 46071},
										val:        "/",
										ignoreCase: false,
									},
								},
								&seqExpr{
									pos: position{line: 1410, col: 6, offset: 46081},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1410, col: 6, offset: 46081},
											name: "tag_name",
										},
										&andCodeExpr{
											pos: position{line: 1410, col: 15, offset: 46090},
											run: (*parser).callonblock_tag10,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1419, col: 5, offset: 46268},
									name: "generic_newline_attributes",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1420, col: 5, offset: 46299},
									expr: &ruleRefExpr{
										pos:  position{line: 1420, col: 5, offset: 46299},
										name: "space_or_newline",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1421, col: 5, offset: 46321},
									expr: &litMatcher{
										pos:        position{line: 1421, col: 5, offset: 46321},
										val:        "/",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1422, col: 5, offset: 46330},
									val:        ">",
									ignoreCase: false,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1435, col: 7, offset: 46680},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1435, col: 7, offset: 46680},
								val:        "<",
								ignoreCase: false,
							},
							&zeroOrOneExpr{
								pos: position{line: 1435, col: 11, offset: 46684},
								expr: &litMatcher{
									pos:        position{line: 1435, col: 11, offset: 46684},
									val:        "/",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1435, col: 16, offset: 46689},
								name: "tag_name",
							},
							&andCodeExpr{
								pos: position{line: 1435, col: 25, offset: 46698},
								run: (*parser).callonblock_tag22,
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1439, col: 7, offset: 46761},
						run: (*parser).callonblock_tag23,
					},
				},
			},
		},
		{
			name: "generic_newline_attribute",
			pos:  position{line: 1446, col: 1, offset: 46900},
			expr: &actionExpr{
				pos: position{line: 1447, col: 6, offset: 46931},
				run: (*parser).callongeneric_newline_attribute1,
				expr: &seqExpr{
					pos: position{line: 1447, col: 6, offset: 46931},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1447, col: 6, offset: 46931},
							expr: &ruleRefExpr{
								pos:  position{line: 1447, col: 6, offset: 46931},
								name: "space_or_newline",
							},
						},
						&actionExpr{
							pos: position{line: 1448, col: 6, offset: 46954},
							run: (*parser).callongeneric_newline_attribute5,
							expr: &litMatcher{
								pos:        position{line: 1448, col: 6, offset: 46954},
								val:        "",
								ignoreCase: false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1449, col: 5, offset: 47005},
							name: "generic_attribute_name",
						},
						&actionExpr{
							pos: position{line: 1450, col: 6, offset: 47033},
							run: (*parser).callongeneric_newline_attribute8,
							expr: &litMatcher{
								pos:        position{line: 1450, col: 6, offset: 47033},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1451, col: 5, offset: 47084},
							expr: &actionExpr{
								pos: position{line: 1451, col: 6, offset: 47085},
								run: (*parser).callongeneric_newline_attribute11,
								expr: &seqExpr{
									pos: position{line: 1451, col: 6, offset: 47085},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1451, col: 6, offset: 47085},
											expr: &ruleRefExpr{
												pos:  position{line: 1451, col: 6, offset: 47085},
												name: "space_or_newline",
											},
										},
										&litMatcher{
											pos:        position{line: 1451, col: 24, offset: 47103},
											val:        "=",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 1451, col: 28, offset: 47107},
											expr: &ruleRefExpr{
												pos:  position{line: 1451, col: 28, offset: 47107},
												name: "generic_att_value",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_attribute",
			pos:  position{line: 1474, col: 1, offset: 47789},
			expr: &actionExpr{
				pos: position{line: 1475, col: 6, offset: 47810},
				run: (*parser).callontable_attribute1,
				expr: &seqExpr{
					pos: position{line: 1475, col: 6, offset: 47810},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1475, col: 6, offset: 47810},
							name: "optionalSpaceToken",
						},
						&actionExpr{
							pos: position{line: 1476, col: 6, offset: 47834},
							run: (*parser).callontable_attribute4,
							expr: &litMatcher{
								pos:        position{line: 1476, col: 6, offset: 47834},
								val:        "",
								ignoreCase: false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1477, col: 5, offset: 47886},
							name: "table_attribute_name",
						},
						&actionExpr{
							pos: position{line: 1478, col: 6, offset: 47912},
							run: (*parser).callontable_attribute7,
							expr: &litMatcher{
								pos:        position{line: 1478, col: 6, offset: 47912},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1479, col: 5, offset: 47964},
							expr: &actionExpr{
								pos: position{line: 1479, col: 6, offset: 47965},
								run: (*parser).callontable_attribute10,
								expr: &seqExpr{
									pos: position{line: 1479, col: 6, offset: 47965},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1479, col: 6, offset: 47965},
											name: "optionalSpaceToken",
										},
										&litMatcher{
											pos:        position{line: 1479, col: 25, offset: 47984},
											val:        "=",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 1479, col: 29, offset: 47988},
											expr: &ruleRefExpr{
												pos:  position{line: 1479, col: 29, offset: 47988},
												name: "table_att_value",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "generic_attribute_name",
			pos:  position{line: 1504, col: 1, offset: 48838},
			expr: &actionExpr{
				pos: position{line: 1505, col: 6, offset: 48866},
				run: (*parser).callongeneric_attribute_name1,
				expr: &seqExpr{
					pos: position{line: 1505, col: 6, offset: 48866},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1505, col: 7, offset: 48867},
							expr: &charClassMatcher{
								pos:        position{line: 1505, col: 7, offset: 48867},
								val:        "[\"'=]",
								chars:      []rune{'"', '\'', '='},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1506, col: 5, offset: 48945},
							expr: &choiceExpr{
								pos: position{line: 1506, col: 7, offset: 48947},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1506, col: 7, offset: 48947},
										expr: &charClassMatcher{
											pos:        position{line: 1506, col: 7, offset: 48947},
											val:        "[^ \\t\\r\\n\\x00/=><&{}!|-]",
											chars:      []rune{' ', '\t', '\r', '\n', '\x00', '/', '=', '>', '<', '&', '{', '}', '!', '|', '-'},
											ignoreCase: false,
											inverted:   true,
										},
									},
									&actionExpr{
										pos: position{line: 1507, col: 11, offset: 48983},
										run: (*parser).callongeneric_attribute_name9,
										expr: &seqExpr{
											pos: position{line: 1507, col: 11, offset: 48983},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1507, col: 11, offset: 48983},
													expr: &ruleRefExpr{
														pos:  position{line: 1507, col: 12, offset: 48984},
														name: "inline_breaks",
													},
												},
												&choiceExpr{
													pos: position{line: 1509, col: 13, offset: 49067},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1509, col: 13, offset: 49067},
															name: "directive",
														},
														&actionExpr{
															pos: position{line: 1509, col: 25, offset: 49079},
															run: (*parser).callongeneric_attribute_name15,
															expr: &notExpr{
																pos: position{line: 1509, col: 25, offset: 49079},
																expr: &choiceExpr{
																	pos: position{line: 1509, col: 28, offset: 49082},
																	alternatives: []interface{}{
																		&ruleRefExpr{
																			pos:  position{line: 1509, col: 28, offset: 49082},
																			name: "space_or_newline",
																		},
																		&charClassMatcher{
																			pos:        position{line: 1509, col: 47, offset: 49101},
																			val:        "[\\x00/=>]",
																			chars:      []rune{'\x00', '/', '=', '>'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1512, col: 5, offset: 49202},
							run: (*parser).callongeneric_attribute_name20,
						},
					},
				},
			},
		},
		{
			name: "broken_table_attribute_name_char",
			pos:  position{line: 1517, col: 1, offset: 49473},
			expr: &actionExpr{
				pos: position{line: 1517, col: 37, offset: 49509},
				run: (*parser).callonbroken_table_attribute_name_char1,
				expr: &charClassMatcher{
					pos:        position{line: 1517, col: 37, offset: 49509},
					val:        "[\\x00/=>]",
					chars:      []rune{'\x00', '/', '=', '>'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "table_attribute_name",
			pos:  position{line: 1522, col: 1, offset: 49761},
			expr: &actionExpr{
				pos: position{line: 1523, col: 6, offset: 49787},
				run: (*parser).callontable_attribute_name1,
				expr: &seqExpr{
					pos: position{line: 1523, col: 6, offset: 49787},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1523, col: 7, offset: 49788},
							expr: &charClassMatcher{
								pos:        position{line: 1523, col: 7, offset: 49788},
								val:        "[\"'=]",
								chars:      []rune{'"', '\'', '='},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1524, col: 5, offset: 49866},
							expr: &choiceExpr{
								pos: position{line: 1524, col: 7, offset: 49868},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1524, col: 7, offset: 49868},
										expr: &charClassMatcher{
											pos:        position{line: 1524, col: 7, offset: 49868},
											val:        "[^ \\t\\r\\n\\x00/=><&{}!|[-]",
											chars:      []rune{' ', '\t', '\r', '\n', '\x00', '/', '=', '>', '<', '&', '{', '}', '!', '|', '[', '-'},
											ignoreCase: false,
											inverted:   true,
										},
									},
									&actionExpr{
										pos: position{line: 1525, col: 11, offset: 49905},
										run: (*parser).callontable_attribute_name9,
										expr: &seqExpr{
											pos: position{line: 1525, col: 11, offset: 49905},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1525, col: 11, offset: 49905},
													expr: &ruleRefExpr{
														pos:  position{line: 1525, col: 12, offset: 49906},
														name: "inline_breaks",
													},
												},
												&choiceExpr{
													pos: position{line: 1527, col: 15, offset: 49991},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1527, col: 15, offset: 49991},
															name: "wikilink",
														},
														&ruleRefExpr{
															pos:  position{line: 1528, col: 17, offset: 50016},
															name: "directive",
														},
														&actionExpr{
															pos: position{line: 1532, col: 17, offset: 50220},
															run: (*parser).callontable_attribute_name16,
															expr: &seqExpr{
																pos: position{line: 1532, col: 17, offset: 50220},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1532, col: 17, offset: 50220},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1532, col: 18, offset: 50221},
																			name: "xmlish_tag",
																		},
																	},
																	&ruleRefExpr{
																		pos:  position{line: 1532, col: 29, offset: 50232},
																		name: "inlineline",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1533, col: 17, offset: 50294},
															run: (*parser).callontable_attribute_name21,
															expr: &seqExpr{
																pos: position{line: 1533, col: 17, offset: 50294},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1533, col: 17, offset: 50294},
																		expr: &choiceExpr{
																			pos: position{line: 1533, col: 20, offset: 50297},
																			alternatives: []interface{}{
																				&ruleRefExpr{
																					pos:  position{line: 1533, col: 20, offset: 50297},
																					name: "space_or_newline",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1533, col: 39, offset: 50316},
																					val:        "[\\x00/=>]",
																					chars:      []rune{'\x00', '/', '=', '>'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1533, col: 51, offset: 50328,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1536, col: 5, offset: 50417},
							run: (*parser).callontable_attribute_name28,
						},
					},
				},
			},
		},
		{
			name: "generic_att_value",
			pos:  position{line: 1542, col: 1, offset: 50737},
			expr: &choiceExpr{
				pos: position{line: 1543, col: 6, offset: 50760},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1543, col: 6, offset: 50760},
						run: (*parser).callongeneric_att_value2,
						expr: &seqExpr{
							pos: position{line: 1543, col: 6, offset: 50760},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1543, col: 7, offset: 50761},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1543, col: 7, offset: 50761},
											expr: &ruleRefExpr{
												pos:  position{line: 1543, col: 7, offset: 50761},
												name: "space_or_newline",
											},
										},
										&litMatcher{
											pos:        position{line: 1543, col: 25, offset: 50779},
											val:        "'",
											ignoreCase: false,
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1543, col: 30, offset: 50784},
									expr: &ruleRefExpr{
										pos:  position{line: 1543, col: 30, offset: 50784},
										name: "attribute_preprocessor_text_single",
									},
								},
								&choiceExpr{
									pos: position{line: 1543, col: 67, offset: 50821},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 1543, col: 67, offset: 50821},
											val:        "'",
											ignoreCase: false,
										},
										&andExpr{
											pos: position{line: 1543, col: 73, offset: 50827},
											expr: &seqExpr{
												pos: position{line: 1543, col: 75, offset: 50829},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 1543, col: 75, offset: 50829},
														expr: &litMatcher{
															pos:        position{line: 1543, col: 75, offset: 50829},
															val:        "/",
															ignoreCase: false,
														},
													},
													&litMatcher{
														pos:        position{line: 1543, col: 80, offset: 50834},
														val:        ">",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1548, col: 5, offset: 50962},
						run: (*parser).callongeneric_att_value17,
						expr: &seqExpr{
							pos: position{line: 1548, col: 5, offset: 50962},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1548, col: 6, offset: 50963},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1548, col: 6, offset: 50963},
											expr: &ruleRefExpr{
												pos:  position{line: 1548, col: 6, offset: 50963},
												name: "space_or_newline",
											},
										},
										&litMatcher{
											pos:        position{line: 1548, col: 24, offset: 50981},
											val:        "\"",
											ignoreCase: false,
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1548, col: 29, offset: 50986},
									expr: &ruleRefExpr{
										pos:  position{line: 1548, col: 29, offset: 50986},
										name: "attribute_preprocessor_text_double",
									},
								},
								&choiceExpr{
									pos: position{line: 1548, col: 66, offset: 51023},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 1548, col: 66, offset: 51023},
											val:        "\"",
											ignoreCase: false,
										},
										&andExpr{
											pos: position{line: 1548, col: 72, offset: 51029},
											expr: &seqExpr{
												pos: position{line: 1548, col: 74, offset: 51031},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 1548, col: 74, offset: 51031},
														expr: &litMatcher{
															pos:        position{line: 1548, col: 74, offset: 51031},
															val:        "/",
															ignoreCase: false,
														},
													},
													&litMatcher{
														pos:        position{line: 1548, col: 79, offset: 51036},
														val:        ">",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1553, col: 5, offset: 51164},
						run: (*parser).callongeneric_att_value32,
						expr: &seqExpr{
							pos: position{line: 1553, col: 5, offset: 51164},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 1553, col: 5, offset: 51164},
									expr: &ruleRefExpr{
										pos:  position{line: 1553, col: 5, offset: 51164},
										name: "space_or_newline",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1553, col: 23, offset: 51182},
									name: "attribute_preprocessor_text",
								},
								&andExpr{
									pos: position{line: 1553, col: 51, offset: 51210},
									expr: &choiceExpr{
										pos: position{line: 1553, col: 53, offset: 51212},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1553, col: 53, offset: 51212},
												name: "space_or_newline",
											},
											&ruleRefExpr{
												pos:  position{line: 1553, col: 72, offset: 51231},
												name: "eof",
											},
											&seqExpr{
												pos: position{line: 1553, col: 78, offset: 51237},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 1553, col: 78, offset: 51237},
														expr: &litMatcher{
															pos:        position{line: 1553, col: 78, offset: 51237},
															val:        "/",
															ignoreCase: false,
														},
													},
													&litMatcher{
														pos:        position{line: 1553, col: 83, offset: 51242},
														val:        ">",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_att_value",
			pos:  position{line: 1562, col: 1, offset: 51554},
			expr: &choiceExpr{
				pos: position{line: 1563, col: 6, offset: 51575},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1563, col: 6, offset: 51575},
						run: (*parser).callontable_att_value2,
						expr: &seqExpr{
							pos: position{line: 1563, col: 6, offset: 51575},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1563, col: 7, offset: 51576},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1563, col: 7, offset: 51576},
											expr: &ruleRefExpr{
												pos:  position{line: 1563, col: 7, offset: 51576},
												name: "space",
											},
										},
										&litMatcher{
											pos:        position{line: 1563, col: 14, offset: 51583},
											val:        "'",
											ignoreCase: false,
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1563, col: 19, offset: 51588},
									expr: &ruleRefExpr{
										pos:  position{line: 1563, col: 19, offset: 51588},
										name: "table_attribute_preprocessor_text_single",
									},
								},
								&choiceExpr{
									pos: position{line: 1563, col: 62, offset: 51631},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 1563, col: 62, offset: 51631},
											val:        "'",
											ignoreCase: false,
										},
										&andExpr{
											pos: position{line: 1563, col: 68, offset: 51637},
											expr: &choiceExpr{
												pos: position{line: 1563, col: 70, offset: 51639},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 1563, col: 70, offset: 51639},
														val:        "!!",
														ignoreCase: false,
													},
													&charClassMatcher{
														pos:        position{line: 1563, col: 77, offset: 51646},
														val:        "[|\\r\\n]",
														chars:      []rune{'|', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1568, col: 5, offset: 51778},
						run: (*parser).callontable_att_value16,
						expr: &seqExpr{
							pos: position{line: 1568, col: 5, offset: 51778},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1568, col: 6, offset: 51779},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1568, col: 6, offset: 51779},
											expr: &ruleRefExpr{
												pos:  position{line: 1568, col: 6, offset: 51779},
												name: "space",
											},
										},
										&litMatcher{
											pos:        position{line: 1568, col: 13, offset: 51786},
											val:        "\"",
											ignoreCase: false,
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1568, col: 18, offset: 51791},
									expr: &ruleRefExpr{
										pos:  position{line: 1568, col: 18, offset: 51791},
										name: "table_attribute_preprocessor_text_double",
									},
								},
								&choiceExpr{
									pos: position{line: 1568, col: 61, offset: 51834},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 1568, col: 61, offset: 51834},
											val:        "\"",
											ignoreCase: false,
										},
										&andExpr{
											pos: position{line: 1568, col: 67, offset: 51840},
											expr: &choiceExpr{
												pos: position{line: 1568, col: 69, offset: 51842},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 1568, col: 69, offset: 51842},
														val:        "!!",
														ignoreCase: false,
													},
													&charClassMatcher{
														pos:        position{line: 1568, col: 76, offset: 51849},
														val:        "[|\\r\\n]",
														chars:      []rune{'|', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1573, col: 5, offset: 51981},
						run: (*parser).callontable_att_value30,
						expr: &seqExpr{
							pos: position{line: 1573, col: 5, offset: 51981},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 1573, col: 5, offset: 51981},
									expr: &ruleRefExpr{
										pos:  position{line: 1573, col: 5, offset: 51981},
										name: "space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1573, col: 12, offset: 51988},
									name: "table_attribute_preprocessor_text",
								},
								&andExpr{
									pos: position{line: 1573, col: 46, offset: 52022},
									expr: &choiceExpr{
										pos: position{line: 1573, col: 48, offset: 52024},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1573, col: 48, offset: 52024},
												name: "space_or_newline",
											},
											&ruleRefExpr{
												pos:  position{line: 1573, col: 66, offset: 52042},
												name: "eof",
											},
											&litMatcher{
												pos:        position{line: 1573, col: 72, offset: 52048},
												val:        "!!",
												ignoreCase: false,
											},
											&litMatcher{
												pos:        position{line: 1573, col: 79, offset: 52055},
												val:        "|",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "list_item",
			pos:  position{line: 1582, col: 1, offset: 52298},
			expr: &choiceExpr{
				pos: position{line: 1582, col: 14, offset: 52311},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1582, col: 14, offset: 52311},
						name: "dtdd",
					},
					&ruleRefExpr{
						pos:  position{line: 1582, col: 21, offset: 52318},
						name: "hacky_dl_uses",
					},
					&ruleRefExpr{
						pos:  position{line: 1582, col: 37, offset: 52334},
						name: "li",
					},
				},
			},
		},
		{
			name: "li",
			pos:  position{line: 1584, col: 1, offset: 52338},
			expr: &actionExpr{
				pos: position{line: 1584, col: 7, offset: 52344},
				run: (*parser).callonli1,
				expr: &seqExpr{
					pos: position{line: 1584, col: 7, offset: 52344},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1584, col: 7, offset: 52344},
							label: "bullets",
							expr: &oneOrMoreExpr{
								pos: position{line: 1584, col: 15, offset: 52352},
								expr: &ruleRefExpr{
									pos:  position{line: 1584, col: 15, offset: 52352},
									name: "list_char",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1585, col: 6, offset: 52368},
							label: "c2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1585, col: 9, offset: 52371},
								expr: &ruleRefExpr{
									pos:  position{line: 1585, col: 9, offset: 52371},
									name: "inlineline",
								},
							},
						},
						&andExpr{
							pos: position{line: 1587, col: 6, offset: 52459},
							expr: &choiceExpr{
								pos: position{line: 1587, col: 8, offset: 52461},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1587, col: 8, offset: 52461},
										name: "eolf",
									},
									&ruleRefExpr{
										pos:  position{line: 1587, col: 15, offset: 52468},
										name: "inline_breaks",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hacky_dl_uses",
			pos:  position{line: 1613, col: 1, offset: 53130},
			expr: &actionExpr{
				pos: position{line: 1613, col: 18, offset: 53147},
				run: (*parser).callonhacky_dl_uses1,
				expr: &seqExpr{
					pos: position{line: 1613, col: 18, offset: 53147},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1613, col: 18, offset: 53147},
							expr: &litMatcher{
								pos:        position{line: 1613, col: 18, offset: 53147},
								val:        ":",
								ignoreCase: false,
							},
						},
						&seqExpr{
							pos: position{line: 1614, col: 17, offset: 53168},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1614, col: 17, offset: 53168},
									name: "table_line",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1614, col: 28, offset: 53179},
									expr: &seqExpr{
										pos: position{line: 1614, col: 29, offset: 53180},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1614, col: 29, offset: 53180},
												name: "sol",
											},
											&ruleRefExpr{
												pos:  position{line: 1614, col: 33, offset: 53184},
												name: "table_line",
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1615, col: 16, offset: 53213},
							expr: &ruleRefExpr{
								pos:  position{line: 1615, col: 16, offset: 53213},
								name: "inlineline",
							},
						},
						&andExpr{
							pos: position{line: 1616, col: 16, offset: 53240},
							expr: &ruleRefExpr{
								pos:  position{line: 1616, col: 17, offset: 53241},
								name: "comment_space_eolf",
							},
						},
					},
				},
			},
		},
		{
			name: "dtdd",
			pos:  position{line: 1628, col: 1, offset: 53551},
			expr: &choiceExpr{
				pos: position{line: 1629, col: 6, offset: 53561},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1629, col: 6, offset: 53561},
						run: (*parser).callondtdd2,
						expr: &seqExpr{
							pos: position{line: 1629, col: 6, offset: 53561},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 1629, col: 6, offset: 53561},
									expr: &actionExpr{
										pos: position{line: 1629, col: 7, offset: 53562},
										run: (*parser).callondtdd5,
										expr: &seqExpr{
											pos: position{line: 1629, col: 7, offset: 53562},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1629, col: 7, offset: 53562},
													expr: &seqExpr{
														pos: position{line: 1629, col: 9, offset: 53564},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1629, col: 9, offset: 53564},
																val:        ";",
																ignoreCase: false,
															},
															&notExpr{
																pos: position{line: 1629, col: 13, offset: 53568},
																expr: &ruleRefExpr{
																	pos:  position{line: 1629, col: 14, offset: 53569},
																	name: "list_char",
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1629, col: 25, offset: 53580},
													name: "list_char",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1630, col: 5, offset: 53630},
									val:        ";",
									ignoreCase: false,
								},
								&andCodeExpr{
									pos: position{line: 1631, col: 5, offset: 53638},
									run: (*parser).callondtdd14,
								},
								&zeroOrOneExpr{
									pos: position{line: 1632, col: 5, offset: 53694},
									expr: &ruleRefExpr{
										pos:  position{line: 1632, col: 5, offset: 53694},
										name: "inlineline",
									},
								},
								&actionExpr{
									pos: position{line: 1633, col: 6, offset: 53711},
									run: (*parser).callondtdd17,
									expr: &litMatcher{
										pos:        position{line: 1633, col: 6, offset: 53711},
										val:        ":",
										ignoreCase: false,
									},
								},
								&andCodeExpr{
									pos: position{line: 1636, col: 5, offset: 53860},
									run: (*parser).callondtdd19,
								},
								&zeroOrOneExpr{
									pos: position{line: 1637, col: 5, offset: 53929},
									expr: &ruleRefExpr{
										pos:  position{line: 1637, col: 5, offset: 53929},
										name: "inlineline",
									},
								},
								&andExpr{
									pos: position{line: 1638, col: 5, offset: 53945},
									expr: &ruleRefExpr{
										pos:  position{line: 1638, col: 6, offset: 53946},
										name: "eolf",
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1657, col: 5, offset: 54619},
						run: (*parser).callondtdd24,
					},
				},
			},
		},
		{
			name: "list_char",
			pos:  position{line: 1660, col: 1, offset: 54688},
			expr: &charClassMatcher{
				pos:        position{line: 1660, col: 14, offset: 54701},
				val:        "[*#:;]",
				chars:      []rune{'*', '#', ':', ';'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "full_table_in_link_caption",
			pos:  position{line: 1715, col: 1, offset: 56657},
			expr: &actionExpr{
				pos: position{line: 1716, col: 6, offset: 56689},
				run: (*parser).callonfull_table_in_link_caption1,
				expr: &seqExpr{
					pos: position{line: 1716, col: 6, offset: 56689},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1716, col: 7, offset: 56690},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 1716, col: 7, offset: 56690},
									expr: &ruleRefExpr{
										pos:  position{line: 1716, col: 9, offset: 56692},
										name: "inline_breaks",
									},
								},
								&andExpr{
									pos: position{line: 1716, col: 25, offset: 56708},
									expr: &litMatcher{
										pos:        position{line: 1716, col: 27, offset: 56710},
										val:        "{{!}}",
										ignoreCase: false,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1723, col: 9, offset: 57075},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1723, col: 9, offset: 57075},
									run: (*parser).callonfull_table_in_link_caption9,
									expr: &seqExpr{
										pos: position{line: 1723, col: 9, offset: 57075},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 1723, col: 9, offset: 57075},
												run: (*parser).callonfull_table_in_link_caption11,
											},
											&seqExpr{
												pos: position{line: 1726, col: 13, offset: 57197},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1726, col: 13, offset: 57197},
														name: "table_start_tag",
													},
													&ruleRefExpr{
														pos:  position{line: 1726, col: 29, offset: 57213},
														name: "optionalNewlines",
													},
													&oneOrMoreExpr{
														pos: position{line: 1729, col: 13, offset: 57342},
														expr: &seqExpr{
															pos: position{line: 1729, col: 14, offset: 57343},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1729, col: 14, offset: 57343},
																	expr: &seqExpr{
																		pos: position{line: 1729, col: 15, offset: 57344},
																		exprs: []interface{}{
																			&ruleRefExpr{
																				pos:  position{line: 1729, col: 15, offset: 57344},
																				name: "sol",
																			},
																			&choiceExpr{
																				pos: position{line: 1729, col: 20, offset: 57349},
																				alternatives: []interface{}{
																					&ruleRefExpr{
																						pos:  position{line: 1729, col: 20, offset: 57349},
																						name: "table_content_line",
																					},
																					&ruleRefExpr{
																						pos:  position{line: 1729, col: 41, offset: 57370},
																						name: "tplarg_or_template",
																					},
																				},
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1729, col: 61, offset: 57390},
																				name: "optionalNewlines",
																			},
																		},
																	},
																},
																&ruleRefExpr{
																	pos:  position{line: 1730, col: 13, offset: 57421},
																	name: "sol",
																},
																&ruleRefExpr{
																	pos:  position{line: 1730, col: 17, offset: 57425},
																	name: "table_end_tag",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1738, col: 9, offset: 57602},
									run: (*parser).callonfull_table_in_link_caption26,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_line",
			pos:  position{line: 1742, col: 1, offset: 57764},
			expr: &actionExpr{
				pos: position{line: 1743, col: 6, offset: 57780},
				run: (*parser).callontable_line1,
				expr: &seqExpr{
					pos: position{line: 1743, col: 6, offset: 57780},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1743, col: 7, offset: 57781},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 1743, col: 7, offset: 57781},
									expr: &ruleRefExpr{
										pos:  position{line: 1743, col: 9, offset: 57783},
										name: "inline_breaks",
									},
								},
								&andExpr{
									pos: position{line: 1743, col: 25, offset: 57799},
									expr: &litMatcher{
										pos:        position{line: 1743, col: 27, offset: 57801},
										val:        "{{!}}",
										ignoreCase: false,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1745, col: 9, offset: 57825},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1745, col: 9, offset: 57825},
									run: (*parser).callontable_line9,
									expr: &seqExpr{
										pos: position{line: 1745, col: 9, offset: 57825},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 1745, col: 9, offset: 57825},
												run: (*parser).callontable_line11,
											},
											&choiceExpr{
												pos: position{line: 1747, col: 14, offset: 57910},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 1747, col: 14, offset: 57910},
														exprs: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 1747, col: 14, offset: 57910},
																name: "table_start_tag",
															},
															&ruleRefExpr{
																pos:  position{line: 1747, col: 30, offset: 57926},
																name: "optionalNewlines",
															},
														},
													},
													&seqExpr{
														pos: position{line: 1748, col: 14, offset: 57956},
														exprs: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 1748, col: 14, offset: 57956},
																name: "table_content_line",
															},
															&ruleRefExpr{
																pos:  position{line: 1748, col: 33, offset: 57975},
																name: "optionalNewlines",
															},
														},
													},
													&ruleRefExpr{
														pos:  position{line: 1749, col: 14, offset: 58005},
														name: "table_end_tag",
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1756, col: 9, offset: 58145},
									run: (*parser).callontable_line20,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_content_line",
			pos:  position{line: 1759, col: 1, offset: 58240},
			expr: &seqExpr{
				pos: position{line: 1759, col: 23, offset: 58262},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1759, col: 23, offset: 58262},
						expr: &choiceExpr{
							pos: position{line: 1759, col: 24, offset: 58263},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1759, col: 24, offset: 58263},
									name: "space",
								},
								&ruleRefExpr{
									pos:  position{line: 1759, col: 32, offset: 58271},
									name: "comment",
								},
							},
						},
					},
					&choiceExpr{
						pos: position{line: 1760, col: 5, offset: 58287},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1760, col: 5, offset: 58287},
								name: "table_heading_tags",
							},
							&ruleRefExpr{
								pos:  position{line: 1761, col: 7, offset: 58312},
								name: "table_row_tag",
							},
							&ruleRefExpr{
								pos:  position{line: 1762, col: 7, offset: 58332},
								name: "table_data_tags",
							},
							&ruleRefExpr{
								pos:  position{line: 1763, col: 7, offset: 58354},
								name: "table_caption_tag",
							},
						},
					},
				},
			},
		},
		{
			name: "table_start_tag",
			pos:  position{line: 1766, col: 1, offset: 58377},
			expr: &actionExpr{
				pos: position{line: 1767, col: 6, offset: 58398},
				run: (*parser).callontable_start_tag1,
				expr: &seqExpr{
					pos: position{line: 1767, col: 6, offset: 58398},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1767, col: 6, offset: 58398},
							expr: &choiceExpr{
								pos: position{line: 1767, col: 7, offset: 58399},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1767, col: 7, offset: 58399},
										name: "space",
									},
									&ruleRefExpr{
										pos:  position{line: 1767, col: 15, offset: 58407},
										name: "comment",
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 1767, col: 26, offset: 58418},
							run: (*parser).callontable_start_tag7,
							expr: &litMatcher{
								pos:        position{line: 1767, col: 26, offset: 58418},
								val:        "",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1767, col: 73, offset: 58465},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1767, col: 77, offset: 58469},
							name: "pipe",
						},
						&andCodeExpr{
							pos: position{line: 1769, col: 5, offset: 58530},
							run: (*parser).callontable_start_tag11,
						},
						&ruleRefExpr{
							pos:  position{line: 1770, col: 5, offset: 58597},
							name: "table_attributes",
						},
						&actionExpr{
							pos: position{line: 1771, col: 6, offset: 58619},
							run: (*parser).callontable_start_tag13,
							expr: &litMatcher{
								pos:        position{line: 1771, col: 6, offset: 58619},
								val:        "",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "table_caption_tag",
			pos:  position{line: 1794, col: 1, offset: 59197},
			expr: &actionExpr{
				pos: position{line: 1796, col: 6, offset: 59265},
				run: (*parser).callontable_caption_tag1,
				expr: &seqExpr{
					pos: position{line: 1796, col: 6, offset: 59265},
					exprs: []interface{}{
						&notCodeExpr{
							pos: position{line: 1796, col: 6, offset: 59265},
							run: (*parser).callontable_caption_tag3,
						},
						&ruleRefExpr{
							pos:  position{line: 1797, col: 5, offset: 59335},
							name: "pipe",
						},
						&litMatcher{
							pos:        position{line: 1797, col: 10, offset: 59340},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 1798, col: 5, offset: 59348},
							expr: &ruleRefExpr{
								pos:  position{line: 1798, col: 5, offset: 59348},
								name: "row_syntax_table_args",
							},
						},
						&actionExpr{
							pos: position{line: 1799, col: 6, offset: 59376},
							run: (*parser).callontable_caption_tag8,
							expr: &litMatcher{
								pos:        position{line: 1799, col: 6, offset: 59376},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1800, col: 5, offset: 59427},
							expr: &ruleRefExpr{
								pos:  position{line: 1800, col: 5, offset: 59427},
								name: "nested_block_in_table",
							},
						},
					},
				},
			},
		},
		{
			name: "table_row_tag",
			pos:  position{line: 1806, col: 1, offset: 59601},
			expr: &actionExpr{
				pos: position{line: 1808, col: 5, offset: 59669},
				run: (*parser).callontable_row_tag1,
				expr: &seqExpr{
					pos: position{line: 1808, col: 5, offset: 59669},
					exprs: []interface{}{
						&notCodeExpr{
							pos: position{line: 1808, col: 5, offset: 59669},
							run: (*parser).callontable_row_tag3,
						},
						&ruleRefExpr{
							pos:  position{line: 1809, col: 5, offset: 59739},
							name: "pipe",
						},
						&oneOrMoreExpr{
							pos: position{line: 1809, col: 10, offset: 59744},
							expr: &litMatcher{
								pos:        position{line: 1809, col: 10, offset: 59744},
								val:        "-",
								ignoreCase: false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1810, col: 5, offset: 59753},
							run: (*parser).callontable_row_tag7,
						},
						&ruleRefExpr{
							pos:  position{line: 1811, col: 5, offset: 59820},
							name: "table_attributes",
						},
						&actionExpr{
							pos: position{line: 1812, col: 6, offset: 59842},
							run: (*parser).callontable_row_tag9,
							expr: &litMatcher{
								pos:        position{line: 1812, col: 6, offset: 59842},
								val:        "",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "tds",
			pos:  position{line: 1838, col: 1, offset: 60507},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1839, col: 6, offset: 60516},
				expr: &actionExpr{
					pos: position{line: 1839, col: 8, offset: 60518},
					run: (*parser).callontds2,
					expr: &seqExpr{
						pos: position{line: 1839, col: 8, offset: 60518},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1839, col: 10, offset: 60520},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1839, col: 10, offset: 60520},
										name: "pipe_pipe",
									},
									&actionExpr{
										pos: position{line: 1839, col: 22, offset: 60532},
										run: (*parser).callontds6,
										expr: &seqExpr{
											pos: position{line: 1839, col: 22, offset: 60532},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1839, col: 22, offset: 60532},
													name: "pipe",
												},
												&andExpr{
													pos: position{line: 1839, col: 27, offset: 60537},
													expr: &ruleRefExpr{
														pos:  position{line: 1839, col: 29, offset: 60539},
														name: "row_syntax_table_args",
													},
												},
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1840, col: 7, offset: 60602},
								name: "table_data_tag",
							},
						},
					},
				},
			},
		},
		{
			name: "table_data_tags",
			pos:  position{line: 1855, col: 1, offset: 61037},
			expr: &actionExpr{
				pos: position{line: 1856, col: 6, offset: 61058},
				run: (*parser).callontable_data_tags1,
				expr: &seqExpr{
					pos: position{line: 1856, col: 6, offset: 61058},
					exprs: []interface{}{
						&notCodeExpr{
							pos: position{line: 1856, col: 6, offset: 61058},
							run: (*parser).callontable_data_tags3,
						},
						&ruleRefExpr{
							pos:  position{line: 1857, col: 5, offset: 61128},
							name: "pipe",
						},
						&notExpr{
							pos: position{line: 1858, col: 5, offset: 61137},
							expr: &charClassMatcher{
								pos:        position{line: 1858, col: 6, offset: 61138},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1858, col: 11, offset: 61143},
							name: "table_data_tag",
						},
						&actionExpr{
							pos: position{line: 1859, col: 6, offset: 61163},
							run: (*parser).callontable_data_tags8,
							expr: &litMatcher{
								pos:        position{line: 1859, col: 6, offset: 61163},
								val:        "",
								ignoreCase: false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1860, col: 5, offset: 61214},
							name: "tds",
						},
					},
				},
			},
		},
		{
			name: "table_data_tag",
			pos:  position{line: 1864, col: 1, offset: 61268},
			expr: &actionExpr{
				pos: position{line: 1865, col: 6, offset: 61288},
				run: (*parser).callontable_data_tag1,
				expr: &seqExpr{
					pos: position{line: 1865, col: 6, offset: 61288},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1865, col: 6, offset: 61288},
							expr: &litMatcher{
								pos:        position{line: 1865, col: 8, offset: 61290},
								val:        "}",
								ignoreCase: false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1866, col: 5, offset: 61298},
							expr: &ruleRefExpr{
								pos:  position{line: 1866, col: 5, offset: 61298},
								name: "row_syntax_table_args",
							},
						},
						&actionExpr{
							pos: position{line: 1868, col: 6, offset: 61366},
							run: (*parser).callontable_data_tag7,
							expr: &litMatcher{
								pos:        position{line: 1868, col: 6, offset: 61366},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1869, col: 5, offset: 61417},
							expr: &ruleRefExpr{
								pos:  position{line: 1869, col: 5, offset: 61417},
								name: "nested_block_in_table",
							},
						},
					},
				},
			},
		},
		{
			name: "table_heading_tags",
			pos:  position{line: 1876, col: 1, offset: 61583},
			expr: &choiceExpr{
				pos: position{line: 1877, col: 6, offset: 61607},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1877, col: 6, offset: 61607},
						run: (*parser).callontable_heading_tags2,
						expr: &seqExpr{
							pos: position{line: 1877, col: 6, offset: 61607},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1877, col: 6, offset: 61607},
									val:        "!",
									ignoreCase: false,
								},
								&andCodeExpr{
									pos: position{line: 1878, col: 5, offset: 61615},
									run: (*parser).callontable_heading_tags5,
								},
								&ruleRefExpr{
									pos:  position{line: 1879, col: 5, offset: 61684},
									name: "table_heading_tag",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1880, col: 5, offset: 61706},
									expr: &actionExpr{
										pos: position{line: 1880, col: 7, offset: 61708},
										run: (*parser).callontable_heading_tags8,
										expr: &seqExpr{
											pos: position{line: 1880, col: 7, offset: 61708},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 1880, col: 8, offset: 61709},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 1880, col: 8, offset: 61709},
															val:        "!!",
															ignoreCase: false,
														},
														&ruleRefExpr{
															pos:  position{line: 1880, col: 15, offset: 61716},
															name: "pipe_pipe",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1880, col: 26, offset: 61727},
													name: "table_heading_tag",
												},
											},
										},
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1900, col: 7, offset: 62318},
						run: (*parser).callontable_heading_tags14,
					},
				},
			},
		},
		{
			name: "table_heading_tag",
			pos:  position{line: 1902, col: 1, offset: 62410},
			expr: &actionExpr{
				pos: position{line: 1903, col: 6, offset: 62433},
				run: (*parser).callontable_heading_tag1,
				expr: &seqExpr{
					pos: position{line: 1903, col: 6, offset: 62433},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1903, col: 6, offset: 62433},
							expr: &ruleRefExpr{
								pos:  position{line: 1903, col: 6, offset: 62433},
								name: "row_syntax_table_args",
							},
						},
						&actionExpr{
							pos: position{line: 1904, col: 6, offset: 62461},
							run: (*parser).callontable_heading_tag5,
							expr: &litMatcher{
								pos:        position{line: 1904, col: 6, offset: 62461},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1905, col: 5, offset: 62512},
							expr: &actionExpr{
								pos: position{line: 1905, col: 7, offset: 62514},
								run: (*parser).callontable_heading_tag8,
								expr: &seqExpr{
									pos: position{line: 1905, col: 7, offset: 62514},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 1905, col: 7, offset: 62514},
											run: (*parser).callontable_heading_tag10,
										},
										&ruleRefExpr{
											pos:  position{line: 1916, col: 7, offset: 62893},
											name: "nested_block_in_table",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_end_tag",
			pos:  position{line: 1922, col: 1, offset: 63089},
			expr: &actionExpr{
				pos: position{line: 1923, col: 6, offset: 63108},
				run: (*parser).callontable_end_tag1,
				expr: &seqExpr{
					pos: position{line: 1923, col: 6, offset: 63108},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1923, col: 6, offset: 63108},
							expr: &choiceExpr{
								pos: position{line: 1923, col: 7, offset: 63109},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1923, col: 7, offset: 63109},
										name: "space",
									},
									&ruleRefExpr{
										pos:  position{line: 1923, col: 15, offset: 63117},
										name: "comment",
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 1923, col: 26, offset: 63128},
							run: (*parser).callontable_end_tag7,
							expr: &litMatcher{
								pos:        position{line: 1923, col: 26, offset: 63128},
								val:        "",
								ignoreCase: false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1923, col: 73, offset: 63175},
							name: "pipe",
						},
						&litMatcher{
							pos:        position{line: 1923, col: 78, offset: 63180},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "row_syntax_table_args",
			pos:  position{line: 1939, col: 1, offset: 63656},
			expr: &choiceExpr{
				pos: position{line: 1940, col: 6, offset: 63683},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1940, col: 6, offset: 63683},
						run: (*parser).callonrow_syntax_table_args2,
						expr: &seqExpr{
							pos: position{line: 1940, col: 6, offset: 63683},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1940, col: 6, offset: 63683},
									run: (*parser).callonrow_syntax_table_args4,
								},
								&ruleRefExpr{
									pos:  position{line: 1941, col: 5, offset: 63768},
									name: "table_attributes",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1941, col: 22, offset: 63785},
									expr: &ruleRefExpr{
										pos:  position{line: 1941, col: 22, offset: 63785},
										name: "space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1941, col: 29, offset: 63792},
									name: "pipe",
								},
								&notExpr{
									pos: position{line: 1941, col: 34, offset: 63797},
									expr: &ruleRefExpr{
										pos:  position{line: 1941, col: 35, offset: 63798},
										name: "pipe",
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1947, col: 7, offset: 63912},
						run: (*parser).callonrow_syntax_table_args11,
					},
				},
			},
		},
		{
			name: "text_char",
			pos:  position{line: 1965, col: 1, offset: 64634},
			expr: &charClassMatcher{
				pos:        position{line: 1965, col: 14, offset: 64647},
				val:        "[^'<~[{\\n\\r:;\\]}|!=-]",
				chars:      []rune{'\'', '<', '~', '[', '{', '\n', '\r', ':', ';', ']', '}', '|', '!', '=', '-'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "urltext",
			pos:  position{line: 1990, col: 1, offset: 65501},
			expr: &oneOrMoreExpr{
				pos: position{line: 1990, col: 12, offset: 65512},
				expr: &choiceExpr{
					pos: position{line: 1990, col: 14, offset: 65514},
					alternatives: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1990, col: 14, offset: 65514},
							expr: &charClassMatcher{
								pos:        position{line: 1990, col: 14, offset: 65514},
								val:        "[^-'<~[{\\n/A-Za-z_|!:;\\]} &=]",
								chars:      []rune{'-', '\'', '<', '~', '[', '{', '\n', '/', '_', '|', '!', ':', ';', ']', '}', ' ', '&', '='},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&actionExpr{
							pos: position{line: 1991, col: 13, offset: 65557},
							run: (*parser).callonurltext5,
							expr: &seqExpr{
								pos: position{line: 1991, col: 13, offset: 65557},
								exprs: []interface{}{
									&andExpr{
										pos: position{line: 1991, col: 13, offset: 65557},
										expr: &charClassMatcher{
											pos:        position{line: 1991, col: 15, offset: 65559},
											val:        "[/A-Za-z]",
											chars:      []rune{'/'},
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&labeledExpr{
										pos:   position{line: 1991, col: 25, offset: 65569},
										label: "al",
										expr: &ruleRefExpr{
											pos:  position{line: 1991, col: 28, offset: 65572},
											name: "autolink",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 1992, col: 13, offset: 65626},
							run: (*parser).callonurltext11,
							expr: &seqExpr{
								pos: position{line: 1992, col: 13, offset: 65626},
								exprs: []interface{}{
									&andExpr{
										pos: position{line: 1992, col: 13, offset: 65626},
										expr: &litMatcher{
											pos:        position{line: 1992, col: 15, offset: 65628},
											val:        "&",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 1992, col: 19, offset: 65632},
										label: "he",
										expr: &ruleRefExpr{
											pos:  position{line: 1992, col: 22, offset: 65635},
											name: "htmlentity",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 1996, col: 13, offset: 65839},
							run: (*parser).callonurltext17,
							expr: &seqExpr{
								pos: position{line: 1996, col: 13, offset: 65839},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1996, col: 13, offset: 65839},
										val:        " ",
										ignoreCase: false,
									},
									&andExpr{
										pos: position{line: 1996, col: 17, offset: 65843},
										expr: &litMatcher{
											pos:        position{line: 1996, col: 19, offset: 65845},
											val:        ":",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 2008, col: 13, offset: 66308},
							run: (*parser).callonurltext22,
							expr: &seqExpr{
								pos: position{line: 2008, col: 13, offset: 66308},
								exprs: []interface{}{
									&andExpr{
										pos: position{line: 2008, col: 13, offset: 66308},
										expr: &litMatcher{
											pos:        position{line: 2008, col: 16, offset: 66311},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 2008, col: 22, offset: 66317},
										label: "bs",
										expr: &ruleRefExpr{
											pos:  position{line: 2008, col: 25, offset: 66320},
											name: "behavior_switch",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2011, col: 13, offset: 66482},
							name: "text_char",
						},
					},
				},
			},
		},
		{
			name: "raw_htmlentity",
			pos:  position{line: 2013, col: 1, offset: 66496},
			expr: &actionExpr{
				pos: position{line: 2013, col: 19, offset: 66514},
				run: (*parser).callonraw_htmlentity1,
				expr: &seqExpr{
					pos: position{line: 2013, col: 20, offset: 66515},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2013, col: 20, offset: 66515},
							val:        "&",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 2013, col: 24, offset: 66519},
							expr: &charClassMatcher{
								pos:        position{line: 2013, col: 24, offset: 66519},
								val:        "[#0-9a-zA-Z]",
								chars:      []rune{'#'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 2013, col: 38, offset: 66533},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "htmlentity",
			pos:  position{line: 2019, col: 1, offset: 66603},
			expr: &actionExpr{
				pos: position{line: 2019, col: 15, offset: 66617},
				run: (*parser).callonhtmlentity1,
				expr: &ruleRefExpr{
					pos:  position{line: 2019, col: 15, offset: 66617},
					name: "raw_htmlentity",
				},
			},
		},
		{
			name: "spaces",
			pos:  position{line: 2033, col: 1, offset: 67044},
			expr: &oneOrMoreExpr{
				pos: position{line: 2033, col: 11, offset: 67054},
				expr: &charClassMatcher{
					pos:        position{line: 2033, col: 11, offset: 67054},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "space",
			pos:  position{line: 2035, col: 1, offset: 67062},
			expr: &charClassMatcher{
				pos:        position{line: 2035, col: 10, offset: 67071},
				val:        "[ \\t]",
				chars:      []rune{' ', '\t'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "optionalSpaceToken",
			pos:  position{line: 2037, col: 1, offset: 67078},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2037, col: 23, offset: 67100},
				expr: &ruleRefExpr{
					pos:  position{line: 2037, col: 23, offset: 67100},
					name: "space",
				},
			},
		},
		{
			name: "space_or_newline",
			pos:  position{line: 2045, col: 1, offset: 67401},
			expr: &charClassMatcher{
				pos:        position{line: 2046, col: 6, offset: 67423},
				val:        "[ \\t\\n\\r\\x0c]",
				chars:      []rune{' ', '\t', '\n', '\r', '\f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "end_of_word",
			pos:  position{line: 2052, col: 1, offset: 67618},
			expr: &choiceExpr{
				pos: position{line: 2053, col: 6, offset: 67635},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2053, col: 6, offset: 67635},
						name: "eof",
					},
					&notExpr{
						pos: position{line: 2053, col: 12, offset: 67641},
						expr: &charClassMatcher{
							pos:        position{line: 2053, col: 13, offset: 67642},
							val:        "[A-Za-z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "unispace",
			pos:  position{line: 2059, col: 1, offset: 67920},
			expr: &charClassMatcher{
				pos:        position{line: 2059, col: 13, offset: 67932},
				val:        "[ \\u00A0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]",
				chars:      []rune{' ', '\u00a0', '\u1680', '\u202f', '\u205f', '\u3000'},
				ranges:     []rune{'\u2000', '\u200a'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "space_or_nbsp",
			pos:  position{line: 2062, col: 1, offset: 68061},
			expr: &choiceExpr{
				pos: position{line: 2063, col: 6, offset: 68080},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2063, col: 6, offset: 68080},
						name: "space",
					},
					&ruleRefExpr{
						pos:  position{line: 2064, col: 5, offset: 68105},
						name: "unispace",
					},
					&actionExpr{
						pos: position{line: 2065, col: 5, offset: 68118},
						run: (*parser).callonspace_or_nbsp4,
						expr: &seqExpr{
							pos: position{line: 2065, col: 5, offset: 68118},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2065, col: 5, offset: 68118},
									label: "he",
									expr: &ruleRefExpr{
										pos:  position{line: 2065, col: 8, offset: 68121},
										name: "htmlentity",
									},
								},
								&andCodeExpr{
									pos: position{line: 2065, col: 19, offset: 68132},
									run: (*parser).callonspace_or_nbsp8,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "space_or_nbsp_or_dash",
			pos:  position{line: 2069, col: 1, offset: 68281},
			expr: &choiceExpr{
				pos: position{line: 2070, col: 6, offset: 68308},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2070, col: 6, offset: 68308},
						name: "space_or_nbsp",
					},
					&litMatcher{
						pos:        position{line: 2070, col: 22, offset: 68324},
						val:        "-",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "optionalNewlines",
			pos:  position{line: 2075, col: 1, offset: 68489},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2076, col: 6, offset: 68511},
				expr: &seqExpr{
					pos: position{line: 2076, col: 7, offset: 68512},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 2076, col: 7, offset: 68512},
							val:        "[\\n\\r\\t ]",
							chars:      []rune{'\n', '\r', '\t', ' '},
							ignoreCase: false,
							inverted:   false,
						},
						&andExpr{
							pos: position{line: 2076, col: 17, offset: 68522},
							expr: &charClassMatcher{
								pos:        position{line: 2076, col: 18, offset: 68523},
								val:        "[\\n\\r]",
								chars:      []rune{'\n', '\r'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "comment_or_includes",
			pos:  position{line: 2078, col: 1, offset: 68533},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2078, col: 24, offset: 68556},
				expr: &choiceExpr{
					pos: position{line: 2078, col: 25, offset: 68557},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2078, col: 25, offset: 68557},
							name: "comment",
						},
						&choiceExpr{
							pos: position{line: 2079, col: 5, offset: 68573},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2079, col: 5, offset: 68573},
									run: (*parser).calloncomment_or_includes5,
									expr: &seqExpr{
										pos: position{line: 2079, col: 7, offset: 68575},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 2079, col: 7, offset: 68575},
												run: (*parser).calloncomment_or_includes7,
											},
											&labeledExpr{
												pos:   position{line: 2083, col: 7, offset: 68644},
												label: "i",
												expr: &ruleRefExpr{
													pos:  position{line: 2083, col: 9, offset: 68646},
													name: "include_limits",
												},
											},
											&andCodeExpr{
												pos: position{line: 2084, col: 7, offset: 68667},
												run: (*parser).calloncomment_or_includes10,
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 2089, col: 7, offset: 68759},
									run: (*parser).calloncomment_or_includes11,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "sol",
			pos:  position{line: 2095, col: 1, offset: 68825},
			expr: &seqExpr{
				pos: position{line: 2095, col: 8, offset: 68832},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 2095, col: 9, offset: 68833},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2095, col: 9, offset: 68833},
								name: "empty_line_with_comments",
							},
							&ruleRefExpr{
								pos:  position{line: 2095, col: 36, offset: 68860},
								name: "sol_prefix",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2095, col: 48, offset: 68872},
						name: "comment_or_includes",
					},
				},
			},
		},
		{
			name: "sol_prefix",
			pos:  position{line: 2097, col: 1, offset: 68893},
			expr: &choiceExpr{
				pos: position{line: 2098, col: 6, offset: 68909},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2098, col: 6, offset: 68909},
						name: "newlineToken",
					},
					&actionExpr{
						pos: position{line: 2099, col: 5, offset: 68926},
						run: (*parser).callonsol_prefix3,
						expr: &andCodeExpr{
							pos: position{line: 2099, col: 5, offset: 68926},
							run: (*parser).callonsol_prefix4,
						},
					},
				},
			},
		},
		{
			name: "empty_line_with_comments",
			pos:  position{line: 2109, col: 1, offset: 69222},
			expr: &actionExpr{
				pos: position{line: 2110, col: 6, offset: 69252},
				run: (*parser).callonempty_line_with_comments1,
				expr: &seqExpr{
					pos: position{line: 2110, col: 6, offset: 69252},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2110, col: 6, offset: 69252},
							name: "sol_prefix",
						},
						&actionExpr{
							pos: position{line: 2110, col: 18, offset: 69264},
							run: (*parser).callonempty_line_with_comments4,
							expr: &litMatcher{
								pos:        position{line: 2110, col: 18, offset: 69264},
								val:        "",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2110, col: 88, offset: 69334},
							expr: &seqExpr{
								pos: position{line: 2110, col: 89, offset: 69335},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 2110, col: 89, offset: 69335},
										expr: &ruleRefExpr{
											pos:  position{line: 2110, col: 89, offset: 69335},
											name: "space",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2110, col: 96, offset: 69342},
										name: "comment",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2110, col: 104, offset: 69350},
										expr: &choiceExpr{
											pos: position{line: 2110, col: 105, offset: 69351},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 2110, col: 105, offset: 69351},
													name: "space",
												},
												&ruleRefExpr{
													pos:  position{line: 2110, col: 113, offset: 69359},
													name: "comment",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2110, col: 123, offset: 69369},
										name: "newline",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "comment_space",
			pos:  position{line: 2122, col: 1, offset: 69643},
			expr: &choiceExpr{
				pos: position{line: 2122, col: 18, offset: 69660},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2122, col: 18, offset: 69660},
						name: "comment",
					},
					&ruleRefExpr{
						pos:  position{line: 2122, col: 28, offset: 69670},
						name: "space",
					},
				},
			},
		},
		{
			name: "nl_comment_space",
			pos:  position{line: 2124, col: 1, offset: 69677},
			expr: &choiceExpr{
				pos: position{line: 2124, col: 21, offset: 69697},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2124, col: 21, offset: 69697},
						name: "newlineToken",
					},
					&ruleRefExpr{
						pos:  position{line: 2124, col: 36, offset: 69712},
						name: "comment_space",
					},
				},
			},
		},
		{
			name: "include_limits",
			pos:  position{line: 2141, col: 1, offset: 70059},
			expr: &actionExpr{
				pos: position{line: 2142, col: 3, offset: 70079},
				run: (*parser).calloninclude_limits1,
				expr: &seqExpr{
					pos: position{line: 2142, col: 3, offset: 70079},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2142, col: 3, offset: 70079},
							label: "il",
							expr: &actionExpr{
								pos: position{line: 2142, col: 7, offset: 70083},
								run: (*parser).calloninclude_limits4,
								expr: &seqExpr{
									pos: position{line: 2142, col: 7, offset: 70083},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2142, col: 7, offset: 70083},
											val:        "<",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 2142, col: 11, offset: 70087},
											expr: &litMatcher{
												pos:        position{line: 2142, col: 11, offset: 70087},
												val:        "/",
												ignoreCase: false,
											},
										},
										&seqExpr{
											pos: position{line: 2142, col: 17, offset: 70093},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2142, col: 17, offset: 70093},
													expr: &charClassMatcher{
														pos:        position{line: 2142, col: 17, offset: 70093},
														val:        "[oyinclude]i",
														chars:      []rune{'o', 'y', 'i', 'n', 'c', 'l', 'u', 'd', 'e'},
														ignoreCase: true,
														inverted:   false,
													},
												},
												&andCodeExpr{
													pos: position{line: 2142, col: 31, offset: 70107},
													run: (*parser).calloninclude_limits12,
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2148, col: 6, offset: 70270},
											expr: &ruleRefExpr{
												pos:  position{line: 2148, col: 6, offset: 70270},
												name: "space_or_newline",
											},
										},
										&litMatcher{
											pos:        position{line: 2148, col: 24, offset: 70288},
											val:        ">",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2198, col: 6, offset: 71814},
							run: (*parser).calloninclude_limits16,
						},
					},
				},
			},
		},
		{
			name: "sof",
			pos:  position{line: 2201, col: 1, offset: 71911},
			expr: &andCodeExpr{
				pos: position{line: 2201, col: 8, offset: 71918},
				run: (*parser).callonsof1,
			},
		},
		{
			name: "eof",
			pos:  position{line: 2206, col: 1, offset: 71972},
			expr: &andCodeExpr{
				pos: position{line: 2206, col: 8, offset: 71979},
				run: (*parser).calloneof1,
			},
		},
		{
			name: "newline",
			pos:  position{line: 2211, col: 1, offset: 72056},
			expr: &choiceExpr{
				pos: position{line: 2211, col: 12, offset: 72067},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2211, col: 12, offset: 72067},
						val:        "\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 2211, col: 19, offset: 72074},
						val:        "\r\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "newlineToken",
			pos:  position{line: 2213, col: 1, offset: 72082},
			expr: &actionExpr{
				pos: position{line: 2213, col: 17, offset: 72098},
				run: (*parser).callonnewlineToken1,
				expr: &ruleRefExpr{
					pos:  position{line: 2213, col: 17, offset: 72098},
					name: "newline",
				},
			},
		},
		{
			name: "eolf",
			pos:  position{line: 2215, col: 1, offset: 72164},
			expr: &choiceExpr{
				pos: position{line: 2215, col: 9, offset: 72172},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2215, col: 9, offset: 72172},
						name: "newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2215, col: 19, offset: 72182},
						name: "eof",
					},
				},
			},
		},
		{
			name: "comment_space_eolf",
			pos:  position{line: 2217, col: 1, offset: 72187},
			expr: &seqExpr{
				pos: position{line: 2217, col: 23, offset: 72209},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2217, col: 23, offset: 72209},
						expr: &choiceExpr{
							pos: position{line: 2217, col: 24, offset: 72210},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2217, col: 24, offset: 72210},
									expr: &ruleRefExpr{
										pos:  position{line: 2217, col: 24, offset: 72210},
										name: "space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2217, col: 33, offset: 72219},
									name: "comment",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2217, col: 43, offset: 72229},
						name: "eolf",
					},
				},
			},
		},
		{
			name: "directive",
			pos:  position{line: 2221, col: 1, offset: 72335},
			expr: &choiceExpr{
				pos: position{line: 2222, col: 6, offset: 72350},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2222, col: 6, offset: 72350},
						name: "comment",
					},
					&ruleRefExpr{
						pos:  position{line: 2223, col: 5, offset: 72362},
						name: "extension_tag",
					},
					&ruleRefExpr{
						pos:  position{line: 2224, col: 5, offset: 72380},
						name: "tplarg_or_template",
					},
					&actionExpr{
						pos: position{line: 2225, col: 5, offset: 72403},
						run: (*parser).callondirective5,
						expr: &seqExpr{
							pos: position{line: 2225, col: 5, offset: 72403},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2225, col: 5, offset: 72403},
									expr: &litMatcher{
										pos:        position{line: 2225, col: 7, offset: 72405},
										val:        "-{",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 2225, col: 12, offset: 72410},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 2225, col: 14, offset: 72412},
										name: "lang_variant_or_tpl",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2226, col: 5, offset: 72467},
						run: (*parser).callondirective11,
						expr: &seqExpr{
							pos: position{line: 2226, col: 5, offset: 72467},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2226, col: 5, offset: 72467},
									expr: &litMatcher{
										pos:        position{line: 2226, col: 7, offset: 72469},
										val:        "&",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 2226, col: 11, offset: 72473},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 2226, col: 13, offset: 72475},
										name: "htmlentity",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2227, col: 5, offset: 72521},
						name: "include_limits",
					},
				},
			},
		},
		{
			name: "wikilink_preprocessor_text",
			pos:  position{line: 2229, col: 1, offset: 72537},
			expr: &actionExpr{
				pos: position{line: 2230, col: 6, offset: 72569},
				run: (*parser).callonwikilink_preprocessor_text1,
				expr: &labeledExpr{
					pos:   position{line: 2230, col: 6, offset: 72569},
					label: "r",
					expr: &oneOrMoreExpr{
						pos: position{line: 2230, col: 8, offset: 72571},
						expr: &choiceExpr{
							pos: position{line: 2230, col: 10, offset: 72573},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2230, col: 10, offset: 72573},
									expr: &charClassMatcher{
										pos:        position{line: 2230, col: 10, offset: 72573},
										val:        "[^<[{\\n\\r\\t|!\\]}{ &-]",
										chars:      []rune{'<', '[', '{', '\n', '\r', '\t', '|', '!', ']', '}', '{', ' ', '&', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2232, col: 11, offset: 72659},
									run: (*parser).callonwikilink_preprocessor_text7,
									expr: &seqExpr{
										pos: position{line: 2232, col: 11, offset: 72659},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2232, col: 11, offset: 72659},
												expr: &ruleRefExpr{
													pos:  position{line: 2232, col: 12, offset: 72660},
													name: "inline_breaks",
												},
											},
											&labeledExpr{
												pos:   position{line: 2232, col: 26, offset: 72674},
												label: "wr",
												expr: &choiceExpr{
													pos: position{line: 2232, col: 31, offset: 72679},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2232, col: 31, offset: 72679},
															name: "directive",
														},
														&seqExpr{
															pos: position{line: 2232, col: 45, offset: 72693},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 2232, col: 45, offset: 72693},
																	expr: &litMatcher{
																		pos:        position{line: 2232, col: 46, offset: 72694},
																		val:        "]]",
																		ignoreCase: false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2232, col: 53, offset: 72701},
																	alternatives: []interface{}{
																		&ruleRefExpr{
																			pos:  position{line: 2232, col: 53, offset: 72701},
																			name: "text_char",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2232, col: 65, offset: 72713},
																			val:        "[!<}\\]\\n\\r-]",
																			chars:      []rune{'!', '<', '}', ']', '\n', '\r', '-'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "extlink_preprocessor_text",
			pos:  position{line: 2240, col: 1, offset: 72854},
			expr: &choiceExpr{
				pos: position{line: 2243, col: 6, offset: 72977},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2243, col: 6, offset: 72977},
						run: (*parser).callonextlink_preprocessor_text2,
						expr: &seqExpr{
							pos: position{line: 2243, col: 6, offset: 72977},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2243, col: 6, offset: 72977},
									run: (*parser).callonextlink_preprocessor_text4,
								},
								&labeledExpr{
									pos:   position{line: 2250, col: 3, offset: 73186},
									label: "r",
									expr: &oneOrMoreExpr{
										pos: position{line: 2250, col: 5, offset: 73188},
										expr: &choiceExpr{
											pos: position{line: 2250, col: 7, offset: 73190},
											alternatives: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2250, col: 7, offset: 73190},
													expr: &charClassMatcher{
														pos:        position{line: 2250, col: 7, offset: 73190},
														val:        "[^'<~[{\\n\\r|!\\]}\\t&=\"' \\u00A0\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000-]",
														chars:      []rune{'\'', '<', '~', '[', '{', '\n', '\r', '|', '!', ']', '}', '\t', '&', '=', '"', '\'', ' ', '\u00a0', '\u1680', '\u180e', '\u202f', '\u205f', '\u3000', '-'},
														ranges:     []rune{'\u2000', '\u200a'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&actionExpr{
													pos: position{line: 2251, col: 5, offset: 73270},
													run: (*parser).callonextlink_preprocessor_text10,
													expr: &seqExpr{
														pos: position{line: 2251, col: 5, offset: 73270},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 2251, col: 5, offset: 73270},
																expr: &ruleRefExpr{
																	pos:  position{line: 2251, col: 6, offset: 73271},
																	name: "inline_breaks",
																},
															},
															&labeledExpr{
																pos:   position{line: 2251, col: 20, offset: 73285},
																label: "s",
																expr: &choiceExpr{
																	pos: position{line: 2251, col: 24, offset: 73289},
																	alternatives: []interface{}{
																		&ruleRefExpr{
																			pos:  position{line: 2251, col: 24, offset: 73289},
																			name: "directive",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 2251, col: 36, offset: 73301},
																			name: "no_punctuation_char",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2251, col: 58, offset: 73323},
																			val:        "[&|{-]",
																			chars:      []rune{'&', '|', '{', '-'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&seqExpr{
													pos: position{line: 2255, col: 6, offset: 73428},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2255, col: 6, offset: 73428},
															val:        "[.:,]",
															chars:      []rune{'.', ':', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2255, col: 12, offset: 73434},
															expr: &choiceExpr{
																pos: position{line: 2255, col: 14, offset: 73436},
																alternatives: []interface{}{
																	&ruleRefExpr{
																		pos:  position{line: 2255, col: 14, offset: 73436},
																		name: "space",
																	},
																	&ruleRefExpr{
																		pos:  position{line: 2255, col: 22, offset: 73444},
																		name: "eolf",
																	},
																},
															},
														},
													},
												},
												&seqExpr{
													pos: position{line: 2256, col: 6, offset: 73456},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2256, col: 6, offset: 73456},
															val:        "[']",
															chars:      []rune{'\''},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2256, col: 10, offset: 73460},
															expr: &charClassMatcher{
																pos:        position{line: 2256, col: 11, offset: 73461},
																val:        "[']",
																chars:      []rune{'\''},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 2263, col: 5, offset: 73618},
						run: (*parser).callonextlink_preprocessor_text29,
					},
				},
			},
		},
		{
			name: "attribute_preprocessor_text",
			pos:  position{line: 2272, col: 1, offset: 73962},
			expr: &actionExpr{
				pos: position{line: 2273, col: 6, offset: 73995},
				run: (*parser).callonattribute_preprocessor_text1,
				expr: &labeledExpr{
					pos:   position{line: 2273, col: 6, offset: 73995},
					label: "r",
					expr: &oneOrMoreExpr{
						pos: position{line: 2273, col: 8, offset: 73997},
						expr: &choiceExpr{
							pos: position{line: 2273, col: 10, offset: 73999},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2273, col: 10, offset: 73999},
									expr: &charClassMatcher{
										pos:        position{line: 2273, col: 10, offset: 73999},
										val:        "[^{}&<|/ \\t\\n\\r\\x0c>-]",
										chars:      []rune{'{', '}', '&', '<', '|', '/', ' ', '\t', '\n', '\r', '\f', '>', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2274, col: 5, offset: 74027},
									run: (*parser).callonattribute_preprocessor_text7,
									expr: &seqExpr{
										pos: position{line: 2274, col: 5, offset: 74027},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2274, col: 5, offset: 74027},
												expr: &ruleRefExpr{
													pos:  position{line: 2274, col: 6, offset: 74028},
													name: "inline_breaks",
												},
											},
											&notExpr{
												pos: position{line: 2275, col: 5, offset: 74046},
												expr: &litMatcher{
													pos:        position{line: 2275, col: 6, offset: 74047},
													val:        "/>",
													ignoreCase: false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2276, col: 5, offset: 74056},
												label: "s",
												expr: &choiceExpr{
													pos: position{line: 2276, col: 9, offset: 74060},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2276, col: 9, offset: 74060},
															name: "directive",
														},
														&charClassMatcher{
															pos:        position{line: 2276, col: 21, offset: 74072},
															val:        "[{}&<|/-]",
															chars:      []rune{'{', '}', '&', '<', '|', '/', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attribute_preprocessor_text_single",
			pos:  position{line: 2284, col: 1, offset: 74239},
			expr: &actionExpr{
				pos: position{line: 2285, col: 6, offset: 74279},
				run: (*parser).callonattribute_preprocessor_text_single1,
				expr: &labeledExpr{
					pos:   position{line: 2285, col: 6, offset: 74279},
					label: "r",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2285, col: 8, offset: 74281},
						expr: &choiceExpr{
							pos: position{line: 2285, col: 10, offset: 74283},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2285, col: 10, offset: 74283},
									expr: &charClassMatcher{
										pos:        position{line: 2285, col: 10, offset: 74283},
										val:        "[^{}&<|/'>-]",
										chars:      []rune{'{', '}', '&', '<', '|', '/', '\'', '>', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2286, col: 5, offset: 74301},
									run: (*parser).callonattribute_preprocessor_text_single7,
									expr: &seqExpr{
										pos: position{line: 2286, col: 5, offset: 74301},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2286, col: 5, offset: 74301},
												expr: &ruleRefExpr{
													pos:  position{line: 2286, col: 6, offset: 74302},
													name: "inline_breaks",
												},
											},
											&notExpr{
												pos: position{line: 2287, col: 5, offset: 74320},
												expr: &litMatcher{
													pos:        position{line: 2287, col: 6, offset: 74321},
													val:        "/>",
													ignoreCase: false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2288, col: 5, offset: 74330},
												label: "s",
												expr: &choiceExpr{
													pos: position{line: 2288, col: 9, offset: 74334},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2288, col: 9, offset: 74334},
															name: "directive",
														},
														&charClassMatcher{
															pos:        position{line: 2288, col: 21, offset: 74346},
															val:        "[{}&<|/-]",
															chars:      []rune{'{', '}', '&', '<', '|', '/', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attribute_preprocessor_text_double",
			pos:  position{line: 2296, col: 1, offset: 74513},
			expr: &actionExpr{
				pos: position{line: 2297, col: 6, offset: 74553},
				run: (*parser).callonattribute_preprocessor_text_double1,
				expr: &labeledExpr{
					pos:   position{line: 2297, col: 6, offset: 74553},
					label: "r",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2297, col: 8, offset: 74555},
						expr: &choiceExpr{
							pos: position{line: 2297, col: 10, offset: 74557},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2297, col: 10, offset: 74557},
									expr: &charClassMatcher{
										pos:        position{line: 2297, col: 10, offset: 74557},
										val:        "[^{}&<|/\">-]",
										chars:      []rune{'{', '}', '&', '<', '|', '/', '"', '>', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2298, col: 5, offset: 74575},
									run: (*parser).callonattribute_preprocessor_text_double7,
									expr: &seqExpr{
										pos: position{line: 2298, col: 5, offset: 74575},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2298, col: 5, offset: 74575},
												expr: &ruleRefExpr{
													pos:  position{line: 2298, col: 6, offset: 74576},
													name: "inline_breaks",
												},
											},
											&notExpr{
												pos: position{line: 2299, col: 5, offset: 74594},
												expr: &litMatcher{
													pos:        position{line: 2299, col: 6, offset: 74595},
													val:        "/>",
													ignoreCase: false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2300, col: 5, offset: 74604},
												label: "s",
												expr: &choiceExpr{
													pos: position{line: 2300, col: 9, offset: 74608},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2300, col: 9, offset: 74608},
															name: "directive",
														},
														&charClassMatcher{
															pos:        position{line: 2300, col: 21, offset: 74620},
															val:        "[{}&<|/-]",
															chars:      []rune{'{', '}', '&', '<', '|', '/', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_attribute_preprocessor_text",
			pos:  position{line: 2316, col: 1, offset: 75142},
			expr: &actionExpr{
				pos: position{line: 2317, col: 6, offset: 75181},
				run: (*parser).callontable_attribute_preprocessor_text1,
				expr: &labeledExpr{
					pos:   position{line: 2317, col: 6, offset: 75181},
					label: "r",
					expr: &oneOrMoreExpr{
						pos: position{line: 2317, col: 8, offset: 75183},
						expr: &choiceExpr{
							pos: position{line: 2317, col: 10, offset: 75185},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2317, col: 10, offset: 75185},
									expr: &charClassMatcher{
										pos:        position{line: 2317, col: 10, offset: 75185},
										val:        "[^{}&<![ \\t\\n\\r\\x0c|-]",
										chars:      []rune{'{', '}', '&', '<', '!', '[', ' ', '\t', '\n', '\r', '\f', '|', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2318, col: 5, offset: 75213},
									run: (*parser).callontable_attribute_preprocessor_text7,
									expr: &seqExpr{
										pos: position{line: 2318, col: 5, offset: 75213},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2318, col: 5, offset: 75213},
												expr: &ruleRefExpr{
													pos:  position{line: 2318, col: 6, offset: 75214},
													name: "inline_breaks",
												},
											},
											&labeledExpr{
												pos:   position{line: 2318, col: 20, offset: 75228},
												label: "s",
												expr: &choiceExpr{
													pos: position{line: 2318, col: 24, offset: 75232},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2318, col: 24, offset: 75232},
															name: "directive",
														},
														&charClassMatcher{
															pos:        position{line: 2318, col: 36, offset: 75244},
															val:        "[{}&<![-]",
															chars:      []rune{'{', '}', '&', '<', '!', '[', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_attribute_preprocessor_text_single",
			pos:  position{line: 2326, col: 1, offset: 75413},
			expr: &actionExpr{
				pos: position{line: 2327, col: 6, offset: 75459},
				run: (*parser).callontable_attribute_preprocessor_text_single1,
				expr: &labeledExpr{
					pos:   position{line: 2327, col: 6, offset: 75459},
					label: "r",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2327, col: 8, offset: 75461},
						expr: &choiceExpr{
							pos: position{line: 2327, col: 10, offset: 75463},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2327, col: 10, offset: 75463},
									expr: &charClassMatcher{
										pos:        position{line: 2327, col: 10, offset: 75463},
										val:        "[^{}&<!['\\r\\n|-]",
										chars:      []rune{'{', '}', '&', '<', '!', '[', '\'', '\r', '\n', '|', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2328, col: 5, offset: 75485},
									run: (*parser).callontable_attribute_preprocessor_text_single7,
									expr: &seqExpr{
										pos: position{line: 2328, col: 5, offset: 75485},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2328, col: 5, offset: 75485},
												expr: &ruleRefExpr{
													pos:  position{line: 2328, col: 6, offset: 75486},
													name: "inline_breaks",
												},
											},
											&labeledExpr{
												pos:   position{line: 2328, col: 20, offset: 75500},
												label: "s",
												expr: &choiceExpr{
													pos: position{line: 2328, col: 24, offset: 75504},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2328, col: 24, offset: 75504},
															name: "directive",
														},
														&charClassMatcher{
															pos:        position{line: 2328, col: 36, offset: 75516},
															val:        "[{}&<![-]",
															chars:      []rune{'{', '}', '&', '<', '!', '[', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_attribute_preprocessor_text_double",
			pos:  position{line: 2336, col: 1, offset: 75685},
			expr: &actionExpr{
				pos: position{line: 2337, col: 6, offset: 75731},
				run: (*parser).callontable_attribute_preprocessor_text_double1,
				expr: &labeledExpr{
					pos:   position{line: 2337, col: 6, offset: 75731},
					label: "r",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2337, col: 8, offset: 75733},
						expr: &choiceExpr{
							pos: position{line: 2337, col: 10, offset: 75735},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2337, col: 10, offset: 75735},
									expr: &charClassMatcher{
										pos:        position{line: 2337, col: 10, offset: 75735},
										val:        "[^{}&<![\"\\r\\n|-]",
										chars:      []rune{'{', '}', '&', '<', '!', '[', '"', '\r', '\n', '|', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2338, col: 5, offset: 75757},
									run: (*parser).callontable_attribute_preprocessor_text_double7,
									expr: &seqExpr{
										pos: position{line: 2338, col: 5, offset: 75757},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2338, col: 5, offset: 75757},
												expr: &ruleRefExpr{
													pos:  position{line: 2338, col: 6, offset: 75758},
													name: "inline_breaks",
												},
											},
											&labeledExpr{
												pos:   position{line: 2338, col: 20, offset: 75772},
												label: "s",
												expr: &choiceExpr{
													pos: position{line: 2338, col: 24, offset: 75776},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2338, col: 24, offset: 75776},
															name: "directive",
														},
														&charClassMatcher{
															pos:        position{line: 2338, col: 36, offset: 75788},
															val:        "[{}&<![-]",
															chars:      []rune{'{', '}', '&', '<', '!', '[', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "pipe",
			pos:  position{line: 2346, col: 1, offset: 75949},
			expr: &choiceExpr{
				pos: position{line: 2346, col: 9, offset: 75957},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2346, col: 9, offset: 75957},
						val:        "|",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 2346, col: 15, offset: 75963},
						val:        "{{!}}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "pipe_pipe",
			pos:  position{line: 2349, col: 1, offset: 76015},
			expr: &choiceExpr{
				pos: position{line: 2349, col: 14, offset: 76028},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2349, col: 14, offset: 76028},
						val:        "||",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 2349, col: 21, offset: 76035},
						val:        "{{!}}{{!}}",
						ignoreCase: false,
					},
				},
			},
		},
	},
}

func (c *current) onstart1(tlb interface{}) (interface{}, error) {
	n := &html.Node{
		Type: html.DocumentNode,
	}
	addChild(n, tlb)
	if len(c.state) > 0 {
		panic(errors.Errorf("poluted state! %#v", c.state))
	}
	return n, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["tlb"])
}

func (c *current) onredirect13(wl interface{}) (bool, error) {
	/*
	   return wl.length === 1 && wl[0] && wl[0].constructor !== String;
	*/
	return false, nil

}

func (p *parser) callonredirect13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onredirect13(stack["wl"])
}

func (c *current) onredirect1(wl interface{}) (interface{}, error) {
	/*
		    var link = wl[0];
		    if (sp) { rw += sp; }
		    if (c) { rw += c; }
		// Build a redirect token
		    var redirect = new SelfclosingTagTk('mw:redirect',
		// Put 'href' into attributes so it gets template-expanded
		            [Util.lookupKV(link.attribs, 'href')],
		            {
		                src: rw,
		                tsr: tsrOffsets(),
		                linkTk: link,
		            });
		    return redirect;
	*/
	return "todo redirect", nil
}

func (p *parser) callonredirect1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onredirect1(stack["wl"])
}

func (c *current) ontable_attributes4(b interface{}) (interface{}, error) {
	return b, nil
}

func (p *parser) callontable_attributes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attributes4(stack["b"])
}

func (c *current) onredirect_word11() (bool, error) {
	return false, nil /*return env.conf.wiki.getMagicWordMatcher('redirect').test(rw);*/
}

func (p *parser) callonredirect_word11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onredirect_word11()
}

func (c *current) onstart_async7() (bool, error) {
	return false, nil
	/*
		      if (endOffset() === input.length) {
		          emitChunk([ new EOFTk() ]);
		      }
		// terminate the loop
		      return false;
	*/

}

func (p *parser) callonstart_async7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart_async7()
}

func (c *current) ontlb1(b interface{}) (interface{}, error) {
	return b, nil
}

func (p *parser) callontlb1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontlb1(stack["b"])
}

func (c *current) onblock2() (interface{}, error) {
	return "comment_or_includes", nil /*return [r].concat(cil, bl || []);*/
}

func (p *parser) callonblock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock2()
}

func (c *current) onblock17(cm interface{}) (interface{}, error) {
	return cm, nil /*return c;*/
}

func (p *parser) callonblock17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock17(stack["cm"])
}

func (c *current) onblock11(rs interface{}) (interface{}, error) {
	return rs, nil /*return rs;*/
}

func (p *parser) callonblock11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock11(stack["rs"])
}

func (c *current) onblock26(s interface{}) (interface{}, error) {
	return s, nil /*return s;*/
}

func (p *parser) callonblock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock26(stack["s"])
}

func (c *current) onnested_block1(b interface{}) (interface{}, error) {
	return b, nil /*return b;*/
}

func (p *parser) callonnested_block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnested_block1(stack["b"])
}

func (c *current) onnested_block_in_table4() (bool, error) {
	push(c, "tableDataBlock", true)
	return true, nil
	/*
	   return stops.push('tableDataBlock', true);
	*/

}

func (p *parser) callonnested_block_in_table4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnested_block_in_table4()
}

func (c *current) onnested_block_in_table2(b interface{}) (interface{}, error) {
	pop(c, "tableDataBlock")
	return b, nil
	/*
	   stops.pop('tableDataBlock');
	   return b;
	*/

}

func (p *parser) callonnested_block_in_table2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnested_block_in_table2(stack["b"])
}

func (c *current) onnested_block_in_table20() (bool, error) {
	pop(c, "tableDataBlock")
	return false, nil
	/*return stops.pop('tableDataBlock');*/

}

func (p *parser) callonnested_block_in_table20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnested_block_in_table20()
}

func (c *current) onhr7() (interface{}, error) {
	return nil, nil /*return undefined;*/
}

func (p *parser) callonhr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhr7()
}

func (c *current) onhr12() (interface{}, error) {
	return true, nil /*return true;*/
}

func (p *parser) callonhr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhr12()
}

func (c *current) onhr1() (interface{}, error) {
	return &html.Node{
		Type: html.ElementNode,
		Data: "hr",
	}, nil
	/*
	   var dataAttribs = {
	     tsr: tsrOffsets(),
	     lineContent: lineContent,
	   };
	   if (d.length > 0) {
	     dataAttribs.extra_dashes = d.length;
	   }
	   return new SelfclosingTagTk('hr', [], dataAttribs);
	*/

}

func (p *parser) callonhr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhr1()
}

func (c *current) onblock_line12(tl interface{}) (interface{}, error) {
	return tl, nil /*return tl;*/
}

func (p *parser) callonblock_line12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_line12(stack["tl"])
}

func (c *current) onblock_line22(bt, stl interface{}) (interface{}, error) {
	return concat(bt, stl), nil /*return bt.concat(stl);*/
}

func (p *parser) callonblock_line22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_line22(stack["bt"], stack["stl"])
}

func (c *current) onblock_line18(bts interface{}) (interface{}, error) {
	return bts, nil /*return bts;*/
}

func (p *parser) callonblock_line18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_line18(stack["bts"])
}

func (c *current) onblock_line5(st, r interface{}) (interface{}, error) {
	return concat(st, r), nil
	/*
	   return st.concat(r);
	*/

}

func (p *parser) callonblock_line5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_line5(stack["st"], stack["r"])
}

func (c *current) onparagraph1(s1, s2, c1 interface{}) (interface{}, error) {
	n := &html.Node{
		Type: html.ElementNode,
		Data: "p",
	}
	addChild(n, c1)
	return n, nil
}

func (p *parser) callonparagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparagraph1(stack["s1"], stack["s2"], stack["c1"])
}

func (c *current) onbr1() (interface{}, error) {
	return &html.Node{
		Type: html.ElementNode,
		Data: "br",
	}, nil
	/*
	   return s.concat([
	     new SelfclosingTagTk('br', [], { tsr: tsrOffsets() }),
	   ]);
	*/
}

func (p *parser) callonbr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbr1()
}

func (c *current) oninline_breaks1() (bool, error) {
	return inlineBreaks(c)
}

func (p *parser) calloninline_breaks1() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninline_breaks1()
}

func (c *current) oninlineline4(r interface{}) (interface{}, error) {
	return r, nil
}

func (p *parser) calloninlineline4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninlineline4(stack["r"])
}

func (c *current) oninline_element2(r interface{}) (interface{}, error) {
	return r, nil /*return r;*/
}

func (p *parser) calloninline_element2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninline_element2(stack["r"])
}

func (c *current) oninline_element10(r interface{}) (interface{}, error) {
	return r, nil /* return r; */
}

func (p *parser) calloninline_element10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninline_element10(stack["r"])
}

func (c *current) oninline_element16(r interface{}) (interface{}, error) {
	return r, nil /* return r; */
}

func (p *parser) calloninline_element16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninline_element16(stack["r"])
}

func (c *current) oninline_element27(r interface{}) (interface{}, error) {
	return r, nil /* return r; */
}

func (p *parser) calloninline_element27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninline_element27(stack["r"])
}

func (c *current) oninline_element35(r interface{}) (interface{}, error) {
	return r, nil /* return r; */
}

func (p *parser) calloninline_element35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninline_element35(stack["r"])
}

func (c *current) onheading9() (bool, error) {
	inc(c, "h")
	return true, nil /*return stops.inc('h');*/
}

func (p *parser) callonheading9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onheading9()
}

func (c *current) onheading15(ill interface{}) (interface{}, error) {
	return ill, nil
}

func (p *parser) callonheading15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onheading15(stack["ill"])
}

func (c *current) onheading25(s, ce interface{}) (bool, error) {
	return ce != nil || len(concat(s)) > 2, nil
	/*return ce || s.length > 2;*/

}

func (p *parser) callonheading25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onheading25(stack["s"], stack["ce"])
}

func (c *current) onheading7(s, ce, spc interface{}) (interface{}, error) {
	dec(c, "h")
	n := &html.Node{
		Type: html.ElementNode,
		Data: "h" + strconv.Itoa(len(concat(s))),
	}
	addChild(n, []interface{}{ce, spc})
	return n, nil
	/*
		        var c;
		        var e;
		        var level;
		        stops.dec('h');
		        if (ce) {
		            c = ce[0];
		            e = ce[1];
		            level = Math.min(s.length, e.length);
		        } else {
		// split up equal signs into two equal parts, with at least
		// one character in the middle.
		            level = Math.floor((s.length - 1) / 2);
		            c = ['='.repeat(s.length - 2 * level)];
		            s = e = '='.repeat(level);
		        }
		        level = Math.min(6, level);
		// convert surplus equals into text
		        if (s.length > level) {
		            var extras1 = s.substr(0, s.length - level);
		            if (c[0].constructor === String) {
		                c[0] = extras1 + c[0];
		            } else {
		                c.unshift(extras1);
		            }
		        }
		        if (e.length > level) {
		            var extras2 = e.substr(0, e.length - level);
		            var lastElem = lastItem(c);
		            if (lastElem.constructor === String) {
		                c[c.length - 1] += extras2;
		            } else {
		                c.push(extras2);
		            }
		        }

		        var tsr = tsrOffsets('start');
		        tsr[1] += level;
		        return [
		          new TagTk('h' + level, [], { tsr: tsr }),
		        ].concat(c, [
		          new EndTagTk('h' + level, [], { tsr: [endTPos - level, endTPos] }),
		          spc,
		        ]);
	*/

}

func (p *parser) callonheading7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onheading7(stack["s"], stack["ce"], stack["spc"])
}

func (c *current) onheading33() (bool, error) {
	dec(c, "h")
	return false, nil /*stops.dec('h'); return false;*/
}

func (p *parser) callonheading33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onheading33()
}

func (c *current) onheading1(r interface{}) (interface{}, error) {
	return r, nil /*return r;*/

}

func (p *parser) callonheading1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onheading1(stack["r"])
}

func (c *current) oncomment1(c1 interface{}) (interface{}, error) {
	return &html.Node{
		Type: html.CommentNode,
		Data: concat(c1),
	}, nil
	/*
	   var data = DU.encodeComment(c);
	   return [new CommentTk(data, { tsr: tsrOffsets() })];
	*/

}

func (p *parser) calloncomment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment1(stack["c1"])
}

func (c *current) onbehavior_switch1() (interface{}, error) {
	return "behavior_text", nil
	/*
	   if (env.conf.wiki.isMagicWord(bs)) {
	     return [
	       new SelfclosingTagTk('behavior-switch', [ new KV('word', bs) ],
	         { tsr: tsrOffsets(), src: bs, magicSrc: bs }
	       ),
	     ];
	   } else {
	     return [ bs ];
	   }
	*/

}

func (p *parser) callonbehavior_switch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbehavior_switch1()
}

func (c *current) onautolink3() (bool, error) {
	return true, nil /*return stops.onStack('extlink');*/
}

func (p *parser) callonautolink3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautolink3()
}

func (c *current) onautolink4() (bool, error) {
	return true, nil /*return /\w/.test(input[endOffset() - 1] || '');*/
}

func (p *parser) callonautolink4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautolink4()
}

func (c *current) onautolink7(target interface{}) (interface{}, error) {
	return "autourl", nil
	/*
	   var res = [new SelfclosingTagTk('urllink', [new KV('href', target)], { tsr: tsrOffsets() })];
	     return res;
	*/

}

func (p *parser) callonautolink7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautolink7(stack["target"])
}

func (c *current) onautolink1(r interface{}) (interface{}, error) {
	return r, nil /*return r;*/
}

func (p *parser) callonautolink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautolink1(stack["r"])
}

func (c *current) onextlink3() (bool, error) {
	return true, nil /* return stops.onStack('extlink'); */
}

func (p *parser) callonextlink3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink3()
}

func (c *current) onextlink8() (bool, error) {
	return false, nil /*return stops.push('extlink', return true, nil);*/
}

func (p *parser) callonextlink8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink8()
}

func (c *current) onextlink17() (bool, error) {
	return false, nil /*
		// Protocol must be valid and there ought to be at least one
		// post-protocol character.  So strip last char off target
		// before testing protocol.
		          var flat = tu.flattenString([addr, target]);
		          if (Array.isArray(flat)) {
		// There are templates present, alas.
		             return flat.length > 0;
		          }
		          return Util.isProtocolValid(flat.slice(0, -1), env);
	*/

}

func (p *parser) callonextlink17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink17()
}

func (c *current) onextlink5() (interface{}, error) {
	return nil, nil
	/*
	   stops.pop('extlink');
	   return [
	       new SelfclosingTagTk('extlink', [
	           new KV('href', tu.flattenString([addr, target])),
	           new KV('mw:content', content || ''),
	           new KV('spaces', sp),
	       ], {
	           targetOff: targetOff,
	           tsr: tsrOffsets(),
	           contentOffsets: [targetOff, endOffset() - 1],
	       }),
	   ];
	*/

}

func (p *parser) callonextlink5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink5()
}

func (c *current) onextlink27() (bool, error) {
	return false, nil /*return stops.pop('extlink');*/
}

func (p *parser) callonextlink27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink27()
}

func (c *current) onextlink1() (interface{}, error) {
	return nil, nil /*return r;*/
}

func (p *parser) callonextlink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink1()
}

func (c *current) onautoref1() (interface{}, error) {
	return nil, nil
	/*
	   var base_urls = {
	     'RFC': 'https://tools.ietf.org/html/rfc%s',
	     'PMID': '//www.ncbi.nlm.nih.gov/pubmed/%s?dopt=Abstract',
	   };
	   return [
	       new SelfclosingTagTk('extlink', [
	          new KV('href', tu.sprintf(base_urls[ref], identifier)),
	          new KV('mw:content', tu.flattenString([ref, sp, identifier])),
	          new KV('typeof', 'mw:ExtLink/' + ref),
	       ],
	       { stx: "magiclink", tsr: tsrOffsets() }),
	   ];
	*/
}

func (p *parser) callonautoref1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautoref1()
}

func (c *current) onisbn10() (interface{}, error) {
	return nil, nil /* return s; */
}

func (p *parser) callonisbn10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onisbn10()
}

func (c *current) onisbn23() (interface{}, error) {
	return nil, nil
	/*
		// Convert isbn token-and-entity array to stripped string.
		        return tu.flattenStringlist(isbn).filter(function(e) {
		          return e.constructor === String;
		        }).join('').replace(/[^\dX]/ig, '').toUpperCase();
	*/

}

func (p *parser) callonisbn23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onisbn23()
}

func (c *current) onisbn25() (bool, error) {
	return false, nil
	/*
		// ISBNs can only be 10 or 13 digits long (with a specific format)
		       return isbncode.length === 10 ||
		             (isbncode.length === 13 && /^97[89]/.test(isbncode));
	*/

}

func (p *parser) callonisbn25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onisbn25()
}

func (c *current) onisbn1() (interface{}, error) {
	return nil, nil
	/*
	   return [
	     new SelfclosingTagTk('extlink', [
	        new KV('href', 'Special:BookSources/' + isbncode),
	        new KV('mw:content', tu.flattenString(['ISBN', sp, isbn])),
	        new KV('typeof', 'mw:WikiLink/ISBN'),
	     ],
	     { stx: "magiclink", tsr: tsrOffsets() }),
	   ];
	*/
}

func (p *parser) callonisbn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onisbn1()
}

func (c *current) onurl_protocol3() (bool, error) {
	return false, nil /* return Util.isProtocolValid(input.substr(endOffset()), env); */
}

func (p *parser) callonurl_protocol3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl_protocol3()
}

func (c *current) onurl_protocol1() (interface{}, error) {
	return nil, nil /* return p;*/
}

func (p *parser) callonurl_protocol1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl_protocol1()
}

func (c *current) onurl12(c1 interface{}) (interface{}, error) {
	return c1, nil /*return c; */
}

func (p *parser) callonurl12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl12(stack["c1"])
}

func (c *current) onurl18(s interface{}) (interface{}, error) {
	return s, nil /* return s; */
}

func (p *parser) callonurl18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl18(stack["s"])
}

func (c *current) onurl38(he interface{}) (interface{}, error) {
	return he, nil /* return he; */
}

func (p *parser) callonurl38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl38(stack["he"])
}

func (c *current) onurl23(r interface{}) (interface{}, error) {
	return r, nil /*return r;*/
}

func (p *parser) callonurl23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl23(stack["r"])
}

func (c *current) onurl45(proto, addr, path interface{}) (bool, error) {
	return false, nil /*return addr.length > 0 || path.length > 0;*/
}

func (p *parser) callonurl45() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl45(stack["proto"], stack["addr"], stack["path"])
}

func (c *current) onurl1(proto, addr, path interface{}) (interface{}, error) {
	return []interface{}{proto, addr, path}, nil
	/*
	   return tu.flattenString([proto, addr].concat(path));
	*/
}

func (p *parser) callonurl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl1(stack["proto"], stack["addr"], stack["path"])
}

func (c *current) onautourl4() (bool, error) {
	return true, nil /*return stops.push('autourl', { sawLParen: false }); */
}

func (p *parser) callonautourl4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl4()
}

func (c *current) onautourl15(c1 interface{}) (interface{}, error) {
	return c1, nil /* return c; */
}

func (p *parser) callonautourl15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl15(stack["c1"])
}

func (c *current) onautourl23() (interface{}, error) {
	return "(", nil /* stops.onStack('autourl').sawLParen = true; return "("; */
}

func (p *parser) callonautourl23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl23()
}

func (c *current) onautourl37() (bool, error) {
	return false, nil /* return /^[<>\u00A0]$/.test(rhe); */
}

func (p *parser) callonautourl37() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl37()
}

func (c *current) onautourl40(he interface{}) (interface{}, error) {
	return he, nil /* return he; */
}

func (p *parser) callonautourl40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl40(stack["he"])
}

func (c *current) onautourl32(r interface{}) (interface{}, error) {
	return r, nil /* return r; */
}

func (p *parser) callonautourl32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl32(stack["r"])
}

func (c *current) onautourl7() (interface{}, error) {
	return "TODO: autourl", nil
	/*
	   // as in Parser.php::makeFreeExternalLink, we're going to
	   // yank trailing punctuation out of this match.
	       var url = tu.flattenStringlist([proto, addr].concat(path));
	   // only need to look at last element; HTML entities are strip-proof.
	       var last = lastItem(url);
	       var trim = 0;
	       if (last && last.constructor === String) {
	         var strip = ',;\\.:!?';
	         if (!stops.onStack('autourl').sawLParen) {
	           strip += ')';
	         }
	         strip = new RegExp('[' + JSUtils.escapeRegExp(strip) + ']*$');
	         trim = strip.exec(last)[0].length;
	         url[url.length - 1] = last.slice(0, last.length - trim);
	       }
	       url = tu.flattenStringlist(url);
	       if (url.length === 1 && url[0].constructor === String && url[0].length <= proto.length) {
	         return null; // ensure we haven't stripped everything: T106945
	       }
	       peg$currPos -= trim;
	       stops.pop('autourl');
	       return url;
	*/
}

func (p *parser) callonautourl7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl7()
}

func (c *current) onautourl47() (bool, error) {
	return false, nil /* return r !== null; */
}

func (p *parser) callonautourl47() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl47()
}

func (c *current) onautourl2() (interface{}, error) {
	return nil, nil /*return r; */
}

func (p *parser) callonautourl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl2()
}

func (c *current) onautourl48() (bool, error) {
	return false, nil /*return stops.pop('autourl');*/
}

func (p *parser) callonautourl48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl48()
}

func (c *current) ontplarg_or_template1(t interface{}) (interface{}, error) {
	return t, nil /*return t;*/
}

func (p *parser) callontplarg_or_template1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template1(stack["t"])
}

func (c *current) ontplarg_or_template_guarded4() (bool, error) {
	inc(c, "templatedepth")
	return true, nil /* return stops.inc('templatedepth');*/
}

func (p *parser) callontplarg_or_template_guarded4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded4()
}

func (c *current) ontplarg_or_template_guarded7(a interface{}) (interface{}, error) {
	return a, nil /*return a;*/
}

func (p *parser) callontplarg_or_template_guarded7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded7(stack["a"])
}

func (c *current) ontplarg_or_template_guarded23(a, b interface{}) (interface{}, error) {
	return concat(a, b), nil /*return [a].concat(b);*/
}

func (p *parser) callontplarg_or_template_guarded23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded23(stack["a"], stack["b"])
}

func (c *current) ontplarg_or_template_guarded37(a, b interface{}) (interface{}, error) {
	return concat(a, b), nil /*return [a].concat(b);*/
}

func (p *parser) callontplarg_or_template_guarded37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded37(stack["a"], stack["b"])
}

func (c *current) ontplarg_or_template_guarded50(a interface{}) (interface{}, error) {
	return a, nil /*return a;*/
}

func (p *parser) callontplarg_or_template_guarded50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded50(stack["a"])
}

func (c *current) ontplarg_or_template_guarded2(r interface{}) (interface{}, error) {
	dec(c, "templatedepth")
	return r, nil
	/*
	   stops.dec('templatedepth');
	   return r;
	*/

}

func (p *parser) callontplarg_or_template_guarded2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded2(stack["r"])
}

func (c *current) ontplarg_or_template_guarded53() (bool, error) {
	dec(c, "templatedepth")
	return false, nil /*return stops.dec('templatedepth');*/
}

func (p *parser) callontplarg_or_template_guarded53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded53()
}

func (c *current) ontemplate3() (interface{}, error) {
	push(c, "preproc" /*{{*/, "}}")
	return nil, nil
	/* return stops.push('preproc', / * {{ * /"}}"); */

}

func (p *parser) callontemplate3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate3()
}

func (c *current) ontemplate1(t interface{}) (interface{}, error) {
	return t, nil /* stops.popTo('preproc', stopLen); return t; */
}

func (p *parser) callontemplate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate1(stack["t"])
}

func (c *current) onbroken_template5() (bool, error) {
	return false, nil /* return stops.push('preproc', 'broken'); */
}

func (p *parser) callonbroken_template5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_template5()
}

func (c *current) onbroken_template1(t interface{}) (interface{}, error) {
	return t, nil /* return t; */
}

func (p *parser) callonbroken_template1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_template1(stack["t"])
}

func (c *current) ontemplate_preproc19() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontemplate_preproc19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_preproc19()
}

func (c *current) ontemplate_preproc24(v interface{}) (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontemplate_preproc24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_preproc24(stack["v"])
}

func (c *current) ontemplate_preproc17(v interface{}) (interface{}, error) {
	return v, nil /* return new KV('', tu.flattenIfArray(v), [p0, p0, p0,
	   p]);*/

}

func (p *parser) callontemplate_preproc17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_preproc17(stack["v"])
}

func (c *current) ontemplate_preproc10(r interface{}) (interface{}, error) {
	return r, nil /* return r; */
}

func (p *parser) callontemplate_preproc10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_preproc10(stack["r"])
}

func (c *current) ontemplate_preproc2(target interface{}) (interface{}, error) {
	return target, nil
	/*
		// Insert target as first positional attribute, so that it can be
		// generically expanded. The TemplateHandler then needs to shift it out
		// again.
		      params.unshift(new KV(tu.flattenIfArray(target.tokens), '', target.srcOffsets));
		      var obj = new SelfclosingTagTk('template', params, { tsr: tsrOffsets(), src: text() });
		      return obj;
	*/

}

func (p *parser) callontemplate_preproc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_preproc2(stack["target"])
}

func (c *current) ontplarg5() (bool, error) {
	return false, nil /*return stops.popTo('preproc', stopLen); */
}

func (p *parser) callontplarg5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg5()
}

func (c *current) ontplarg1(t interface{}) (interface{}, error) {
	return t, nil /* stops.popTo('preproc', stopLen); return t; */
}

func (p *parser) callontplarg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg1(stack["t"])
}

func (c *current) ontplarg_preproc17() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontplarg_preproc17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_preproc17()
}

func (c *current) ontplarg_preproc21() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontplarg_preproc21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_preproc21()
}

func (c *current) ontplarg_preproc15() (interface{}, error) {
	return nil, nil /* return {return nil, nil tokens: v, srcOffsets: [p0, p1] }; */
}

func (p *parser) callontplarg_preproc15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_preproc15()
}

func (c *current) ontplarg_preproc9() (interface{}, error) {
	return nil, nil /* return r; */
}

func (p *parser) callontplarg_preproc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_preproc9()
}

func (c *current) ontplarg_preproc1(target, params interface{}) (interface{}, error) {
	return concat(target, params), nil
	/*
		      params = params.map(function(o) {
		        var s = o.srcOffsets;
		        return new KV('', tu.flattenIfArray(o.tokens), [s[0], s[0], s[0], s[1]]);
		      });
		      if (target === null) { target = { tokens: '', srcOffsets: [p, p, p, p] }; }
		// Insert target as first positional attribute, so that it can be
		// generically expanded. The TemplateHandler then needs to shift it out
		// again.
		      params.unshift(new KV(tu.flattenIfArray(target.tokens), '', target.srcOffsets));
		      var obj = new SelfclosingTagTk('templatearg', params, { tsr: tsrOffsets(), src: text() });
		      return obj;
	*/

}

func (p *parser) callontplarg_preproc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_preproc1(stack["target"], stack["params"])
}

func (c *current) ontemplate_param7(tpv interface{}) (interface{}, error) {
	return tpv, nil
	/*
	   return { kEndPos: kEndPos, vStartPos: vStartPos, value: (tpv && tpv.tokens) || [] };
	*/

}

func (p *parser) callontemplate_param7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param7(stack["tpv"])
}

func (c *current) ontemplate_param2(val interface{}) (interface{}, error) {
	return val, nil
	/*
	   if (val !== null) {
	       if (val.value !== null) {
	         return new KV(name, tu.flattenIfArray(val.value), [startOffset(), val.kEndPos, val.vStartPos, endOffset()]);
	       } else {
	         return new KV(tu.flattenIfArray(name), '', [startOffset(), val.kEndPos, val.vStartPos, endOffset()]);
	       }
	   } else {
	     return new KV('', tu.flattenIfArray(name), [startOffset(), startOffset(), startOffset(), endOffset()]);
	   }
	*/

}

func (p *parser) callontemplate_param2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param2(stack["val"])
}

func (c *current) ontemplate_param15() (interface{}, error) {
	return nil, nil
	/*
	   return new KV('', '', [startOffset(), startOffset(), startOffset(), endOffset()]);
	*/

}

func (p *parser) callontemplate_param15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param15()
}

func (c *current) ontemplate_param_name4() (bool, error) {
	push(c, "equal", true)
	return true, nil /*return stops.push('equal', true); */
}

func (p *parser) callontemplate_param_name4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_name4()
}

func (c *current) ontemplate_param_name8() (interface{}, error) {
	return "", nil /* return ''; */
}

func (p *parser) callontemplate_param_name8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_name8()
}

func (c *current) ontemplate_param_name2(tpt interface{}) (interface{}, error) {
	pop(c, "equal")
	return tpt, nil
	/*
	   stops.pop('equal');
	   return tpt;
	*/

}

func (p *parser) callontemplate_param_name2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_name2(stack["tpt"])
}

func (c *current) ontemplate_param_name11() (bool, error) {
	pop(c, "equal")
	return false, nil
	/* return stops.pop('equal'); */

}

func (p *parser) callontemplate_param_name11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_name11()
}

func (c *current) ontemplate_param_value4() (bool, error) {
	push(c, "equal", false)
	return true, nil /*return stops.push('equal', false); */
}

func (p *parser) callontemplate_param_value4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_value4()
}

func (c *current) ontemplate_param_value2(tpt interface{}) (interface{}, error) {
	pop(c, "equal")
	return tpt, nil
	/*
	   stops.pop('equal');
	   return { tokens: tpt, srcOffsets: tsrOffsets() };
	*/

}

func (p *parser) callontemplate_param_value2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_value2(stack["tpt"])
}

func (c *current) ontemplate_param_value7() (bool, error) {
	pop(c, "equal")
	return false, nil
	/* return stops.pop('equal'); */

}

func (p *parser) callontemplate_param_value7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_value7()
}

func (c *current) ontemplate_param_text4() (bool, error) {
	push(c, "table", false)
	push(c, "extlink", false)
	push(c, "templateArg", true)
	push(c, "tableCellArg", false)
	inc(c, "template")
	return true, nil
	/*
	  // re-enable tables within template parameters
	        stops.push('table', false);
	        stops.push('extlink', false);
	        stops.push('templateArg', true);
	        stops.push('tableCellArg', false);
	        return stops.inc('template');
	*/

}

func (p *parser) callontemplate_param_text4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_text4()
}

func (c *current) ontemplate_param_text2(il interface{}) (interface{}, error) {
	pop(c, "table")
	pop(c, "extlink")
	pop(c, "templateArg")
	pop(c, "tableCellArg")
	dec(c, "template")
	return il, nil
	/*
		        stops.pop('table');
		        stops.pop('extlink');
		        stops.pop('templateArg');
		        stops.pop('tableCellArg');
		        stops.dec('template');
		// il is guaranteed to be an array -- so, tu.flattenIfArray will
		// always return an array
		        var r = tu.flattenIfArray(il);
		        if (r.length === 1 && r[0].constructor === String) {
		            r = r[0];
		        }
		        return r;
	*/

}

func (p *parser) callontemplate_param_text2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_text2(stack["il"])
}

func (c *current) ontemplate_param_text10() (bool, error) {
	pop(c, "table")
	pop(c, "extlink")
	pop(c, "templateArg")
	pop(c, "tableCellArg")
	dec(c, "template")
	return false, nil
	/*
	   stops.pop('table');
	   stops.pop('extlink');
	   stops.pop('templateArg');
	   stops.pop('tableCellArg');
	   return stops.dec('template');
	*/

}

func (p *parser) callontemplate_param_text10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_text10()
}

func (c *current) onlang_variant_or_tpl2(a interface{}) (interface{}, error) {
	return a, nil /* return a; */
}

func (p *parser) callonlang_variant_or_tpl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_or_tpl2(stack["a"])
}

func (c *current) onlang_variant_or_tpl16(a, b interface{}) (interface{}, error) {
	return concat(a, b), nil /*return [a].concat(b);*/
}

func (p *parser) callonlang_variant_or_tpl16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_or_tpl16(stack["a"], stack["b"])
}

func (c *current) onlang_variant_or_tpl29(a, b interface{}) (interface{}, error) {
	return concat(a, b), nil /* return [a].concat(b); */
}

func (p *parser) callonlang_variant_or_tpl29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_or_tpl29(stack["a"], stack["b"])
}

func (c *current) onlang_variant_or_tpl43(a interface{}) (interface{}, error) {
	return a, nil /*return a; */
}

func (p *parser) callonlang_variant_or_tpl43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_or_tpl43(stack["a"])
}

func (c *current) onbroken_lang_variant3() (bool, error) {
	return true, nil /*return stops.push('preproc', 'broken'); */
}

func (p *parser) callonbroken_lang_variant3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_lang_variant3()
}

func (c *current) onbroken_lang_variant1(r interface{}) (interface{}, error) {
	return r, nil /*return r; */
}

func (p *parser) callonbroken_lang_variant1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_lang_variant1(stack["r"])
}

func (c *current) onlang_variant4() (interface{}, error) {
	return nil, nil /*return stops.push('preproc', /* -{ * / '}-'); */
}

func (p *parser) callonlang_variant4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant4()
}

func (c *current) onlang_variant9() (bool, error) {
	return false, nil /*return stops.popTo('preproc', stopLen); */
}

func (p *parser) callonlang_variant9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant9()
}

func (c *current) onlang_variant2(lv interface{}) (interface{}, error) {
	return lv, nil /*stops.popTo('preproc', stopLen); return lv; */
}

func (p *parser) callonlang_variant2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant2(stack["lv"])
}

func (c *current) onlang_variant_preproc3() (interface{}, error) {
	return nil, nil /* return startOffset(); */
}

func (p *parser) callonlang_variant_preproc3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc3()
}

func (c *current) onlang_variant_preproc8() (bool, error) {
	return false, nil /* return env.langConverterEnabled(); */
}

func (p *parser) callonlang_variant_preproc8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc8()
}

func (c *current) onlang_variant_preproc6(ff interface{}) (interface{}, error) {
	return ff, nil
	/*
		// Avoid mutating cached expression results
		         ff = Util.clone(ff, true);
		// if flags contains 'R', then don't treat ; or : specially inside.
		         if (ff.flags) {
		           ff.raw = ff.flags.has('R') || ff.flags.has('N');
		         } else if (ff.variants) {
		           ff.raw = true;
		         }
		         return ff;
	*/

}

func (p *parser) callonlang_variant_preproc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc6(stack["ff"])
}

func (c *current) onlang_variant_preproc13() (bool, error) {
	return false, nil /*return !env.langConverterEnabled(); */
}

func (p *parser) callonlang_variant_preproc13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc13()
}

func (c *current) onlang_variant_preproc11() (interface{}, error) {
	return nil, nil
	/*
		// if language converter not enabled, don't try to parse inside.
		         return { raw: true };
	*/

}

func (p *parser) callonlang_variant_preproc11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc11()
}

func (c *current) onlang_variant_preproc18() (bool, error) {
	return false, nil /*return f.raw; */
}

func (p *parser) callonlang_variant_preproc18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc18()
}

func (c *current) onlang_variant_preproc16(lv interface{}) (interface{}, error) {
	return lv, nil /* return [{ text: lv }]; */
}

func (p *parser) callonlang_variant_preproc16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc16(stack["lv"])
}

func (c *current) onlang_variant_preproc23() (bool, error) {
	return false, nil /* return !f.raw; */
}

func (p *parser) callonlang_variant_preproc23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc23()
}

func (c *current) onlang_variant_preproc21(lv interface{}) (interface{}, error) {
	return lv, nil /* return lv; */
}

func (p *parser) callonlang_variant_preproc21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc21(stack["lv"])
}

func (c *current) onlang_variant_preproc27() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callonlang_variant_preproc27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc27()
}

func (c *current) onlang_variant_preproc1() (interface{}, error) {
	return "TODO lang_variant_preproc", nil
	/*

		      if (!env.langConverterEnabled()) {
		        return [ "-{", ts[0].text.tokens, "}-" ];
		      }
		      var lvsrc = input.substring(lv0, lv1);
		      var attribs = [];

		// Do a deep clone since we may be destructively modifying
		// (the `t[fld] = name;` below) the result of a cached expression
		      ts = Util.clone(ts, true);

		      ts.forEach(function(t) {
		// move token strings into KV attributes so that they are
		// properly expanded by early stages of the token pipeline
		        ['text','from','to'].forEach(function(fld) {
		          if (t[fld] === undefined) { return; }
		          var name = 'mw:lv' + attribs.length;
		          attribs.push(new KV(name, t[fld].tokens, t[fld].srcOffsets));
		          t[fld] = name;
		        });
		      });
		      return [
		        new SelfclosingTagTk(
		          'language-variant',
		           attribs,
		           {return nil, nil
		             tsr: [lv0, lv1],
		             src: lvsrc,
		             flags: f.flags && Array.from(f.flags).sort(),
		             variants: f.variants && Array.from(f.variants).sort(),
		             original: f.original,
		             flagSp: f.sp,
		             texts: ts,
		           }),
		      ];
	*/

}

func (p *parser) callonlang_variant_preproc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc1()
}

func (c *current) onopt_lang_variant_flags4(ff interface{}) (interface{}, error) {
	return ff, nil /* return ff; */
}

func (p *parser) callonopt_lang_variant_flags4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopt_lang_variant_flags4(stack["ff"])
}

func (c *current) onopt_lang_variant_flags1(f interface{}) (interface{}, error) {
	return f, nil
	/*
		// Collect & separate flags and variants into a set and ordered list
		    var flags = new Set();
		    var variants = new Set();
		    var flagList = [];
		    var flagSpace = [];
		    var variantList = [];
		    var variantSpace = [];
		    var useVariants = false;
		    var internalSp = []; // internal whitespace, for round-tripping
		    if (f !== null) {
		// lang_variant_flags returns arrays in reverse order.
		      f.flags.reverse();
		      f.sp.reverse();
		      var spPtr = 0;
		      f.flags.forEach(function(item) {
		        if (item.flag) {
		          flagSpace.push(f.sp[spPtr++]);
		          flags.add(item.flag);
		          flagList.push(item.flag);
		          flagSpace.push(f.sp[spPtr++]);
		        }
		        if (item.variant) {
		          variantSpace.push(f.sp[spPtr++]);
		          variants.add(item.variant);
		          variantList.push(item.variant);
		          variantSpace.push(f.sp[spPtr++]);
		        }
		      });
		      if (spPtr < f.sp.length) {
		// handle space after a trailing semicolon
		        flagSpace.push(f.sp[spPtr]);
		        variantSpace.push(f.sp[spPtr]);
		      }
		    }
		// Parse flags (this logic is from core/languages/ConverterRule.php
		// in the parseFlags() function)
		    if (flags.size === 0 && variants.size === 0) {
		      flags.add('$S');
		    } else if (flags.has('R')) {
		      flags = new Set(['R']); // remove other flags
		    } else if (flags.has('N')) {
		      flags = new Set(['N']); // remove other flags
		    } else if (flags.has('-')) {
		      flags = new Set(['-']); // remove other flags
		    } else if (flags.has('T') && flags.size === 1) {
		      flags.add('H');
		    } else if (flags.has('H')) {
		// Replace A flag, and remove other flags except T and D
		      var nf = new Set(['$+', 'H']);
		      if (flags.has('T')) { nf.add('T'); }
		      if (flags.has('D')) { nf.add('D'); }
		      flags = nf;
		    } else if (variants.size > 0) {
		      useVariants = true;
		    } else {
		      if (flags.has('A')) {
		        flags.add('$+');
		        flags.add('$S');
		      }
		      if (flags.has('D')) {
		        flags.delete('$S');
		      }
		    }
		    if (useVariants) {
		      return { variants: variants, original: variantList, sp: variantSpace };
		    } else {
		      return { flags: flags, original: flagList, sp: flagSpace };
		    }
	*/

}

func (p *parser) callonopt_lang_variant_flags1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopt_lang_variant_flags1(stack["f"])
}

func (c *current) onlang_variant_flags2() (interface{}, error) {
	return nil, nil
	/*
		    var r = more && more[1] ? more[1] : { sp: [], flags: [] };
		// Note that sp and flags are in reverse order, since we're using
		// right recursion and want to push instead of unshift.
		    r.sp.push(sp2.join(''));
		    r.sp.push(sp1.join(''));
		    r.flags.push(f);
		    return r;
	*/

}

func (p *parser) callonlang_variant_flags2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_flags2()
}

func (c *current) onlang_variant_flags14() (interface{}, error) {
	return nil, nil
	/*
	   return { sp: [ sp.join('') ], flags: [] };
	*/

}

func (p *parser) callonlang_variant_flags14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_flags14()
}

func (c *current) onlang_variant_flag2() (interface{}, error) {
	return nil, nil /*return { flag: f }; */
}

func (p *parser) callonlang_variant_flag2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_flag2()
}

func (c *current) onlang_variant_flag4() (interface{}, error) {
	return nil, nil /* return { variant: v }; */
}

func (p *parser) callonlang_variant_flag4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_flag4()
}

func (c *current) onlang_variant_flag6() (interface{}, error) {
	return nil, nil /* return { bogus: b.join('') }; /*
	bad flag * /*/
}

func (p *parser) callonlang_variant_flag6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_flag6()
}

func (c *current) onlang_variant_name2() (interface{}, error) {
	return nil, nil /* return h + t.join(''); */
}

func (p *parser) callonlang_variant_name2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_name2()
}

func (c *current) onlang_variant_option_list6() (interface{}, error) {
	return nil, nil /* return oo; */
}

func (p *parser) callonlang_variant_option_list6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_option_list6()
}

func (c *current) onlang_variant_option_list2() (interface{}, error) {
	return nil, nil
	/*
	   var r = [ o ].concat(rest);
	   if (tr) { r.push({ semi: true, sp: tr[1].join('') }); }
	   return r;
	*/

}

func (p *parser) callonlang_variant_option_list2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_option_list2()
}

func (c *current) onlang_variant_option_list15() (interface{}, error) {
	return nil, nil /* return [{ text: lvtext }]; */
}

func (p *parser) callonlang_variant_option_list15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_option_list15()
}

func (c *current) onlang_variant_option2() (interface{}, error) {
	return nil, nil
	/*
	   return {
	     twoway: true,
	     lang: lang,
	     text: lvtext,
	     sp: [sp1.join(''), sp2.join(''), sp3.join('')]
	   };
	*/

}

func (p *parser) callonlang_variant_option2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_option2()
}

func (c *current) onlang_variant_option15() (interface{}, error) {
	return nil, nil
	/*
	   return {
	     oneway: true,
	     from: from,
	     lang: lang,
	     to: to,
	     sp: [sp1.join(''), sp2.join(''), sp3.join(''), sp4.join('')]
	   };
	*/

}

func (p *parser) callonlang_variant_option15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_option15()
}

func (c *current) onlang_variant_nowiki3() (interface{}, error) {
	return nil, nil /*return startOffset();*/
}

func (p *parser) callonlang_variant_nowiki3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_nowiki3()
}

func (c *current) onlang_variant_nowiki6() (interface{}, error) {
	return nil, nil /* return endOffset();*/
}

func (p *parser) callonlang_variant_nowiki6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_nowiki6()
}

func (c *current) onlang_variant_nowiki1() (interface{}, error) {
	return nil, nil
	/*
	  return { tokens: [ n ], srcOffsets: [start, end] };
	*/
}

func (p *parser) callonlang_variant_nowiki1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_nowiki1()
}

func (c *current) onlang_variant_text3() (interface{}, error) {
	return nil, nil /*return startOffset();*/
}

func (p *parser) callonlang_variant_text3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text3()
}

func (c *current) onlang_variant_text9() (interface{}, error) {
	return nil, nil /*return endOffset();*/
}

func (p *parser) callonlang_variant_text9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text9()
}

func (c *current) onlang_variant_text1() (interface{}, error) {
	return nil, nil /* return { tokens: tokens || [], srcOffsets: [start, end] }; */
}

func (p *parser) callonlang_variant_text1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text1()
}

func (c *current) onlang_variant_text_no_semi4() (bool, error) {
	return false, nil /* return stops.push('semicolon', true); */
}

func (p *parser) callonlang_variant_text_no_semi4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text_no_semi4()
}

func (c *current) onlang_variant_text_no_semi2() (interface{}, error) {
	return nil, nil /* stops.pop('semicolon'); return lvtext; */
}

func (p *parser) callonlang_variant_text_no_semi2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text_no_semi2()
}

func (c *current) onlang_variant_text_no_semi6() (bool, error) {
	return false, nil /* return stops.pop('semicolon'); */
}

func (p *parser) callonlang_variant_text_no_semi6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text_no_semi6()
}

func (c *current) onlang_variant_text_no_semi_or_arrow4() (bool, error) {
	return false, nil /* return stops.push('arrow', true); */
}

func (p *parser) callonlang_variant_text_no_semi_or_arrow4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text_no_semi_or_arrow4()
}

func (c *current) onlang_variant_text_no_semi_or_arrow2() (interface{}, error) {
	return nil, nil /* stops.pop('arrow'); return lvtext; */
}

func (p *parser) callonlang_variant_text_no_semi_or_arrow2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text_no_semi_or_arrow2()
}

func (c *current) onlang_variant_text_no_semi_or_arrow6() (bool, error) {
	return false, nil /* return stops.pop('arrow'); */
}

func (p *parser) callonlang_variant_text_no_semi_or_arrow6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text_no_semi_or_arrow6()
}

func (c *current) onwikilink_content2(lt interface{}) (interface{}, error) {
	return lt, nil
	/*
	   var maybeContent = new KV('mw:maybeContent', lt, [startPos, endOffset()]);
	   maybeContent.vsrc = input.substring(startPos, endOffset());
	   return maybeContent;
	*/

}

func (p *parser) callonwikilink_content2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_content2(stack["lt"])
}

func (c *current) onwikilink3() error {
	push(c, "preproc", "]]")
	return nil
}

func (p *parser) callonwikilink3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink3()
}

func (c *current) onwikilink5() error {
	pop(c, "preproc")
	return nil
}

func (p *parser) callonwikilink5() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink5()
}

func (c *current) onbroken_wikilink5() error {
	push(c, "preproc", "broken")
	return nil
	/* return stops.push('preproc', 'broken'); */

}

func (p *parser) callonbroken_wikilink5() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_wikilink5()
}

func (c *current) onbroken_wikilink12(a interface{}) error {
	pop(c, "preproc")
	return nil
}

func (p *parser) callonbroken_wikilink12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_wikilink12(stack["a"])
}

func (c *current) onbroken_wikilink1(a interface{}) (interface{}, error) {
	return a, nil
	/* return a; */

}

func (p *parser) callonbroken_wikilink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_wikilink1(stack["a"])
}

func (c *current) onwikilink_preproc7(target interface{}) (bool, error) {
	log.Printf("wikilink_preproc %#v", target)
	return true, nil
}

func (p *parser) callonwikilink_preproc7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_preproc7(stack["target"])
}

func (c *current) onwikilink_preproc10(target, lcs interface{}) (bool, error) {
	log.Printf("wikilink_content %#v %s", lcs, c.text)
	spew.Dump(target)
	return true, nil
}

func (p *parser) callonwikilink_preproc10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_preproc10(stack["target"], stack["lcs"])
}

func (c *current) onwikilink_preproc1(target, lcs interface{}) (interface{}, error) {
	targetStr := concat(target)
	n := &html.Node{
		Type: html.ElementNode,
		Data: "a",
		Attr: []html.Attribute{
			{Key: "href", Val: targetStr},
		},
	}
	log.Println(lcs)
	if !addChild(n, lcs) {
		addChild(n, targetStr)
	}
	return n, nil
	/*
		      var pipeTrick = (lcs.length === 1 && lcs[0].v === null);
		      var textTokens = [];
		      if (target === null || pipeTrick) {
		        textTokens.push("[[");
		        if (target) {
		          textTokens.push(target);
		        }
		        lcs.forEach(function(a) {
		// a is a mw:maybeContent attribute
		          textTokens.push("|");
		          if (a.v !== null) { textTokens.push(a.v); }
		        });
		        textTokens.push("]]");
		        return textTokens;
		      }
		      var obj = new SelfclosingTagTk('wikilink');
		      var hrefKV = new KV('href', target);
		      hrefKV.vsrc = input.substring(startOffset() + 2, tpos);
		// XXX: Point to object with path, revision and input information
		// obj.source = input;
		      obj.attribs.push(hrefKV);
		      obj.attribs = obj.attribs.concat(lcs);
		      obj.dataAttribs = {
		          tsr: tsrOffsets(),
		          src: text(),
		      };
		      return [obj];
	*/

}

func (p *parser) callonwikilink_preproc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_preproc1(stack["target"], stack["lcs"])
}

func (c *current) onlink_text4() (bool, error) {
	// Suppress the flag temporarily in this rule to consume the '=' here.
	push(c, "equal", false)
	push(c, "linkdesc", true)
	return true, nil

}

func (p *parser) callonlink_text4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlink_text4()
}

func (c *current) onlink_text15(r interface{}) (interface{}, error) {
	return r, nil
}

func (p *parser) callonlink_text15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlink_text15(stack["r"])
}

func (c *current) onlink_text2(c1 interface{}) (interface{}, error) {
	pop(c, "equal")
	pop(c, "linkdesc")
	return c1, nil

}

func (p *parser) callonlink_text2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlink_text2(stack["c1"])
}

func (c *current) onlink_text33() (bool, error) {
	pop(c, "equal")
	pop(c, "linkdesc")
	return false, nil

}

func (p *parser) callonlink_text33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlink_text33()
}

func (c *current) onquote1() (interface{}, error) {
	return nil, nil
	/*
	   // sequences of four or more than five quotes are assumed to start
	   // with some number of plain-text apostrophes.
	       var plainticks = 0;
	       var result = [];
	       if (quotes.length === 4) {
	           plainticks = 1;
	       } else if (quotes.length > 5) {
	           plainticks = quotes.length - 5;
	       }
	       if (plainticks > 0) {
	           result.push(quotes.substring(0, plainticks));
	       }
	   // mw-quote token Will be consumed in token transforms
	       var tsr = tsrOffsets();
	       tsr[0] += plainticks;
	       var mwq = new SelfclosingTagTk('mw-quote', [], { tsr: tsr });
	       mwq.value = quotes.substring(plainticks);
	       result.push(mwq);
	       return result;
	*/
}

func (p *parser) callonquote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquote1()
}

func (c *current) onextension_tag3() (bool, error) {
	return false, nil /*return !stops.onStack('extTag'); */
}

func (p *parser) callonextension_tag3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextension_tag3()
}

func (c *current) onextension_tag5() (bool, error) {
	return false, nil /* return extToken.name === 'extension'; */
}

func (p *parser) callonextension_tag5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextension_tag5()
}

func (c *current) onextension_tag1() (interface{}, error) {
	return nil, nil /* return extToken; */
}

func (p *parser) callonextension_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextension_tag1()
}

func (c *current) onnowiki4() (bool, error) {
	return false, nil /* return extToken.getAttribute('name') === 'nowiki'; */
}

func (p *parser) callonnowiki4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnowiki4()
}

func (c *current) onnowiki1() (interface{}, error) {
	return nil, nil /* return extToken; */
}

func (p *parser) callonnowiki1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnowiki1()
}

func (c *current) onnowiki_content1(c2 interface{}) (interface{}, error) {
	return c2, nil /* return tu.flattenIfArray(c); */
}

func (p *parser) callonnowiki_content1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnowiki_content1(stack["c2"])
}

func (c *current) onnowiki_text1() (interface{}, error) {
	return nil, nil
	/*
	   var txt = Util.getExtArgInfo(extToken).dict.body.extsrc;
	   return Util.decodeEntities(txt);
	*/

}

func (p *parser) callonnowiki_text1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnowiki_text1()
}

func (c *current) onxmlish_tag4() (bool, error) {
	return false, nil
}

func (p *parser) callonxmlish_tag4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onxmlish_tag4()
}

func (c *current) onxmlish_tag10() (bool, error) {
	return false, nil
}

func (p *parser) callonxmlish_tag10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onxmlish_tag10()
}

func (c *current) onxmlish_tag2() (interface{}, error) {
	return nil, nil
	/*
		        stops.pop('table');
		        stops.pop('tableCellArg');
		        stops.pop('extTag');

		        var lcName = name.toLowerCase();

		// Extension tags don't necessarily have the same semantics as html tags,
		// so don't treat them as void elements.
		        var isVoidElt = Util.isVoidElement(lcName) && !env.conf.wiki.extensionTags.has(lcName);

		// Support </br>
		        if (lcName === 'br' && end) {
		            end = null;
		        }

		        var res = tu.buildXMLTag(name, lcName, attribs, end, !!selfclose || isVoidElt, tsrOffsets());

		// change up data-attribs in one scenario
		// void-elts that aren't self-closed ==> useful for accurate RT-ing
		        if (!selfclose && isVoidElt) {
		            res.dataAttribs.selfClose = undefined;
		            res.dataAttribs.noClose = true;
		        }

		        return maybeExtensionTag(res);
	*/

}

func (p *parser) callonxmlish_tag2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onxmlish_tag2()
}

func (c *current) onxmlish_tag24() (bool, error) {
	return false, nil /* return stops.pop('extTag'); */
}

func (p *parser) callonxmlish_tag24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onxmlish_tag24()
}

func (c *current) onxmlish_tag25() (bool, error) {
	return false, nil /* stops.pop('table'); return stops.pop('tableCellArg'); */
}

func (p *parser) callonxmlish_tag25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onxmlish_tag25()
}

func (c *current) onblock_tag4() (bool, error) {
	// By the time we get to `doTableStuff` in the php parser, we've already
	// safely encoded element attributes. See 55313f4e in core.
	push(c, "table", false)
	push(c, "tableCellArg", false)
	return true, nil

}

func (p *parser) callonblock_tag4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_tag4()
}

func (c *current) onblock_tag10() (bool, error) {
	push(c, "extTag", false)
	return false, nil

}

func (p *parser) callonblock_tag10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_tag10()
}

func (c *current) onblock_tag2() (interface{}, error) {
	pop(c, "table")
	pop(c, "tableCellArg")
	pop(c, "extTag")
	return nil, nil
	/*
	   stops.pop('table');
	   stops.pop('tableCellArg');
	   stops.pop('extTag');
	   var t = tu.buildXMLTag(name, name.toLowerCase(), attribs, end, !!selfclose, tsrOffsets());
	   return [maybeExtensionTag(t)];
	*/

}

func (p *parser) callonblock_tag2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_tag2()
}

func (c *current) onblock_tag22() (bool, error) {
	pop(c, "extTag")
	return false, nil

}

func (p *parser) callonblock_tag22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_tag22()
}

func (c *current) onblock_tag23() (bool, error) {
	pop(c, "table")
	pop(c, "tableCellArg")
	return false, nil

}

func (p *parser) callonblock_tag23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_tag23()
}

func (c *current) ongeneric_newline_attribute5() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callongeneric_newline_attribute5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_newline_attribute5()
}

func (c *current) ongeneric_newline_attribute8() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callongeneric_newline_attribute8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_newline_attribute8()
}

func (c *current) ongeneric_newline_attribute11() (interface{}, error) {
	return nil, nil /* return v; */
}

func (p *parser) callongeneric_newline_attribute11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_newline_attribute11()
}

func (c *current) ongeneric_newline_attribute1() (interface{}, error) {
	return nil, nil
	/*
	   // NB: Keep in sync w/ table_attibute
	       var res;
	   // Encapsulate protected attributes.
	       if (typeof name === 'string') {return nil, nil
	           name = tu.protectAttrs(name);
	       }
	       if (vd !== null) {
	           res = new KV(name, vd.value, [namePos0, namePos, vd.srcOffsets[0], vd.srcOffsets[1]]);
	           res.vsrc = input.substring(vd.srcOffsets[0], vd.srcOffsets[1]);
	       } else {
	           res = new KV(name, '', [namePos0, namePos, namePos, namePos]);
	       }
	       if (Array.isArray(name)) {
	           res.ksrc = input.substring(namePos0, namePos);
	       }
	       return res;
	*/
}

func (p *parser) callongeneric_newline_attribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_newline_attribute1()
}

func (c *current) ontable_attribute4() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontable_attribute4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute4()
}

func (c *current) ontable_attribute7() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontable_attribute7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute7()
}

func (c *current) ontable_attribute10() (interface{}, error) {
	return nil, nil /* return v; */
}

func (p *parser) callontable_attribute10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute10()
}

func (c *current) ontable_attribute1() (interface{}, error) {
	return nil, nil
	/*
	   // NB: Keep in sync w/ generic_newline_attribute
	       var res;
	   // Encapsulate protected attributes.
	       if (typeof name === 'string') {
	           name = tu.protectAttrs(name);
	       }
	       if (vd !== null) {
	           res = new KV(name, vd.value, [namePos0, namePos, vd.srcOffsets[0], vd.srcOffsets[1]]);
	           res.vsrc = input.substring(vd.srcOffsets[0], vd.srcOffsets[1]);
	       } else {
	           res = new KV(name, '', [namePos0, namePos, namePos, namePos]);
	       }
	       if (Array.isArray(name)) {
	           res.ksrc = input.substring(namePos0, namePos);
	       }
	       return res;
	*/
}

func (p *parser) callontable_attribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute1()
}

func (c *current) ongeneric_attribute_name15() (interface{}, error) {
	return nil, nil /*return c;*/
}

func (p *parser) callongeneric_attribute_name15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_attribute_name15()
}

func (c *current) ongeneric_attribute_name9() (interface{}, error) {
	return nil, nil /*return t; */
}

func (p *parser) callongeneric_attribute_name9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_attribute_name9()
}

func (c *current) ongeneric_attribute_name20() (bool, error) {
	return false, nil /* return r.length > 0 || q.length > 0; */
}

func (p *parser) callongeneric_attribute_name20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_attribute_name20()
}

func (c *current) ongeneric_attribute_name1() (interface{}, error) {
	return nil, nil /* return tu.flattenString([q].concat(r)); */
}

func (p *parser) callongeneric_attribute_name1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_attribute_name1()
}

func (c *current) onbroken_table_attribute_name_char1() (interface{}, error) {
	return nil, nil /* return new KV(c, ''); */
}

func (p *parser) callonbroken_table_attribute_name_char1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_table_attribute_name_char1()
}

func (c *current) ontable_attribute_name16() (interface{}, error) {
	return nil, nil /* return ill; */
}

func (p *parser) callontable_attribute_name16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_name16()
}

func (c *current) ontable_attribute_name21() (interface{}, error) {
	return nil, nil /* return c; */
}

func (p *parser) callontable_attribute_name21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_name21()
}

func (c *current) ontable_attribute_name9() (interface{}, error) {
	return nil, nil /* return t; */
}

func (p *parser) callontable_attribute_name9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_name9()
}

func (c *current) ontable_attribute_name28() (bool, error) {
	return false, nil /* return r.length > 0 || q.length > 0; */
}

func (p *parser) callontable_attribute_name28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_name28()
}

func (c *current) ontable_attribute_name1() (interface{}, error) {
	return nil, nil /* return tu.flattenString([q].concat(r)); */
}

func (p *parser) callontable_attribute_name1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_name1()
}

func (c *current) ongeneric_att_value2() (interface{}, error) {
	return nil, nil
	/*
	   return tu.getAttrVal(t, startOffset() + s.length, endOffset() - q.length);
	*/

}

func (p *parser) callongeneric_att_value2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_att_value2()
}

func (c *current) ongeneric_att_value17() (interface{}, error) {
	return nil, nil
	/*
	   return tu.getAttrVal(t, startOffset() + s.length, endOffset() - q.length);
	*/

}

func (p *parser) callongeneric_att_value17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_att_value17()
}

func (c *current) ongeneric_att_value32() (interface{}, error) {
	return nil, nil
	/*
	   return tu.getAttrVal(t, startOffset() + s.length, endOffset());
	*/

}

func (p *parser) callongeneric_att_value32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_att_value32()
}

func (c *current) ontable_att_value2() (interface{}, error) {
	return nil, nil
	/*
	   return tu.getAttrVal(t, startOffset() + s.length, endOffset() - q.length);
	*/

}

func (p *parser) callontable_att_value2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_att_value2()
}

func (c *current) ontable_att_value16() (interface{}, error) {
	return nil, nil
	/*
	   return tu.getAttrVal(t, startOffset() + s.length, endOffset() - q.length);
	*/

}

func (p *parser) callontable_att_value16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_att_value16()
}

func (c *current) ontable_att_value30() (interface{}, error) {
	return nil, nil
	/*
	   return tu.getAttrVal(t, startOffset() + s.length, endOffset());
	*/

}

func (p *parser) callontable_att_value30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_att_value30()
}

func (c *current) onli1(bullets, c2 interface{}) (interface{}, error) {
	n := &html.Node{
		Type: html.ElementNode,
		Data: "li",
	}
	addChild(n, c2)
	return n, nil
	/*
	   // Leave bullets as an array -- list handler expects this
	       var tsr = tsrOffsets('start');
	       tsr[1] += bullets.length;
	       var li = new TagTk('listItem', [], { tsr: tsr });
	       li.bullets = bullets;
	       return [ li ].concat(c || []);
	*/
}

func (p *parser) callonli1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onli1(stack["bullets"], stack["c2"])
}

func (c *current) onhacky_dl_uses1() (interface{}, error) {
	return nil, nil
	/*
	   // Leave bullets as an array -- list handler expects this
	       var tsr = tsrOffsets('start');
	       tsr[1] += bullets.length;
	       var li = new TagTk('listItem', [], { tsr: tsr });
	       li.bullets = bullets;
	       return tu.flattenIfArray([li, tbl || [], line || []]);
	*/
}

func (p *parser) callonhacky_dl_uses1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhacky_dl_uses1()
}

func (c *current) ondtdd5() (interface{}, error) {
	return nil, nil /*return lc;*/
}

func (p *parser) callondtdd5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondtdd5()
}

func (c *current) ondtdd14() (bool, error) {
	return false, nil /*return stops.inc('colon');*/
}

func (p *parser) callondtdd14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondtdd14()
}

func (c *current) ondtdd17() (interface{}, error) {
	return nil, nil /*return endOffset(); */
}

func (p *parser) callondtdd17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondtdd17()
}

func (c *current) ondtdd19() (bool, error) {
	return false, nil /*stops.counters.colon = 0; return true;*/
}

func (p *parser) callondtdd19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondtdd19()
}

func (c *current) ondtdd2() (interface{}, error) {
	return nil, nil
	/*
		// Leave bullets as an array -- list handler expects this
		// TSR: +1 for the leading ";"
		        var numBullets = bullets.length + 1;
		        var tsr = tsrOffsets('start');
		        tsr[1] += numBullets;
		        var li1 = new TagTk('listItem', [], { tsr: tsr });
		        li1.bullets = bullets.slice();
		        li1.bullets.push(";");
		// TSR: -1 for the intermediate ":"
		        var li2 = new TagTk('listItem', [], { tsr: [cpos - 1, cpos], stx: 'row' });
		        li2.bullets = bullets.slice();
		        li2.bullets.push(":");

		        return [ li1 ].concat(c || [], [ li2 ], d || []);
	*/

}

func (p *parser) callondtdd2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondtdd2()
}

func (c *current) ondtdd24() (bool, error) {
	return false, nil /*stops.counters.colon = 0; return false; */
}

func (p *parser) callondtdd24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondtdd24()
}

func (c *current) onfull_table_in_link_caption11() (bool, error) {
	return false, nil /*stops.push('linkdesc', false); return stops.push('table', true);
	 */
}

func (p *parser) callonfull_table_in_link_caption11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfull_table_in_link_caption11()
}

func (c *current) onfull_table_in_link_caption9() (interface{}, error) {
	return nil, nil
	/*
	   stops.pop('linkdesc');
	   stops.pop('table');
	   return tbl;
	*/

}

func (p *parser) callonfull_table_in_link_caption9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfull_table_in_link_caption9()
}

func (c *current) onfull_table_in_link_caption26() (bool, error) {
	return false, nil /* stops.pop('linkdesc'); return stops.pop('table'); */
}

func (p *parser) callonfull_table_in_link_caption26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfull_table_in_link_caption26()
}

func (c *current) onfull_table_in_link_caption1() (interface{}, error) {
	return nil, nil /* return r; */
}

func (p *parser) callonfull_table_in_link_caption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfull_table_in_link_caption1()
}

func (c *current) ontable_line11() (bool, error) {
	return false, nil /* return stops.push('table', true); */
}

func (p *parser) callontable_line11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_line11()
}

func (c *current) ontable_line9() (interface{}, error) {
	return nil, nil
	/*
	   stops.pop('table');
	   return tl;
	*/

}

func (p *parser) callontable_line9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_line9()
}

func (c *current) ontable_line20() (bool, error) {
	return false, nil /* return stops.pop('table'); */
}

func (p *parser) callontable_line20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_line20()
}

func (c *current) ontable_line1() (interface{}, error) {
	return nil, nil /* return r; */
}

func (p *parser) callontable_line1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_line1()
}

func (c *current) ontable_start_tag7() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontable_start_tag7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_start_tag7()
}

func (c *current) ontable_start_tag11() (bool, error) {
	return false, nil /* return stops.push('table', false); */
}

func (p *parser) callontable_start_tag11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_start_tag11()
}

func (c *current) ontable_start_tag13() (interface{}, error) {
	return nil, nil /* stops.pop('table'); return endOffset(); */
}

func (p *parser) callontable_start_tag13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_start_tag13()
}

func (c *current) ontable_start_tag1() (interface{}, error) {
	return nil, nil
	/*
		        var coms = tu.popComments(ta);
		        if (coms) {
		          tsEndPos = coms.commentStartPos;
		        }

		        var da = { tsr: [startPos, tsEndPos] };
		        if (p !== "|") {
		// Variation from default
		            da.startTagSrc = b + p;
		        }

		        sc.push(new TagTk('table', ta, da));
		        if (coms) {
		          sc = sc.concat(coms.buf);
		        }
		        return sc;
	*/

}

func (p *parser) callontable_start_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_start_tag1()
}

func (c *current) ontable_caption_tag3() (bool, error) {
	return true, nil /*return stops.onStack('tableDataBlock');*/
}

func (p *parser) callontable_caption_tag3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_caption_tag3()
}

func (c *current) ontable_caption_tag8() (interface{}, error) {
	return nil, nil /*return endOffset();*/
}

func (p *parser) callontable_caption_tag8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_caption_tag8()
}

func (c *current) ontable_caption_tag1() (interface{}, error) {
	return nil, nil
	/*
	   return tu.buildTableTokens("caption", "|+", args, [startOffset(), tagEndPos], endOffset(), c, true);
	*/

}

func (p *parser) callontable_caption_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_caption_tag1()
}

func (c *current) ontable_row_tag3() (bool, error) {
	return true, nil /*return stops.onStack('tableDataBlock'); */
}

func (p *parser) callontable_row_tag3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_row_tag3()
}

func (c *current) ontable_row_tag7() (bool, error) {
	return false, nil /* return stops.push('table', false); */
}

func (p *parser) callontable_row_tag7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_row_tag7()
}

func (c *current) ontable_row_tag9() (interface{}, error) {
	return nil, nil /* stops.pop('table'); return endOffset(); */
}

func (p *parser) callontable_row_tag9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_row_tag9()
}

func (c *current) ontable_row_tag1() (interface{}, error) {
	return nil, nil
	/*
		        var coms = tu.popComments(a);
		        if (coms) {
		          tagEndPos = coms.commentStartPos;
		        }

		        var da = {
		          tsr: [ startOffset(), tagEndPos ],
		          startTagSrc: p + dashes,
		        };

		// We rely on our tree builder to close the row as needed. This is
		// needed to support building tables from fragment templates with
		// individual cells or rows.
		        var trToken = new TagTk('tr', a, da);

		        var res = [ trToken ];
		        if (coms) {
		          res = res.concat(coms.buf);
		        }
		        return res;
	*/

}

func (p *parser) callontable_row_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_row_tag1()
}

func (c *current) ontds6() (interface{}, error) {
	return nil, nil /*return p;*/
}

func (p *parser) callontds6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontds6()
}

func (c *current) ontds2() (interface{}, error) {
	return nil, nil
	/*
		        var da = tdt[0].dataAttribs;
		        da.stx = "row";
		        da.tsr[0] -= pp.length; // include "||"
		        if (pp !== "||" || (da.startTagSrc && da.startTagSrc !== pp)) {
		// Variation from default
		          da.startTagSrc = pp + (da.startTagSrc ? da.startTagSrc.substring(1) : '');
		        }
		        return tdt;
	*/

}

func (p *parser) callontds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontds2()
}

func (c *current) ontable_data_tags3() (bool, error) {
	return true, nil /* return stops.onStack('tableDataBlock'); */
}

func (p *parser) callontable_data_tags3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_data_tags3()
}

func (c *current) ontable_data_tags8() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontable_data_tags8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_data_tags8()
}

func (c *current) ontable_data_tags1() (interface{}, error) {
	return nil, nil
	// blahaskjdf;alsdf;;

}

func (p *parser) callontable_data_tags1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_data_tags1()
}

func (c *current) ontable_data_tag7() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontable_data_tag7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_data_tag7()
}

func (c *current) ontable_data_tag1() (interface{}, error) {
	return nil, nil
	/*
	   return tu.buildTableTokens("td", "|", arg, [startOffset(), tagEndPos], endOffset(), td);
	*/

}

func (p *parser) callontable_data_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_data_tag1()
}

func (c *current) ontable_heading_tags5() (bool, error) {
	return false, nil /*return stops.push('th', endOffset()); */
}

func (p *parser) callontable_heading_tags5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tags5()
}

func (c *current) ontable_heading_tags8() (interface{}, error) {
	return nil, nil
	/*
		            var da = tht[0].dataAttribs;
		            da.stx = 'row';
		            da.tsr[0] -= pp.length; // include "!!" or "||"

		            if (pp !== "!!" || (da.startTagSrc && da.startTagSrc !== pp)) {
		// Variation from default
		                da.startTagSrc = pp + (da.startTagSrc ? da.startTagSrc.substring(1) : '');
		            }
		            return tht;
	*/

}

func (p *parser) callontable_heading_tags8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tags8()
}

func (c *current) ontable_heading_tags2() (interface{}, error) {
	return nil, nil
	/*
	   stops.pop('th');
	   th[0].dataAttribs.tsr[0]--; // include "!"
	   return th.concat(ths);
	*/

}

func (p *parser) callontable_heading_tags2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tags2()
}

func (c *current) ontable_heading_tags14() (bool, error) {
	return false, nil /*return stops.onStack('th') !== false ? stops.pop('th') : false;*/
}

func (p *parser) callontable_heading_tags14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tags14()
}

func (c *current) ontable_heading_tag5() (interface{}, error) {
	return nil, nil /*return endOffset();*/
}

func (p *parser) callontable_heading_tag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tag5()
}

func (c *current) ontable_heading_tag10() (bool, error) {
	return false, nil
	/*
		// This SyntaxStop is only true until we hit the end of the line.
		      if (stops.onStack('th') !== false &&
		              /\n/.test(input.substring(stops.onStack('th'), endOffset()))) {
		// There's been a newline. Remove the break and continue
		// tokenizing nested_block_in_tables.
		          stops.pop('th');
		      }
		      return true;
	*/

}

func (p *parser) callontable_heading_tag10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tag10()
}

func (c *current) ontable_heading_tag8() (interface{}, error) {
	return nil, nil /* return d; */
}

func (p *parser) callontable_heading_tag8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tag8()
}

func (c *current) ontable_heading_tag1() (interface{}, error) {
	return nil, nil
	/*
	   return tu.buildTableTokens("th", "!", arg, [startOffset(), tagEndPos], endOffset(), c);
	*/

}

func (p *parser) callontable_heading_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tag1()
}

func (c *current) ontable_end_tag7() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontable_end_tag7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_end_tag7()
}

func (c *current) ontable_end_tag1() (interface{}, error) {
	return nil, nil
	/*
		      var tblEnd = new EndTagTk('table', [], { tsr: [startPos, endOffset()] });
		      if (p !== "|") {
		// p+"<brace-char>" is triggering some bug in pegJS
		// I cannot even use that expression in the comment!
		          tblEnd.dataAttribs.endTagSrc = p + b;
		      }
		      return sc.concat([tblEnd]);
	*/

}

func (p *parser) callontable_end_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_end_tag1()
}

func (c *current) onrow_syntax_table_args4() (bool, error) {
	return false, nil /* return stops.push('tableCellArg', return true, nil); */
}

func (p *parser) callonrow_syntax_table_args4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrow_syntax_table_args4()
}

func (c *current) onrow_syntax_table_args2() (interface{}, error) {
	return nil, nil
	/*
	   stops.pop('tableCellArg');
	   return [as, s, p];
	*/

}

func (p *parser) callonrow_syntax_table_args2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrow_syntax_table_args2()
}

func (c *current) onrow_syntax_table_args11() (bool, error) {
	return false, nil /* return stops.pop('tableCellArg'); */
}

func (p *parser) callonrow_syntax_table_args11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrow_syntax_table_args11()
}

func (c *current) onurltext5(al interface{}) (interface{}, error) {
	return al, nil /*return al;*/
}

func (p *parser) callonurltext5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurltext5(stack["al"])
}

func (c *current) onurltext11(he interface{}) (interface{}, error) {
	return he, nil /*return he;*/
}

func (p *parser) callonurltext11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurltext11(stack["he"])
}

func (c *current) onurltext17() (interface{}, error) {
	return "&nbsp;", nil
	/*
	   var toks = Util.placeholder('\u00a0', {
	      ' ',
	     tsr: tsrOffsets('start'),
	     isDisplayHack: true,
	   }, { tsr: tsrOffsets('end'), isDisplayHack: true });
	   var typeOf = toks[0].getAttribute('typeof');
	   toks[0].setAttribute('typeof', 'mw:DisplaySpace ' + typeOf);
	   return toks;
	*/

}

func (p *parser) callonurltext17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurltext17()
}

func (c *current) onurltext22(bs interface{}) (interface{}, error) {
	return bs, nil /*return bs;*/
}

func (p *parser) callonurltext22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurltext22(stack["bs"])
}

func (c *current) onraw_htmlentity1() (interface{}, error) {
	return nil, nil
	/*
	   return Util.decodeEntities(m);
	*/
}

func (p *parser) callonraw_htmlentity1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onraw_htmlentity1()
}

func (c *current) onhtmlentity1() (interface{}, error) {
	return nil, nil
	/*
	   // if this is an invalid entity, don't tag it with 'mw:Entity'
	       if (cc.length > 2 /* decoded entity would be 1 or 2 UTF-16 characters * /) {
	           return cc;
	       }
	       return [
	           new TagTk('span', [new KV('typeof', 'mw:Entity')], { src: text(), srcContent: cc, tsr: tsrOffsets('start') }),
	           cc,
	           new EndTagTk('span', [], { tsr: tsrOffsets('end') }),
	       ];
	*/
}

func (p *parser) callonhtmlentity1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlentity1()
}

func (c *current) onspace_or_nbsp8(he interface{}) (bool, error) {
	return false, nil /*return Array.isArray(he) && /^\u00A0$/.test(he[1]);*/
}

func (p *parser) callonspace_or_nbsp8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onspace_or_nbsp8(stack["he"])
}

func (c *current) onspace_or_nbsp4(he interface{}) (interface{}, error) {
	return he, nil /*return he;*/
}

func (p *parser) callonspace_or_nbsp4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onspace_or_nbsp4(stack["he"])
}

func (c *current) oncomment_or_includes7() (bool, error) {
	push(c, "sol_il", true)
	return true, nil

}

func (p *parser) calloncomment_or_includes7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment_or_includes7()
}

func (c *current) oncomment_or_includes10(i interface{}) (bool, error) {
	//pop(c, "sol_il")
	return true, nil

}

func (p *parser) calloncomment_or_includes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment_or_includes10(stack["i"])
}

func (c *current) oncomment_or_includes5(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) calloncomment_or_includes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment_or_includes5(stack["i"])
}

func (c *current) oncomment_or_includes11() (bool, error) {
	//pop(c, "sol_il")
	return false, nil

}

func (p *parser) calloncomment_or_includes11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment_or_includes11()
}

func (c *current) onsol_prefix4() (bool, error) {
	//log.Printf("sol_prefix %v", c.pos)
	return c.pos.offset == 0, nil
	/*
		// Use the sol flag only at the start of the input
		// NOTE: Explicitly check for 'false' and not a falsy value
		      return endOffset() === 0 && options.sol !== false;
	*/

}

func (p *parser) callonsol_prefix4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsol_prefix4()
}

func (c *current) onsol_prefix3() (interface{}, error) {
	return nil, nil /*return [];*/
}

func (p *parser) callonsol_prefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsol_prefix3()
}

func (c *current) onempty_line_with_comments4() (interface{}, error) {
	return "empty_line_with_comments", nil /*return endOffset();*/
}

func (p *parser) callonempty_line_with_comments4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onempty_line_with_comments4()
}

func (c *current) onempty_line_with_comments1() (interface{}, error) {
	return nil, nil
	/*
	   return [
	       sp,
	       new SelfclosingTagTk("meta", [new KV('typeof', 'mw:EmptyLine')], {
	           tokens: tu.flattenIfArray(c),
	           tsr: [p, endOffset()],
	       }),
	   ];
	*/

}

func (p *parser) callonempty_line_with_comments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onempty_line_with_comments1()
}

func (c *current) oninclude_limits12() (bool, error) {
	return false, nil
	/*
	   var incl = n.toLowerCase();
	   return incl === "noinclude" || incl === "onlyinclude" ||
	     incl === "includeonly";
	*/

}

func (p *parser) calloninclude_limits12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninclude_limits12()
}

func (c *current) oninclude_limits4() (interface{}, error) {
	return nil, nil
	/*
		    var incl = name.toLowerCase();
		    var dp = { tsr: tsrOffsets() };

		// Record variant since tag is not in normalized lower case
		    if (name !== incl) {
		      dp.srcTagName = name;
		    }

		// End tag only
		    if (c) {
		      return new EndTagTk(name, [], dp);
		    }

		    var restOfInput = input.substring(endOffset());
		    var tagContent = restOfInput.match(new RegExp("^([\\s\\S]*?)(?:</\\s*" + incl + "\\s*>)", "m"));

		// Start tag only
		    if (!tagContent || !tagContent[1]) {
		      return new TagTk(name, [], dp);
		    }

		// Get the content
		    var inclContent = tagContent[1];

		// Preserve SOL where necessary (for onlyinclude and noinclude)
		// Note that this only works because we encounter <*include*> tags in
		// the toplevel content and we rely on the php preprocessor to expand
		// templates, so we shouldn't ever be tokenizing inInclude.
		// Last line should be empty (except for comments)
		    if (incl !== "includeonly" && stops.onStack("sol_il")) {
		      var last = lastItem(inclContent.split('\n'));
		      if (!/^(<!--([^-]|-(?!->))*-->)*$/.test(last)) {
		        return false;
		      }
		    }

		// Tokenize include content in a new tokenizer
		    var inclContentToks = (new PegTokenizer(env)).tokenizeSync(inclContent);
		    inclContentToks = Util.stripEOFTkfromTokens(inclContentToks);

		// Shift tsr
		    Util.shiftTokenTSR(inclContentToks, endOffset());

		// Skip past content
		    peg$currPos += inclContent.length;

		    return [new TagTk(name, [], dp)].concat(inclContentToks);
	*/

}

func (p *parser) calloninclude_limits4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninclude_limits4()
}

func (c *current) oninclude_limits16(il interface{}) (bool, error) {
	return il != nil, nil /*return !!il; */
}

func (p *parser) calloninclude_limits16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninclude_limits16(stack["il"])
}

func (c *current) oninclude_limits1(il interface{}) (interface{}, error) {
	return il, nil /*return il; */
}

func (p *parser) calloninclude_limits1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninclude_limits1(stack["il"])
}

func (c *current) onsof1() (bool, error) {
	return c.pos.offset == 0, nil
}

func (p *parser) callonsof1() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsof1()
}

func (c *current) oneof1() (bool, error) {
	len := c.globalStore["len"].(int)
	return c.pos.offset == len, nil
}

func (p *parser) calloneof1() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oneof1()
}

func (c *current) onnewlineToken1() (interface{}, error) {
	return "\n", nil /* return [new NlTk(tsrOffsets())]; */
}

func (p *parser) callonnewlineToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnewlineToken1()
}

func (c *current) ondirective5(v interface{}) (interface{}, error) {
	return v, nil /* return v; */
}

func (p *parser) callondirective5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondirective5(stack["v"])
}

func (c *current) ondirective11(e interface{}) (interface{}, error) {
	return e, nil /* return e; */
}

func (p *parser) callondirective11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondirective11(stack["e"])
}

func (c *current) onwikilink_preprocessor_text7(wr interface{}) (interface{}, error) {
	return wr, nil /* return wr; */
}

func (p *parser) callonwikilink_preprocessor_text7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_preprocessor_text7(stack["wr"])
}

func (c *current) onwikilink_preprocessor_text1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenStringlist(r);
	*/

}

func (p *parser) callonwikilink_preprocessor_text1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_preprocessor_text1(stack["r"])
}

func (c *current) onextlink_preprocessor_text4() (bool, error) {
	return true, nil
	/*
		// Prevent breaking on pipes when we're in a link description.
		// See the test, 'Images with the "|" character in the comment'.
		    return stops.push('linkdesc', false);
	*/

}

func (p *parser) callonextlink_preprocessor_text4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink_preprocessor_text4()
}

func (c *current) onextlink_preprocessor_text10(s interface{}) (interface{}, error) {
	return s, nil /* return s;
	 */
}

func (p *parser) callonextlink_preprocessor_text10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink_preprocessor_text10(stack["s"])
}

func (c *current) onextlink_preprocessor_text2(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   stops.pop('linkdesc');
	   return tu.flattenString(r);
	*/

}

func (p *parser) callonextlink_preprocessor_text2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink_preprocessor_text2(stack["r"])
}

func (c *current) onextlink_preprocessor_text29() (bool, error) {
	return false, nil /* return stops.pop('linkdesc'); */
}

func (p *parser) callonextlink_preprocessor_text29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink_preprocessor_text29()
}

func (c *current) onattribute_preprocessor_text7(s interface{}) (interface{}, error) {
	return s, nil /*return s; */
}

func (p *parser) callonattribute_preprocessor_text7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute_preprocessor_text7(stack["s"])
}

func (c *current) onattribute_preprocessor_text1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenString(r);
	*/

}

func (p *parser) callonattribute_preprocessor_text1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute_preprocessor_text1(stack["r"])
}

func (c *current) onattribute_preprocessor_text_single7(s interface{}) (interface{}, error) {
	return s, nil /* return s; */
}

func (p *parser) callonattribute_preprocessor_text_single7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute_preprocessor_text_single7(stack["s"])
}

func (c *current) onattribute_preprocessor_text_single1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenString(r);
	*/

}

func (p *parser) callonattribute_preprocessor_text_single1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute_preprocessor_text_single1(stack["r"])
}

func (c *current) onattribute_preprocessor_text_double7(s interface{}) (interface{}, error) {
	return s, nil /* return s; */
}

func (p *parser) callonattribute_preprocessor_text_double7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute_preprocessor_text_double7(stack["s"])
}

func (c *current) onattribute_preprocessor_text_double1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenString(r);
	*/

}

func (p *parser) callonattribute_preprocessor_text_double1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute_preprocessor_text_double1(stack["r"])
}

func (c *current) ontable_attribute_preprocessor_text7(s interface{}) (interface{}, error) {
	return s, nil /* return s; */
}

func (p *parser) callontable_attribute_preprocessor_text7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_preprocessor_text7(stack["s"])
}

func (c *current) ontable_attribute_preprocessor_text1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenString(r);
	*/

}

func (p *parser) callontable_attribute_preprocessor_text1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_preprocessor_text1(stack["r"])
}

func (c *current) ontable_attribute_preprocessor_text_single7(s interface{}) (interface{}, error) {
	return s, nil /* return s; */
}

func (p *parser) callontable_attribute_preprocessor_text_single7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_preprocessor_text_single7(stack["s"])
}

func (c *current) ontable_attribute_preprocessor_text_single1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenString(r);
	*/

}

func (p *parser) callontable_attribute_preprocessor_text_single1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_preprocessor_text_single1(stack["r"])
}

func (c *current) ontable_attribute_preprocessor_text_double7(s interface{}) (interface{}, error) {
	return s, nil /* return s; */
}

func (p *parser) callontable_attribute_preprocessor_text_double7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_preprocessor_text_double7(stack["s"])
}

func (c *current) ontable_attribute_preprocessor_text_double1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenString(r);
	*/

}

func (p *parser) callontable_attribute_preprocessor_text_double1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_preprocessor_text_double1(stack["r"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
