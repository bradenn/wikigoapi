// Code generated by pigeon; DO NOT EDIT.

package wikitext

import (
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/davecgh/go-spew/spew"
	"github.com/pkg/errors"
	"golang.org/x/net/html"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 10, col: 1, offset: 165},
			expr: &actionExpr{
				pos: position{line: 10, col: 10, offset: 174},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 10, col: 10, offset: 174},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 10, col: 10, offset: 174},
							label: "tlb",
							expr: &zeroOrMoreExpr{
								pos: position{line: 10, col: 14, offset: 178},
								expr: &ruleRefExpr{
									pos:  position{line: 10, col: 14, offset: 178},
									name: "tlb",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 10, col: 19, offset: 183},
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 19, offset: 183},
								name: "newlineToken",
							},
						},
					},
				},
			},
		},
		{
			name: "redirect",
			pos:  position{line: 25, col: 1, offset: 487},
			expr: &actionExpr{
				pos: position{line: 25, col: 13, offset: 499},
				run: (*parser).callonredirect1,
				expr: &seqExpr{
					pos: position{line: 25, col: 13, offset: 499},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 25, col: 13, offset: 499},
							name: "redirect_word",
						},
						&zeroOrMoreExpr{
							pos: position{line: 26, col: 5, offset: 517},
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 5, offset: 517},
								name: "space_or_newline",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 27, col: 5, offset: 539},
							expr: &seqExpr{
								pos: position{line: 27, col: 6, offset: 540},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 27, col: 6, offset: 540},
										val:        ":",
										ignoreCase: false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 27, col: 10, offset: 544},
										expr: &ruleRefExpr{
											pos:  position{line: 27, col: 10, offset: 544},
											name: "space_or_newline",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 28, col: 5, offset: 568},
							label: "wl",
							expr: &ruleRefExpr{
								pos:  position{line: 28, col: 8, offset: 571},
								name: "wikilink",
							},
						},
						&andCodeExpr{
							pos: position{line: 28, col: 17, offset: 580},
							run: (*parser).callonredirect13,
						},
					},
				},
			},
		},
		{
			name: "generic_newline_attributes",
			pos:  position{line: 53, col: 1, offset: 1195},
			expr: &zeroOrMoreExpr{
				pos: position{line: 53, col: 31, offset: 1225},
				expr: &ruleRefExpr{
					pos:  position{line: 53, col: 31, offset: 1225},
					name: "generic_newline_attribute",
				},
			},
		},
		{
			name: "table_attributes",
			pos:  position{line: 55, col: 1, offset: 1253},
			expr: &zeroOrMoreExpr{
				pos: position{line: 56, col: 6, offset: 1275},
				expr: &choiceExpr{
					pos: position{line: 56, col: 7, offset: 1276},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 56, col: 7, offset: 1276},
							name: "table_attribute",
						},
						&actionExpr{
							pos: position{line: 56, col: 25, offset: 1294},
							run: (*parser).callontable_attributes4,
							expr: &seqExpr{
								pos: position{line: 56, col: 25, offset: 1294},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 56, col: 25, offset: 1294},
										name: "optionalSpaceToken",
									},
									&labeledExpr{
										pos:   position{line: 56, col: 44, offset: 1313},
										label: "b",
										expr: &ruleRefExpr{
											pos:  position{line: 56, col: 46, offset: 1315},
											name: "broken_table_attribute_name_char",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "redirect_word",
			pos:  position{line: 62, col: 1, offset: 1470},
			expr: &seqExpr{
				pos: position{line: 63, col: 7, offset: 1490},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 63, col: 7, offset: 1490},
						expr: &charClassMatcher{
							pos:        position{line: 63, col: 7, offset: 1490},
							val:        "[ \\t\\n\\r]",
							chars:      []rune{' ', '\t', '\n', '\r'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 64, col: 5, offset: 1505},
						expr: &seqExpr{
							pos: position{line: 64, col: 6, offset: 1506},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 64, col: 6, offset: 1506},
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 7, offset: 1507},
										name: "space_or_newline",
									},
								},
								&notExpr{
									pos: position{line: 64, col: 24, offset: 1524},
									expr: &charClassMatcher{
										pos:        position{line: 64, col: 25, offset: 1525},
										val:        "[:[]",
										chars:      []rune{':', '['},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&anyMatcher{
									line: 64, col: 30, offset: 1530,
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 65, col: 5, offset: 1538},
						run: (*parser).callonredirect_word11,
					},
				},
			},
		},
		{
			name: "start_async",
			pos:  position{line: 73, col: 1, offset: 1899},
			expr: &zeroOrMoreExpr{
				pos: position{line: 74, col: 6, offset: 1916},
				expr: &choiceExpr{
					pos: position{line: 74, col: 7, offset: 1917},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 74, col: 7, offset: 1917},
							name: "tlb",
						},
						&seqExpr{
							pos: position{line: 75, col: 7, offset: 1927},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 75, col: 7, offset: 1927},
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 7, offset: 1927},
										name: "newlineToken",
									},
								},
								&andCodeExpr{
									pos: position{line: 75, col: 21, offset: 1941},
									run: (*parser).callonstart_async7,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "tlb",
			pos:  position{line: 91, col: 1, offset: 2276},
			expr: &actionExpr{
				pos: position{line: 91, col: 8, offset: 2283},
				run: (*parser).callontlb1,
				expr: &seqExpr{
					pos: position{line: 91, col: 8, offset: 2283},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 91, col: 8, offset: 2283},
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 9, offset: 2284},
								name: "eof",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 13, offset: 2288},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 15, offset: 2290},
								name: "block",
							},
						},
					},
				},
			},
		},
		{
			name: "block",
			pos:  position{line: 98, col: 1, offset: 2359},
			expr: &choiceExpr{
				pos: position{line: 100, col: 8, offset: 2442},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 100, col: 8, offset: 2442},
						run: (*parser).callonblock2,
						expr: &seqExpr{
							pos: position{line: 100, col: 8, offset: 2442},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 100, col: 8, offset: 2442},
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 9, offset: 2443},
										name: "sof",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 13, offset: 2447},
									name: "redirect",
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 22, offset: 2456},
									name: "comment_or_includes",
								},
								&zeroOrOneExpr{
									pos: position{line: 100, col: 42, offset: 2476},
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 42, offset: 2476},
										name: "block_line",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 101, col: 7, offset: 2570},
						name: "block_lines",
					},
					&actionExpr{
						pos: position{line: 102, col: 7, offset: 2588},
						run: (*parser).callonblock11,
						expr: &seqExpr{
							pos: position{line: 102, col: 7, offset: 2588},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 102, col: 7, offset: 2588},
									expr: &litMatcher{
										pos:        position{line: 102, col: 9, offset: 2590},
										val:        "<",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 102, col: 13, offset: 2594},
									label: "rs",
									expr: &choiceExpr{
										pos: position{line: 102, col: 18, offset: 2599},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 102, col: 18, offset: 2599},
												run: (*parser).callonblock17,
												expr: &seqExpr{
													pos: position{line: 102, col: 18, offset: 2599},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 102, col: 18, offset: 2599},
															label: "cm",
															expr: &ruleRefExpr{
																pos:  position{line: 102, col: 21, offset: 2602},
																name: "comment",
															},
														},
														&andExpr{
															pos: position{line: 102, col: 29, offset: 2610},
															expr: &ruleRefExpr{
																pos:  position{line: 102, col: 30, offset: 2611},
																name: "eolf",
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 104, col: 14, offset: 2743},
												name: "block_tag",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 106, col: 7, offset: 2806},
						name: "paragraph",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 7, offset: 2935},
						name: "inlineline",
					},
					&actionExpr{
						pos: position{line: 110, col: 7, offset: 2952},
						run: (*parser).callonblock26,
						expr: &seqExpr{
							pos: position{line: 110, col: 7, offset: 2952},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 110, col: 7, offset: 2952},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 9, offset: 2954},
										name: "sol",
									},
								},
								&notExpr{
									pos: position{line: 110, col: 13, offset: 2958},
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 14, offset: 2959},
										name: "inline_breaks",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "nested_block",
			pos:  position{line: 116, col: 1, offset: 3141},
			expr: &actionExpr{
				pos: position{line: 116, col: 17, offset: 3157},
				run: (*parser).callonnested_block1,
				expr: &seqExpr{
					pos: position{line: 116, col: 17, offset: 3157},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 116, col: 17, offset: 3157},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 18, offset: 3158},
								name: "inline_breaks",
							},
						},
						&labeledExpr{
							pos:   position{line: 116, col: 32, offset: 3172},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 34, offset: 3174},
								name: "block",
							},
						},
					},
				},
			},
		},
		{
			name: "nested_block_in_table",
			pos:  position{line: 124, col: 1, offset: 3446},
			expr: &actionExpr{
				pos: position{line: 129, col: 5, offset: 3637},
				run: (*parser).callonnested_block_in_table1,
				expr: &seqExpr{
					pos: position{line: 129, col: 5, offset: 3637},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 129, col: 5, offset: 3637},
							run: (*parser).callonnested_block_in_table3,
						},
						&notExpr{
							pos: position{line: 140, col: 5, offset: 4038},
							expr: &seqExpr{
								pos: position{line: 140, col: 7, offset: 4040},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 140, col: 7, offset: 4040},
										name: "sol",
									},
									&zeroOrOneExpr{
										pos: position{line: 140, col: 11, offset: 4044},
										expr: &seqExpr{
											pos: position{line: 140, col: 12, offset: 4045},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 140, col: 12, offset: 4045},
													expr: &ruleRefExpr{
														pos:  position{line: 140, col: 12, offset: 4045},
														name: "space",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 140, col: 19, offset: 4052},
													name: "sol",
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 140, col: 25, offset: 4058},
										expr: &ruleRefExpr{
											pos:  position{line: 140, col: 25, offset: 4058},
											name: "space",
										},
									},
									&choiceExpr{
										pos: position{line: 140, col: 33, offset: 4066},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 140, col: 33, offset: 4066},
												name: "pipe",
											},
											&litMatcher{
												pos:        position{line: 140, col: 40, offset: 4073},
												val:        "!",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 140, col: 46, offset: 4079},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 140, col: 48, offset: 4081},
								name: "nested_block",
							},
						},
						&stateCodeExpr{
							pos: position{line: 141, col: 5, offset: 4098},
							run: (*parser).callonnested_block_in_table19,
						},
					},
				},
			},
		},
		{
			name: "block_lines",
			pos:  position{line: 153, col: 1, offset: 4278},
			expr: &seqExpr{
				pos: position{line: 154, col: 6, offset: 4295},
				exprs: []interface{}{
					&labeledExpr{
						pos:   position{line: 154, col: 6, offset: 4295},
						label: "s",
						expr: &ruleRefExpr{
							pos:  position{line: 154, col: 8, offset: 4297},
							name: "sol",
						},
					},
					&labeledExpr{
						pos:   position{line: 156, col: 5, offset: 4343},
						label: "s2",
						expr: &seqExpr{
							pos: position{line: 156, col: 9, offset: 4347},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 156, col: 9, offset: 4347},
									label: "os",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 12, offset: 4350},
										name: "optionalSpaceToken",
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 31, offset: 4369},
									label: "so",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 34, offset: 4372},
										name: "sol",
									},
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 157, col: 5, offset: 4381},
						label: "bl",
						expr: &ruleRefExpr{
							pos:  position{line: 157, col: 8, offset: 4384},
							name: "block_line",
						},
					},
				},
			},
		},
		{
			name: "hr",
			pos:  position{line: 160, col: 1, offset: 4416},
			expr: &actionExpr{
				pos: position{line: 160, col: 7, offset: 4422},
				run: (*parser).callonhr1,
				expr: &seqExpr{
					pos: position{line: 160, col: 7, offset: 4422},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 160, col: 7, offset: 4422},
							val:        "----",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 160, col: 14, offset: 4429},
							expr: &litMatcher{
								pos:        position{line: 160, col: 14, offset: 4429},
								val:        "-",
								ignoreCase: false,
							},
						},
						&choiceExpr{
							pos: position{line: 162, col: 5, offset: 4479},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 162, col: 5, offset: 4479},
									run: (*parser).callonhr7,
									expr: &seqExpr{
										pos: position{line: 162, col: 5, offset: 4479},
										exprs: []interface{}{
											&andExpr{
												pos: position{line: 162, col: 5, offset: 4479},
												expr: &ruleRefExpr{
													pos:  position{line: 162, col: 6, offset: 4480},
													name: "sol",
												},
											},
											&litMatcher{
												pos:        position{line: 162, col: 10, offset: 4484},
												val:        "",
												ignoreCase: false,
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 162, col: 56, offset: 4530},
									run: (*parser).callonhr12,
									expr: &litMatcher{
										pos:        position{line: 162, col: 56, offset: 4530},
										val:        "",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "block_line",
			pos:  position{line: 182, col: 1, offset: 4937},
			expr: &choiceExpr{
				pos: position{line: 183, col: 6, offset: 4953},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 183, col: 6, offset: 4953},
						name: "heading",
					},
					&ruleRefExpr{
						pos:  position{line: 184, col: 5, offset: 4965},
						name: "list_item",
					},
					&ruleRefExpr{
						pos:  position{line: 185, col: 5, offset: 4979},
						name: "hr",
					},
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 4986},
						run: (*parser).callonblock_line5,
						expr: &seqExpr{
							pos: position{line: 186, col: 5, offset: 4986},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 186, col: 5, offset: 4986},
									label: "st",
									expr: &zeroOrMoreExpr{
										pos: position{line: 186, col: 9, offset: 4990},
										expr: &ruleRefExpr{
											pos:  position{line: 186, col: 9, offset: 4990},
											name: "space_or_newline",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 187, col: 5, offset: 5012},
									label: "r",
									expr: &choiceExpr{
										pos: position{line: 187, col: 9, offset: 5016},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 187, col: 9, offset: 5016},
												run: (*parser).callonblock_line12,
												expr: &seqExpr{
													pos: position{line: 187, col: 9, offset: 5016},
													exprs: []interface{}{
														&andExpr{
															pos: position{line: 187, col: 9, offset: 5016},
															expr: &charClassMatcher{
																pos:        position{line: 187, col: 11, offset: 5018},
																val:        "[ <{}|!]",
																chars:      []rune{' ', '<', '{', '}', '|', '!'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 187, col: 20, offset: 5027},
															label: "tl",
															expr: &ruleRefExpr{
																pos:  position{line: 187, col: 23, offset: 5030},
																name: "table_line",
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 189, col: 9, offset: 5130},
												run: (*parser).callonblock_line18,
												expr: &seqExpr{
													pos: position{line: 189, col: 9, offset: 5130},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 189, col: 9, offset: 5130},
															label: "bts",
															expr: &oneOrMoreExpr{
																pos: position{line: 189, col: 13, offset: 5134},
																expr: &actionExpr{
																	pos: position{line: 189, col: 14, offset: 5135},
																	run: (*parser).callonblock_line22,
																	expr: &seqExpr{
																		pos: position{line: 189, col: 14, offset: 5135},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 189, col: 14, offset: 5135},
																				label: "bt",
																				expr: &ruleRefExpr{
																					pos:  position{line: 189, col: 17, offset: 5138},
																					name: "block_tag",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 189, col: 27, offset: 5148},
																				label: "stl",
																				expr: &ruleRefExpr{
																					pos:  position{line: 189, col: 31, offset: 5152},
																					name: "optionalSpaceToken",
																				},
																			},
																		},
																	},
																},
															},
														},
														&andExpr{
															pos: position{line: 190, col: 9, offset: 5239},
															expr: &ruleRefExpr{
																pos:  position{line: 190, col: 10, offset: 5240},
																name: "eolf",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "paragraph",
			pos:  position{line: 202, col: 1, offset: 5587},
			expr: &actionExpr{
				pos: position{line: 203, col: 6, offset: 5602},
				run: (*parser).callonparagraph1,
				expr: &seqExpr{
					pos: position{line: 203, col: 6, offset: 5602},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 203, col: 6, offset: 5602},
							label: "s1",
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 9, offset: 5605},
								name: "sol",
							},
						},
						&labeledExpr{
							pos:   position{line: 203, col: 13, offset: 5609},
							label: "s2",
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 16, offset: 5612},
								name: "sol",
							},
						},
						&labeledExpr{
							pos:   position{line: 203, col: 20, offset: 5616},
							label: "c1",
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 23, offset: 5619},
								name: "inlineline",
							},
						},
					},
				},
			},
		},
		{
			name: "br",
			pos:  position{line: 212, col: 1, offset: 5735},
			expr: &actionExpr{
				pos: position{line: 212, col: 7, offset: 5741},
				run: (*parser).callonbr1,
				expr: &seqExpr{
					pos: position{line: 212, col: 7, offset: 5741},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 212, col: 7, offset: 5741},
							name: "optionalSpaceToken",
						},
						&andExpr{
							pos: position{line: 212, col: 26, offset: 5760},
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 27, offset: 5761},
								name: "newline",
							},
						},
					},
				},
			},
		},
		{
			name: "inline_breaks",
			pos:  position{line: 224, col: 1, offset: 5949},
			expr: &andCodeExpr{
				pos: position{line: 224, col: 18, offset: 5966},
				run: (*parser).calloninline_breaks1,
			},
		},
		{
			name: "inlineline",
			pos:  position{line: 226, col: 1, offset: 5996},
			expr: &oneOrMoreExpr{
				pos: position{line: 227, col: 6, offset: 6012},
				expr: &choiceExpr{
					pos: position{line: 227, col: 7, offset: 6013},
					alternatives: []interface{}{
						&seqExpr{
							pos: position{line: 227, col: 8, offset: 6014},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 227, col: 8, offset: 6014},
									label: "r",
									expr: &ruleRefExpr{
										pos:  position{line: 227, col: 10, offset: 6016},
										name: "urltext",
									},
								},
								&stateCodeExpr{
									pos: position{line: 227, col: 18, offset: 6024},
									run: (*parser).calloninlineline6,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 228, col: 7, offset: 6082},
							name: "inlineline_element",
						},
					},
				},
			},
		},
		{
			name: "inlineline_element",
			pos:  position{line: 230, col: 1, offset: 6104},
			expr: &actionExpr{
				pos: position{line: 231, col: 6, offset: 6128},
				run: (*parser).calloninlineline_element1,
				expr: &seqExpr{
					pos: position{line: 231, col: 6, offset: 6128},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 231, col: 6, offset: 6128},
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 7, offset: 6129},
								name: "inline_breaks",
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 5, offset: 6147},
							label: "r",
							expr: &choiceExpr{
								pos: position{line: 232, col: 8, offset: 6150},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 232, col: 8, offset: 6150},
										name: "inline_element",
									},
									&charClassMatcher{
										pos:        position{line: 232, col: 25, offset: 6167},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 233, col: 5, offset: 6180},
							run: (*parser).calloninlineline_element9,
						},
					},
				},
			},
		},
		{
			name: "inline_element",
			pos:  position{line: 236, col: 1, offset: 6260},
			expr: &choiceExpr{
				pos: position{line: 237, col: 6, offset: 6280},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 237, col: 6, offset: 6280},
						run: (*parser).calloninline_element2,
						expr: &seqExpr{
							pos: position{line: 237, col: 6, offset: 6280},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 237, col: 6, offset: 6280},
									expr: &litMatcher{
										pos:        position{line: 237, col: 8, offset: 6282},
										val:        "<",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 237, col: 12, offset: 6286},
									label: "r",
									expr: &choiceExpr{
										pos: position{line: 237, col: 16, offset: 6290},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 237, col: 16, offset: 6290},
												name: "xmlish_tag",
											},
											&ruleRefExpr{
												pos:  position{line: 238, col: 13, offset: 6313},
												name: "comment",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 240, col: 7, offset: 6370},
						run: (*parser).calloninline_element10,
						expr: &seqExpr{
							pos: position{line: 240, col: 7, offset: 6370},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 240, col: 7, offset: 6370},
									expr: &litMatcher{
										pos:        position{line: 240, col: 9, offset: 6372},
										val:        "{",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 240, col: 13, offset: 6376},
									label: "r",
									expr: &ruleRefExpr{
										pos:  position{line: 240, col: 15, offset: 6378},
										name: "tplarg_or_template",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 241, col: 7, offset: 6434},
						run: (*parser).calloninline_element16,
						expr: &seqExpr{
							pos: position{line: 241, col: 7, offset: 6434},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 241, col: 7, offset: 6434},
									expr: &litMatcher{
										pos:        position{line: 241, col: 9, offset: 6436},
										val:        "-{",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 241, col: 14, offset: 6441},
									label: "r",
									expr: &ruleRefExpr{
										pos:  position{line: 241, col: 16, offset: 6443},
										name: "lang_variant_or_tpl",
									},
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 248, col: 7, offset: 6922},
						expr: &seqExpr{
							pos: position{line: 248, col: 8, offset: 6923},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 248, col: 8, offset: 6923},
									val:        "[[",
									ignoreCase: false,
								},
								&andExpr{
									pos: position{line: 248, col: 13, offset: 6928},
									expr: &litMatcher{
										pos:        position{line: 248, col: 14, offset: 6929},
										val:        "[",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 249, col: 7, offset: 6941},
						run: (*parser).calloninline_element27,
						expr: &seqExpr{
							pos: position{line: 249, col: 7, offset: 6941},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 249, col: 7, offset: 6941},
									expr: &litMatcher{
										pos:        position{line: 249, col: 9, offset: 6943},
										val:        "[",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 249, col: 13, offset: 6947},
									label: "r",
									expr: &choiceExpr{
										pos: position{line: 249, col: 17, offset: 6951},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 249, col: 17, offset: 6951},
												name: "wikilink",
											},
											&ruleRefExpr{
												pos:  position{line: 249, col: 28, offset: 6962},
												name: "extlink",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 250, col: 7, offset: 7009},
						run: (*parser).calloninline_element35,
						expr: &seqExpr{
							pos: position{line: 250, col: 7, offset: 7009},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 250, col: 7, offset: 7009},
									expr: &litMatcher{
										pos:        position{line: 250, col: 9, offset: 7011},
										val:        "'",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 250, col: 13, offset: 7015},
									label: "r",
									expr: &ruleRefExpr{
										pos:  position{line: 250, col: 15, offset: 7017},
										name: "quote",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "heading",
			pos:  position{line: 254, col: 1, offset: 7072},
			expr: &actionExpr{
				pos: position{line: 254, col: 12, offset: 7083},
				run: (*parser).callonheading1,
				expr: &seqExpr{
					pos: position{line: 254, col: 12, offset: 7083},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 254, col: 12, offset: 7083},
							expr: &litMatcher{
								pos:        position{line: 254, col: 14, offset: 7085},
								val:        "=",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 256, col: 5, offset: 7184},
							label: "r",
							expr: &actionExpr{
								pos: position{line: 257, col: 6, offset: 7193},
								run: (*parser).callonheading6,
								expr: &seqExpr{
									pos: position{line: 257, col: 6, offset: 7193},
									exprs: []interface{}{
										&stateCodeExpr{
											pos: position{line: 257, col: 6, offset: 7193},
											run: (*parser).callonheading8,
										},
										&labeledExpr{
											pos:   position{line: 258, col: 6, offset: 7255},
											label: "s",
											expr: &oneOrMoreExpr{
												pos: position{line: 258, col: 8, offset: 7257},
												expr: &litMatcher{
													pos:        position{line: 258, col: 8, offset: 7257},
													val:        "=",
													ignoreCase: false,
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 259, col: 6, offset: 7321},
											label: "ce",
											expr: &zeroOrOneExpr{
												pos: position{line: 259, col: 9, offset: 7324},
												expr: &actionExpr{
													pos: position{line: 261, col: 8, offset: 7398},
													run: (*parser).callonheading14,
													expr: &seqExpr{
														pos: position{line: 261, col: 8, offset: 7398},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 261, col: 9, offset: 7399},
																label: "ill",
																expr: &choiceExpr{
																	pos: position{line: 261, col: 14, offset: 7404},
																	alternatives: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 261, col: 14, offset: 7404},
																			expr: &ruleRefExpr{
																				pos:  position{line: 261, col: 14, offset: 7404},
																				name: "urltext",
																			},
																		},
																		&zeroOrOneExpr{
																			pos: position{line: 261, col: 25, offset: 7415},
																			expr: &ruleRefExpr{
																				pos:  position{line: 261, col: 25, offset: 7415},
																				name: "inlineline",
																			},
																		},
																	},
																},
															},
															&oneOrMoreExpr{
																pos: position{line: 262, col: 8, offset: 7436},
																expr: &litMatcher{
																	pos:        position{line: 262, col: 8, offset: 7436},
																	val:        "=",
																	ignoreCase: false,
																},
															},
														},
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 264, col: 6, offset: 7472},
											run: (*parser).callonheading24,
										},
										&labeledExpr{
											pos:   position{line: 269, col: 6, offset: 7630},
											label: "spc",
											expr: &zeroOrMoreExpr{
												pos: position{line: 269, col: 10, offset: 7634},
												expr: &choiceExpr{
													pos: position{line: 269, col: 11, offset: 7635},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 269, col: 11, offset: 7635},
															name: "spaces",
														},
														&ruleRefExpr{
															pos:  position{line: 269, col: 20, offset: 7644},
															name: "comment",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 270, col: 6, offset: 7659},
											expr: &ruleRefExpr{
												pos:  position{line: 270, col: 7, offset: 7660},
												name: "eolf",
											},
										},
										&stateCodeExpr{
											pos: position{line: 271, col: 6, offset: 7670},
											run: (*parser).callonheading32,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "comment",
			pos:  position{line: 340, col: 1, offset: 9686},
			expr: &actionExpr{
				pos: position{line: 341, col: 8, offset: 9701},
				run: (*parser).calloncomment1,
				expr: &seqExpr{
					pos: position{line: 341, col: 8, offset: 9701},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 341, col: 8, offset: 9701},
							val:        "<!--",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 341, col: 15, offset: 9708},
							label: "c1",
							expr: &zeroOrMoreExpr{
								pos: position{line: 341, col: 18, offset: 9711},
								expr: &seqExpr{
									pos: position{line: 341, col: 19, offset: 9712},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 341, col: 19, offset: 9712},
											expr: &litMatcher{
												pos:        position{line: 341, col: 20, offset: 9713},
												val:        "-->",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 341, col: 26, offset: 9719,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 341, col: 31, offset: 9724},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 341, col: 31, offset: 9724},
									val:        "-->",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 39, offset: 9732},
									name: "eof",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "behavior_switch",
			pos:  position{line: 355, col: 1, offset: 10054},
			expr: &actionExpr{
				pos: position{line: 356, col: 6, offset: 10075},
				run: (*parser).callonbehavior_switch1,
				expr: &seqExpr{
					pos: position{line: 356, col: 7, offset: 10076},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 7, offset: 10076},
							val:        "__",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 356, col: 12, offset: 10081},
							name: "behavior_text",
						},
						&litMatcher{
							pos:        position{line: 356, col: 26, offset: 10095},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "behavior_text",
			pos:  position{line: 374, col: 1, offset: 10672},
			expr: &oneOrMoreExpr{
				pos: position{line: 374, col: 18, offset: 10689},
				expr: &seqExpr{
					pos: position{line: 374, col: 20, offset: 10691},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 374, col: 20, offset: 10691},
							expr: &litMatcher{
								pos:        position{line: 374, col: 21, offset: 10692},
								val:        "__",
								ignoreCase: false,
							},
						},
						&charClassMatcher{
							pos:        position{line: 374, col: 26, offset: 10697},
							val:        "[^'\"<~[{\\n\\r:;\\]}|!=]",
							chars:      []rune{'\'', '"', '<', '~', '[', '{', '\n', '\r', ':', ';', ']', '}', '|', '!', '='},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "autolink",
			pos:  position{line: 381, col: 1, offset: 10899},
			expr: &actionExpr{
				pos: position{line: 382, col: 6, offset: 10913},
				run: (*parser).callonautolink1,
				expr: &seqExpr{
					pos: position{line: 382, col: 6, offset: 10913},
					exprs: []interface{}{
						&notCodeExpr{
							pos: position{line: 382, col: 6, offset: 10913},
							run: (*parser).callonautolink3,
						},
						&notCodeExpr{
							pos: position{line: 384, col: 5, offset: 11048},
							run: (*parser).callonautolink4,
						},
						&labeledExpr{
							pos:   position{line: 385, col: 3, offset: 11124},
							label: "r",
							expr: &choiceExpr{
								pos: position{line: 387, col: 7, offset: 11154},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 387, col: 7, offset: 11154},
										run: (*parser).callonautolink7,
										expr: &labeledExpr{
											pos:   position{line: 387, col: 7, offset: 11154},
											label: "target",
											expr: &ruleRefExpr{
												pos:  position{line: 387, col: 14, offset: 11161},
												name: "autourl",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 393, col: 7, offset: 11352},
										name: "autoref",
									},
									&ruleRefExpr{
										pos:  position{line: 394, col: 7, offset: 11366},
										name: "isbn",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "extlink",
			pos:  position{line: 396, col: 1, offset: 11404},
			expr: &actionExpr{
				pos: position{line: 397, col: 6, offset: 11417},
				run: (*parser).callonextlink1,
				expr: &seqExpr{
					pos: position{line: 397, col: 6, offset: 11417},
					exprs: []interface{}{
						&notCodeExpr{
							pos: position{line: 397, col: 6, offset: 11417},
							run: (*parser).callonextlink3,
						},
						&choiceExpr{
							pos: position{line: 399, col: 9, offset: 11516},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 399, col: 9, offset: 11516},
									run: (*parser).callonextlink5,
									expr: &seqExpr{
										pos: position{line: 399, col: 9, offset: 11516},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 399, col: 9, offset: 11516},
												val:        "[",
												ignoreCase: false,
											},
											&andCodeExpr{
												pos: position{line: 400, col: 9, offset: 11528},
												run: (*parser).callonextlink8,
											},
											&choiceExpr{
												pos: position{line: 401, col: 10, offset: 11612},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 401, col: 10, offset: 11612},
														exprs: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 401, col: 10, offset: 11612},
																name: "url_protocol",
															},
															&ruleRefExpr{
																pos:  position{line: 401, col: 23, offset: 11625},
																name: "urladdr",
															},
														},
													},
													&litMatcher{
														pos:        position{line: 401, col: 33, offset: 11635},
														val:        "",
														ignoreCase: false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 402, col: 10, offset: 11648},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 402, col: 10, offset: 11648},
														name: "extlink_preprocessor_text",
													},
													&litMatcher{
														pos:        position{line: 402, col: 38, offset: 11676},
														val:        "",
														ignoreCase: false,
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 403, col: 9, offset: 11688},
												run: (*parser).callonextlink17,
											},
											&zeroOrMoreExpr{
												pos: position{line: 415, col: 9, offset: 12133},
												expr: &choiceExpr{
													pos: position{line: 415, col: 11, offset: 12135},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 415, col: 11, offset: 12135},
															name: "space",
														},
														&ruleRefExpr{
															pos:  position{line: 415, col: 19, offset: 12143},
															name: "unispace",
														},
													},
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 417, col: 9, offset: 12222},
												expr: &ruleRefExpr{
													pos:  position{line: 417, col: 9, offset: 12222},
													name: "inlineline",
												},
											},
											&litMatcher{
												pos:        position{line: 418, col: 9, offset: 12242},
												val:        "]",
												ignoreCase: false,
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 434, col: 9, offset: 12784},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 434, col: 9, offset: 12784},
											val:        "[",
											ignoreCase: false,
										},
										&andCodeExpr{
											pos: position{line: 434, col: 13, offset: 12788},
											run: (*parser).callonextlink27,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "autoref",
			pos:  position{line: 437, col: 1, offset: 12884},
			expr: &actionExpr{
				pos: position{line: 438, col: 6, offset: 12897},
				run: (*parser).callonautoref1,
				expr: &seqExpr{
					pos: position{line: 438, col: 6, offset: 12897},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 438, col: 7, offset: 12898},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 438, col: 7, offset: 12898},
									val:        "RFC",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 438, col: 15, offset: 12906},
									val:        "PMID",
									ignoreCase: false,
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 438, col: 23, offset: 12914},
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 23, offset: 12914},
								name: "space_or_nbsp",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 438, col: 38, offset: 12929},
							expr: &charClassMatcher{
								pos:        position{line: 438, col: 38, offset: 12929},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 438, col: 45, offset: 12936},
							name: "end_of_word",
						},
					},
				},
			},
		},
		{
			name: "isbn",
			pos:  position{line: 456, col: 1, offset: 13436},
			expr: &actionExpr{
				pos: position{line: 457, col: 6, offset: 13446},
				run: (*parser).callonisbn1,
				expr: &seqExpr{
					pos: position{line: 457, col: 6, offset: 13446},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 6, offset: 13446},
							val:        "ISBN",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 457, col: 13, offset: 13453},
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 13, offset: 13453},
								name: "space_or_nbsp",
							},
						},
						&seqExpr{
							pos: position{line: 458, col: 7, offset: 13476},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 458, col: 7, offset: 13476},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&oneOrMoreExpr{
									pos: position{line: 459, col: 7, offset: 13488},
									expr: &choiceExpr{
										pos: position{line: 459, col: 8, offset: 13489},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 459, col: 8, offset: 13489},
												run: (*parser).callonisbn10,
												expr: &seqExpr{
													pos: position{line: 459, col: 8, offset: 13489},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 459, col: 8, offset: 13489},
															name: "space_or_nbsp_or_dash",
														},
														&andExpr{
															pos: position{line: 459, col: 30, offset: 13511},
															expr: &charClassMatcher{
																pos:        position{line: 459, col: 31, offset: 13512},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 459, col: 72, offset: 13553},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 460, col: 8, offset: 13568},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 460, col: 8, offset: 13568},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 460, col: 9, offset: 13569},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 460, col: 9, offset: 13569},
															name: "space_or_nbsp_or_dash",
														},
														&litMatcher{
															pos:        position{line: 460, col: 33, offset: 13593},
															val:        "",
															ignoreCase: false,
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 460, col: 37, offset: 13597},
													val:        "[xX]",
													chars:      []rune{'x', 'X'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 460, col: 44, offset: 13604},
											val:        "",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 462, col: 7, offset: 13622},
							run: (*parser).callonisbn23,
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 7, offset: 13622},
								name: "end_of_word",
							},
						},
						&andCodeExpr{
							pos: position{line: 471, col: 7, offset: 13915},
							run: (*parser).callonisbn25,
						},
					},
				},
			},
		},
		{
			name: "url_protocol",
			pos:  position{line: 495, col: 1, offset: 14603},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 14623},
				run: (*parser).callonurl_protocol1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 14623},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 496, col: 5, offset: 14623},
							run: (*parser).callonurl_protocol3,
						},
						&choiceExpr{
							pos: position{line: 497, col: 7, offset: 14717},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 497, col: 7, offset: 14717},
									val:        "//",
									ignoreCase: false,
								},
								&seqExpr{
									pos: position{line: 497, col: 14, offset: 14724},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 497, col: 14, offset: 14724},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 497, col: 23, offset: 14733},
											expr: &charClassMatcher{
												pos:        position{line: 497, col: 23, offset: 14733},
												val:        "[-A-Za-z0-9+.]",
												chars:      []rune{'-', '+', '.'},
												ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 497, col: 39, offset: 14749},
											val:        ":",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 497, col: 43, offset: 14753},
											expr: &litMatcher{
												pos:        position{line: 497, col: 43, offset: 14753},
												val:        "//",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "no_punctuation_char",
			pos:  position{line: 500, col: 1, offset: 14845},
			expr: &charClassMatcher{
				pos:        position{line: 500, col: 24, offset: 14868},
				val:        "[^ :\\][\\r\\n\"'<>,.&%{]",
				chars:      []rune{' ', ':', ']', '[', '\r', '\n', '"', '\'', '<', '>', ',', '.', '&', '%', '{'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "url",
			pos:  position{line: 508, col: 1, offset: 15266},
			expr: &actionExpr{
				pos: position{line: 509, col: 6, offset: 15275},
				run: (*parser).callonurl1,
				expr: &seqExpr{
					pos: position{line: 509, col: 6, offset: 15275},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 509, col: 6, offset: 15275},
							label: "proto",
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 12, offset: 15281},
								name: "url_protocol",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 5, offset: 15298},
							label: "addr",
							expr: &choiceExpr{
								pos: position{line: 510, col: 11, offset: 15304},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 510, col: 11, offset: 15304},
										name: "urladdr",
									},
									&litMatcher{
										pos:        position{line: 510, col: 21, offset: 15314},
										val:        "",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 511, col: 5, offset: 15322},
							label: "path",
							expr: &zeroOrMoreExpr{
								pos: position{line: 511, col: 10, offset: 15327},
								expr: &choiceExpr{
									pos: position{line: 511, col: 13, offset: 15330},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 511, col: 15, offset: 15332},
											run: (*parser).callonurl12,
											expr: &seqExpr{
												pos: position{line: 511, col: 15, offset: 15332},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 511, col: 15, offset: 15332},
														expr: &ruleRefExpr{
															pos:  position{line: 511, col: 16, offset: 15333},
															name: "inline_breaks",
														},
													},
													&labeledExpr{
														pos:   position{line: 512, col: 15, offset: 15361},
														label: "c1",
														expr: &ruleRefExpr{
															pos:  position{line: 512, col: 18, offset: 15364},
															name: "no_punctuation_char",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 515, col: 15, offset: 15458},
											run: (*parser).callonurl18,
											expr: &labeledExpr{
												pos:   position{line: 515, col: 15, offset: 15458},
												label: "s",
												expr: &charClassMatcher{
													pos:        position{line: 515, col: 17, offset: 15460},
													val:        "[.:,']",
													chars:      []rune{'.', ':', ',', '\''},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 516, col: 15, offset: 15513},
											name: "comment",
										},
										&ruleRefExpr{
											pos:  position{line: 517, col: 15, offset: 15535},
											name: "tplarg_or_template",
										},
										&actionExpr{
											pos: position{line: 518, col: 15, offset: 15568},
											run: (*parser).callonurl23,
											expr: &seqExpr{
												pos: position{line: 518, col: 15, offset: 15568},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 518, col: 15, offset: 15568},
														expr: &seqExpr{
															pos: position{line: 518, col: 19, offset: 15572},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 518, col: 19, offset: 15572},
																	val:        "&",
																	ignoreCase: false,
																},
																&choiceExpr{
																	pos: position{line: 518, col: 25, offset: 15578},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 518, col: 25, offset: 15578},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 518, col: 25, offset: 15578},
																					val:        "[lL]",
																					chars:      []rune{'l', 'L'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 518, col: 29, offset: 15582},
																					val:        "[tT]",
																					chars:      []rune{'t', 'T'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 518, col: 36, offset: 15589},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 518, col: 36, offset: 15589},
																					val:        "[gG]",
																					chars:      []rune{'g', 'G'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 518, col: 40, offset: 15593},
																					val:        "[tT]",
																					chars:      []rune{'t', 'T'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 518, col: 47, offset: 15600},
																	val:        ";",
																	ignoreCase: false,
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 519, col: 17, offset: 15622},
														label: "r",
														expr: &choiceExpr{
															pos: position{line: 520, col: 21, offset: 15646},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 520, col: 21, offset: 15646},
																	run: (*parser).callonurl38,
																	expr: &seqExpr{
																		pos: position{line: 520, col: 21, offset: 15646},
																		exprs: []interface{}{
																			&andExpr{
																				pos: position{line: 520, col: 21, offset: 15646},
																				expr: &litMatcher{
																					pos:        position{line: 520, col: 23, offset: 15648},
																					val:        "&",
																					ignoreCase: false,
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 520, col: 27, offset: 15652},
																				label: "he",
																				expr: &ruleRefExpr{
																					pos:  position{line: 520, col: 30, offset: 15655},
																					name: "htmlentity",
																				},
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 521, col: 21, offset: 15719},
																	val:        "[&%{]",
																	chars:      []rune{'&', '%', '{'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 525, col: 10, offset: 15848},
							run: (*parser).callonurl45,
						},
					},
				},
			},
		},
		{
			name: "autourl",
			pos:  position{line: 539, col: 1, offset: 16459},
			expr: &choiceExpr{
				pos: position{line: 540, col: 6, offset: 16472},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 540, col: 6, offset: 16472},
						run: (*parser).callonautourl2,
						expr: &seqExpr{
							pos: position{line: 540, col: 6, offset: 16472},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 540, col: 6, offset: 16472},
									run: (*parser).callonautourl4,
								},
								&notExpr{
									pos: position{line: 541, col: 5, offset: 16553},
									expr: &litMatcher{
										pos:        position{line: 541, col: 7, offset: 16555},
										val:        "//",
										ignoreCase: false,
									},
								},
								&actionExpr{
									pos: position{line: 543, col: 5, offset: 16622},
									run: (*parser).callonautourl7,
									expr: &seqExpr{
										pos: position{line: 543, col: 5, offset: 16622},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 543, col: 5, offset: 16622},
												name: "url_protocol",
											},
											&choiceExpr{
												pos: position{line: 544, col: 6, offset: 16640},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 544, col: 6, offset: 16640},
														name: "urladdr",
													},
													&litMatcher{
														pos:        position{line: 544, col: 16, offset: 16650},
														val:        "",
														ignoreCase: false,
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 545, col: 5, offset: 16658},
												expr: &choiceExpr{
													pos: position{line: 545, col: 8, offset: 16661},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 545, col: 10, offset: 16663},
															run: (*parser).callonautourl15,
															expr: &seqExpr{
																pos: position{line: 545, col: 10, offset: 16663},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 545, col: 10, offset: 16663},
																		expr: &ruleRefExpr{
																			pos:  position{line: 545, col: 11, offset: 16664},
																			name: "inline_breaks",
																		},
																	},
																	&notExpr{
																		pos: position{line: 546, col: 15, offset: 16692},
																		expr: &litMatcher{
																			pos:        position{line: 546, col: 17, offset: 16694},
																			val:        "(",
																			ignoreCase: false,
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 547, col: 15, offset: 16712},
																		label: "c1",
																		expr: &ruleRefExpr{
																			pos:  position{line: 547, col: 18, offset: 16715},
																			name: "no_punctuation_char",
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 550, col: 15, offset: 16809},
															run: (*parser).callonautourl23,
															expr: &litMatcher{
																pos:        position{line: 550, col: 15, offset: 16809},
																val:        "(",
																ignoreCase: false,
															},
														},
														&charClassMatcher{
															pos:        position{line: 551, col: 15, offset: 16905},
															val:        "[.:,]",
															chars:      []rune{'.', ':', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 552, col: 16, offset: 16926},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 552, col: 16, offset: 16926},
																	val:        "[']",
																	chars:      []rune{'\''},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 552, col: 20, offset: 16930},
																	expr: &charClassMatcher{
																		pos:        position{line: 552, col: 21, offset: 16931},
																		val:        "[']",
																		chars:      []rune{'\''},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 553, col: 15, offset: 16997},
															name: "comment",
														},
														&ruleRefExpr{
															pos:  position{line: 554, col: 15, offset: 17019},
															name: "tplarg_or_template",
														},
														&actionExpr{
															pos: position{line: 555, col: 15, offset: 17052},
															run: (*parser).callonautourl32,
															expr: &seqExpr{
																pos: position{line: 555, col: 15, offset: 17052},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 555, col: 15, offset: 17052},
																		expr: &seqExpr{
																			pos: position{line: 555, col: 19, offset: 17056},
																			exprs: []interface{}{
																				&ruleRefExpr{
																					pos:  position{line: 555, col: 19, offset: 17056},
																					name: "raw_htmlentity",
																				},
																				&andCodeExpr{
																					pos: position{line: 555, col: 34, offset: 17071},
																					run: (*parser).callonautourl37,
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 556, col: 17, offset: 17149},
																		label: "r",
																		expr: &choiceExpr{
																			pos: position{line: 557, col: 21, offset: 17173},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 557, col: 21, offset: 17173},
																					run: (*parser).callonautourl40,
																					expr: &seqExpr{
																						pos: position{line: 557, col: 21, offset: 17173},
																						exprs: []interface{}{
																							&andExpr{
																								pos: position{line: 557, col: 21, offset: 17173},
																								expr: &litMatcher{
																									pos:        position{line: 557, col: 23, offset: 17175},
																									val:        "&",
																									ignoreCase: false,
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 557, col: 27, offset: 17179},
																								label: "he",
																								expr: &ruleRefExpr{
																									pos:  position{line: 557, col: 30, offset: 17182},
																									name: "htmlentity",
																								},
																							},
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 558, col: 21, offset: 17246},
																					val:        "[&%{]",
																					chars:      []rune{'&', '%', '{'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 586, col: 5, offset: 18250},
									run: (*parser).callonautourl47,
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 587, col: 7, offset: 18333},
						run: (*parser).callonautourl48,
					},
				},
			},
		},
		{
			name: "urladdr",
			pos:  position{line: 593, col: 1, offset: 18648},
			expr: &seqExpr{
				pos: position{line: 594, col: 8, offset: 18663},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 594, col: 8, offset: 18663},
						val:        "[",
						ignoreCase: false,
					},
					&oneOrMoreExpr{
						pos: position{line: 594, col: 12, offset: 18667},
						expr: &charClassMatcher{
							pos:        position{line: 594, col: 12, offset: 18667},
							val:        "[0-9A-Fa-f:.]",
							chars:      []rune{':', '.'},
							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 594, col: 27, offset: 18682},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "tplarg_or_template",
			pos:  position{line: 610, col: 1, offset: 19260},
			expr: &actionExpr{
				pos: position{line: 611, col: 6, offset: 19284},
				run: (*parser).callontplarg_or_template1,
				expr: &seqExpr{
					pos: position{line: 611, col: 6, offset: 19284},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 611, col: 6, offset: 19284},
							expr: &litMatcher{
								pos:        position{line: 611, col: 7, offset: 19285},
								val:        "{{",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 623, col: 5, offset: 19789},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 623, col: 7, offset: 19791},
								name: "tplarg_or_template_guarded",
							},
						},
					},
				},
			},
		},
		{
			name: "tplarg_or_template_guarded",
			pos:  position{line: 625, col: 1, offset: 19850},
			expr: &actionExpr{
				pos: position{line: 626, col: 6, offset: 19882},
				run: (*parser).callontplarg_or_template_guarded1,
				expr: &seqExpr{
					pos: position{line: 626, col: 6, offset: 19882},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 626, col: 6, offset: 19882},
							run: (*parser).callontplarg_or_template_guarded3,
						},
						&labeledExpr{
							pos:   position{line: 627, col: 5, offset: 19966},
							label: "r",
							expr: &choiceExpr{
								pos: position{line: 627, col: 9, offset: 19970},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 627, col: 9, offset: 19970},
										run: (*parser).callontplarg_or_template_guarded6,
										expr: &seqExpr{
											pos: position{line: 627, col: 9, offset: 19970},
											exprs: []interface{}{
												&andExpr{
													pos: position{line: 627, col: 9, offset: 19970},
													expr: &seqExpr{
														pos: position{line: 627, col: 11, offset: 19972},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 627, col: 11, offset: 19972},
																val:        "{{",
																ignoreCase: false,
															},
															&andExpr{
																pos: position{line: 627, col: 16, offset: 19977},
																expr: &seqExpr{
																	pos: position{line: 627, col: 18, offset: 19979},
																	exprs: []interface{}{
																		&oneOrMoreExpr{
																			pos: position{line: 627, col: 18, offset: 19979},
																			expr: &litMatcher{
																				pos:        position{line: 627, col: 18, offset: 19979},
																				val:        "{{{",
																				ignoreCase: false,
																			},
																		},
																		&notExpr{
																			pos: position{line: 627, col: 25, offset: 19986},
																			expr: &litMatcher{
																				pos:        position{line: 627, col: 26, offset: 19987},
																				val:        "{",
																				ignoreCase: false,
																			},
																		},
																	},
																},
															},
															&ruleRefExpr{
																pos:  position{line: 627, col: 31, offset: 19992},
																name: "tplarg",
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 627, col: 39, offset: 20000},
													label: "a",
													expr: &choiceExpr{
														pos: position{line: 627, col: 42, offset: 20003},
														alternatives: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 627, col: 42, offset: 20003},
																name: "template",
															},
															&ruleRefExpr{
																pos:  position{line: 627, col: 51, offset: 20012},
																name: "broken_template",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 628, col: 9, offset: 20068},
										run: (*parser).callontplarg_or_template_guarded22,
										expr: &seqExpr{
											pos: position{line: 628, col: 9, offset: 20068},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 628, col: 9, offset: 20068},
													label: "a",
													expr: &zeroOrOneExpr{
														pos: position{line: 628, col: 11, offset: 20070},
														expr: &seqExpr{
															pos: position{line: 628, col: 12, offset: 20071},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 628, col: 12, offset: 20071},
																	val:        "{",
																	ignoreCase: false,
																},
																&andExpr{
																	pos: position{line: 628, col: 16, offset: 20075},
																	expr: &seqExpr{
																		pos: position{line: 628, col: 18, offset: 20077},
																		exprs: []interface{}{
																			&oneOrMoreExpr{
																				pos: position{line: 628, col: 18, offset: 20077},
																				expr: &litMatcher{
																					pos:        position{line: 628, col: 18, offset: 20077},
																					val:        "{{{",
																					ignoreCase: false,
																				},
																			},
																			&notExpr{
																				pos: position{line: 628, col: 25, offset: 20084},
																				expr: &litMatcher{
																					pos:        position{line: 628, col: 26, offset: 20085},
																					val:        "{",
																					ignoreCase: false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 628, col: 33, offset: 20092},
													label: "b",
													expr: &ruleRefExpr{
														pos:  position{line: 628, col: 35, offset: 20094},
														name: "tplarg",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 629, col: 9, offset: 20163},
										run: (*parser).callontplarg_or_template_guarded36,
										expr: &seqExpr{
											pos: position{line: 629, col: 9, offset: 20163},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 629, col: 9, offset: 20163},
													label: "a",
													expr: &zeroOrOneExpr{
														pos: position{line: 629, col: 11, offset: 20165},
														expr: &seqExpr{
															pos: position{line: 629, col: 12, offset: 20166},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 629, col: 12, offset: 20166},
																	val:        "{",
																	ignoreCase: false,
																},
																&andExpr{
																	pos: position{line: 629, col: 16, offset: 20170},
																	expr: &seqExpr{
																		pos: position{line: 629, col: 18, offset: 20172},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 629, col: 18, offset: 20172},
																				val:        "{{",
																				ignoreCase: false,
																			},
																			&notExpr{
																				pos: position{line: 629, col: 23, offset: 20177},
																				expr: &litMatcher{
																					pos:        position{line: 629, col: 24, offset: 20178},
																					val:        "{",
																					ignoreCase: false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 629, col: 31, offset: 20185},
													label: "b",
													expr: &ruleRefExpr{
														pos:  position{line: 629, col: 33, offset: 20187},
														name: "template",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 630, col: 9, offset: 20258},
										run: (*parser).callontplarg_or_template_guarded49,
										expr: &labeledExpr{
											pos:   position{line: 630, col: 9, offset: 20258},
											label: "a",
											expr: &ruleRefExpr{
												pos:  position{line: 630, col: 11, offset: 20260},
												name: "broken_template",
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 631, col: 7, offset: 20313},
							run: (*parser).callontplarg_or_template_guarded52,
						},
					},
				},
			},
		},
		{
			name: "tplarg_or_template_or_bust",
			pos:  position{line: 642, col: 1, offset: 20462},
			expr: &oneOrMoreExpr{
				pos: position{line: 643, col: 8, offset: 20496},
				expr: &choiceExpr{
					pos: position{line: 643, col: 9, offset: 20497},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 643, col: 9, offset: 20497},
							name: "tplarg_or_template",
						},
						&anyMatcher{
							line: 643, col: 30, offset: 20518,
						},
					},
				},
			},
		},
		{
			name: "template",
			pos:  position{line: 645, col: 1, offset: 20523},
			expr: &actionExpr{
				pos: position{line: 646, col: 6, offset: 20537},
				run: (*parser).callontemplate1,
				expr: &seqExpr{
					pos: position{line: 646, col: 6, offset: 20537},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 646, col: 6, offset: 20537},
							run: (*parser).callontemplate3,
						},
						&labeledExpr{
							pos:   position{line: 651, col: 5, offset: 20681},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 7, offset: 20683},
								name: "template_preproc",
							},
						},
						&stateCodeExpr{
							pos: position{line: 652, col: 5, offset: 20704},
							run: (*parser).callontemplate6,
						},
					},
				},
			},
		},
		{
			name: "broken_template",
			pos:  position{line: 690, col: 1, offset: 22848},
			expr: &actionExpr{
				pos: position{line: 691, col: 6, offset: 22869},
				run: (*parser).callonbroken_template1,
				expr: &seqExpr{
					pos: position{line: 691, col: 6, offset: 22869},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 691, col: 6, offset: 22869},
							expr: &litMatcher{
								pos:        position{line: 691, col: 7, offset: 22870},
								val:        "{{",
								ignoreCase: false,
							},
						},
						&stateCodeExpr{
							pos: position{line: 691, col: 12, offset: 22875},
							run: (*parser).callonbroken_template5,
						},
						&labeledExpr{
							pos:   position{line: 693, col: 5, offset: 23042},
							label: "t",
							expr: &litMatcher{
								pos:        position{line: 693, col: 7, offset: 23044},
								val:        "{{",
								ignoreCase: false,
							},
						},
						&stateCodeExpr{
							pos: position{line: 694, col: 5, offset: 23053},
							run: (*parser).callonbroken_template8,
						},
					},
				},
			},
		},
		{
			name: "template_preproc",
			pos:  position{line: 697, col: 1, offset: 23122},
			expr: &choiceExpr{
				pos: position{line: 698, col: 6, offset: 23144},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 698, col: 6, offset: 23144},
						run: (*parser).callontemplate_preproc2,
						expr: &seqExpr{
							pos: position{line: 698, col: 6, offset: 23144},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 698, col: 6, offset: 23144},
									val:        "{{",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 698, col: 11, offset: 23149},
									expr: &ruleRefExpr{
										pos:  position{line: 698, col: 11, offset: 23149},
										name: "nl_comment_space",
									},
								},
								&andCodeExpr{
									pos: position{line: 699, col: 5, offset: 23171},
									run: (*parser).callontemplate_preproc7,
								},
								&labeledExpr{
									pos:   position{line: 700, col: 5, offset: 23236},
									label: "target",
									expr: &ruleRefExpr{
										pos:  position{line: 700, col: 12, offset: 23243},
										name: "template_param_value",
									},
								},
								&andCodeExpr{
									pos: position{line: 701, col: 5, offset: 23268},
									run: (*parser).callontemplate_preproc10,
								},
								&zeroOrMoreExpr{
									pos: position{line: 702, col: 5, offset: 23364},
									expr: &actionExpr{
										pos: position{line: 702, col: 6, offset: 23365},
										run: (*parser).callontemplate_preproc12,
										expr: &seqExpr{
											pos: position{line: 702, col: 6, offset: 23365},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 702, col: 6, offset: 23365},
													expr: &ruleRefExpr{
														pos:  position{line: 702, col: 6, offset: 23365},
														name: "nl_comment_space",
													},
												},
												&litMatcher{
													pos:        position{line: 702, col: 24, offset: 23383},
													val:        "|",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 703, col: 17, offset: 23403},
													label: "r",
													expr: &choiceExpr{
														pos: position{line: 704, col: 21, offset: 23427},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 704, col: 21, offset: 23427},
																run: (*parser).callontemplate_preproc19,
																expr: &seqExpr{
																	pos: position{line: 704, col: 21, offset: 23427},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 704, col: 21, offset: 23427},
																			label: "v",
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 704, col: 23, offset: 23429},
																				expr: &ruleRefExpr{
																					pos:  position{line: 704, col: 23, offset: 23429},
																					name: "nl_comment_space",
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 705, col: 21, offset: 23467},
																			expr: &choiceExpr{
																				pos: position{line: 705, col: 23, offset: 23469},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 705, col: 23, offset: 23469},
																						val:        "|",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 705, col: 29, offset: 23475},
																						val:        "}}",
																						ignoreCase: false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&ruleRefExpr{
																pos:  position{line: 709, col: 23, offset: 23660},
																name: "template_param",
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 712, col: 5, offset: 23745},
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 5, offset: 23745},
										name: "nl_comment_space",
									},
								},
								&andCodeExpr{
									pos: position{line: 713, col: 5, offset: 23767},
									run: (*parser).callontemplate_preproc31,
								},
								&ruleRefExpr{
									pos:  position{line: 714, col: 5, offset: 23824},
									name: "inline_breaks",
								},
								&litMatcher{
									pos:        position{line: 714, col: 19, offset: 23838},
									val:        "}}",
									ignoreCase: false,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 723, col: 10, offset: 24235},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 723, col: 10, offset: 24235},
								val:        "{{",
								ignoreCase: false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 723, col: 15, offset: 24240},
								expr: &ruleRefExpr{
									pos:  position{line: 723, col: 15, offset: 24240},
									name: "space_or_newline",
								},
							},
							&litMatcher{
								pos:        position{line: 723, col: 33, offset: 24258},
								val:        "}}",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "tplarg",
			pos:  position{line: 725, col: 1, offset: 24265},
			expr: &actionExpr{
				pos: position{line: 727, col: 5, offset: 24357},
				run: (*parser).callontplarg1,
				expr: &labeledExpr{
					pos:   position{line: 727, col: 5, offset: 24357},
					label: "t",
					expr: &choiceExpr{
						pos: position{line: 727, col: 8, offset: 24360},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 727, col: 8, offset: 24360},
								name: "tplarg_preproc",
							},
							&andCodeExpr{
								pos: position{line: 727, col: 25, offset: 24377},
								run: (*parser).callontplarg5,
							},
						},
					},
				},
			},
		},
		{
			name: "tplarg_preproc",
			pos:  position{line: 730, col: 1, offset: 24515},
			expr: &actionExpr{
				pos: position{line: 731, col: 6, offset: 24535},
				run: (*parser).callontplarg_preproc1,
				expr: &seqExpr{
					pos: position{line: 731, col: 6, offset: 24535},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 731, col: 6, offset: 24535},
							val:        "{{{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 733, col: 5, offset: 24599},
							label: "target",
							expr: &zeroOrOneExpr{
								pos: position{line: 733, col: 12, offset: 24606},
								expr: &ruleRefExpr{
									pos:  position{line: 733, col: 12, offset: 24606},
									name: "template_param_value",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 734, col: 5, offset: 24632},
							label: "params",
							expr: &zeroOrMoreExpr{
								pos: position{line: 734, col: 12, offset: 24639},
								expr: &actionExpr{
									pos: position{line: 734, col: 13, offset: 24640},
									run: (*parser).callontplarg_preproc9,
									expr: &seqExpr{
										pos: position{line: 734, col: 13, offset: 24640},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 734, col: 13, offset: 24640},
												expr: &ruleRefExpr{
													pos:  position{line: 734, col: 13, offset: 24640},
													name: "nl_comment_space",
												},
											},
											&litMatcher{
												pos:        position{line: 734, col: 31, offset: 24658},
												val:        "|",
												ignoreCase: false,
											},
											&choiceExpr{
												pos: position{line: 735, col: 19, offset: 24680},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 735, col: 19, offset: 24680},
														run: (*parser).callontplarg_preproc15,
														expr: &seqExpr{
															pos: position{line: 735, col: 19, offset: 24680},
															exprs: []interface{}{
																&actionExpr{
																	pos: position{line: 735, col: 20, offset: 24681},
																	run: (*parser).callontplarg_preproc17,
																	expr: &litMatcher{
																		pos:        position{line: 735, col: 20, offset: 24681},
																		val:        "",
																		ignoreCase: false,
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 736, col: 21, offset: 24748},
																	expr: &ruleRefExpr{
																		pos:  position{line: 736, col: 21, offset: 24748},
																		name: "nl_comment_space",
																	},
																},
																&actionExpr{
																	pos: position{line: 737, col: 22, offset: 24787},
																	run: (*parser).callontplarg_preproc21,
																	expr: &litMatcher{
																		pos:        position{line: 737, col: 22, offset: 24787},
																		val:        "",
																		ignoreCase: false,
																	},
																},
																&andExpr{
																	pos: position{line: 738, col: 21, offset: 24854},
																	expr: &choiceExpr{
																		pos: position{line: 738, col: 23, offset: 24856},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 738, col: 23, offset: 24856},
																				val:        "|",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 738, col: 29, offset: 24862},
																				val:        "}}}",
																				ignoreCase: false,
																			},
																		},
																	},
																},
															},
														},
													},
													&ruleRefExpr{
														pos:  position{line: 740, col: 23, offset: 25012},
														name: "template_param_value",
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 743, col: 5, offset: 25105},
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 5, offset: 25105},
								name: "nl_comment_space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 5, offset: 25127},
							name: "inline_breaks",
						},
						&litMatcher{
							pos:        position{line: 744, col: 19, offset: 25141},
							val:        "}}}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "template_param",
			pos:  position{line: 760, col: 1, offset: 25800},
			expr: &choiceExpr{
				pos: position{line: 761, col: 6, offset: 25820},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 761, col: 6, offset: 25820},
						run: (*parser).callontemplate_param2,
						expr: &seqExpr{
							pos: position{line: 761, col: 6, offset: 25820},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 761, col: 6, offset: 25820},
									name: "template_param_name",
								},
								&labeledExpr{
									pos:   position{line: 762, col: 5, offset: 25844},
									label: "val",
									expr: &zeroOrOneExpr{
										pos: position{line: 762, col: 9, offset: 25848},
										expr: &actionExpr{
											pos: position{line: 764, col: 9, offset: 25916},
											run: (*parser).callontemplate_param7,
											expr: &seqExpr{
												pos: position{line: 764, col: 9, offset: 25916},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 764, col: 9, offset: 25916},
														name: "optionalSpaceToken",
													},
													&litMatcher{
														pos:        position{line: 765, col: 9, offset: 25943},
														val:        "=",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 767, col: 9, offset: 26013},
														name: "optionalSpaceToken",
													},
													&labeledExpr{
														pos:   position{line: 768, col: 9, offset: 26040},
														label: "tpv",
														expr: &zeroOrOneExpr{
															pos: position{line: 768, col: 13, offset: 26044},
															expr: &ruleRefExpr{
																pos:  position{line: 768, col: 13, offset: 26044},
																name: "template_param_value",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 787, col: 5, offset: 26748},
						run: (*parser).callontemplate_param15,
						expr: &andExpr{
							pos: position{line: 787, col: 5, offset: 26748},
							expr: &charClassMatcher{
								pos:        position{line: 787, col: 7, offset: 26750},
								val:        "[|}]",
								chars:      []rune{'|', '}'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "template_param_name",
			pos:  position{line: 793, col: 1, offset: 26876},
			expr: &choiceExpr{
				pos: position{line: 794, col: 6, offset: 26901},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 794, col: 6, offset: 26901},
						run: (*parser).callontemplate_param_name2,
						expr: &seqExpr{
							pos: position{line: 794, col: 6, offset: 26901},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 794, col: 6, offset: 26901},
									run: (*parser).callontemplate_param_name4,
								},
								&labeledExpr{
									pos:   position{line: 797, col: 5, offset: 26993},
									label: "tpt",
									expr: &choiceExpr{
										pos: position{line: 797, col: 10, offset: 26998},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 797, col: 10, offset: 26998},
												name: "template_param_text",
											},
											&actionExpr{
												pos: position{line: 797, col: 32, offset: 27020},
												run: (*parser).callontemplate_param_name8,
												expr: &andExpr{
													pos: position{line: 797, col: 32, offset: 27020},
													expr: &litMatcher{
														pos:        position{line: 797, col: 33, offset: 27021},
														val:        "=",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 807, col: 5, offset: 27182},
						run: (*parser).callontemplate_param_name11,
					},
				},
			},
		},
		{
			name: "template_param_value",
			pos:  position{line: 813, col: 1, offset: 27270},
			expr: &actionExpr{
				pos: position{line: 814, col: 6, offset: 27296},
				run: (*parser).callontemplate_param_value1,
				expr: &seqExpr{
					pos: position{line: 814, col: 6, offset: 27296},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 814, col: 6, offset: 27296},
							run: (*parser).callontemplate_param_value3,
						},
						&labeledExpr{
							pos:   position{line: 815, col: 5, offset: 27341},
							label: "tpt",
							expr: &ruleRefExpr{
								pos:  position{line: 815, col: 9, offset: 27345},
								name: "template_param_text",
							},
						},
						&stateCodeExpr{
							pos: position{line: 816, col: 5, offset: 27369},
							run: (*parser).callontemplate_param_value6,
						},
					},
				},
			},
		},
		{
			name: "template_param_text",
			pos:  position{line: 825, col: 1, offset: 27539},
			expr: &actionExpr{
				pos: position{line: 826, col: 6, offset: 27564},
				run: (*parser).callontemplate_param_text1,
				expr: &seqExpr{
					pos: position{line: 826, col: 6, offset: 27564},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 826, col: 6, offset: 27564},
							run: (*parser).callontemplate_param_text3,
						},
						&labeledExpr{
							pos:   position{line: 842, col: 5, offset: 27990},
							label: "il",
							expr: &oneOrMoreExpr{
								pos: position{line: 842, col: 8, offset: 27993},
								expr: &choiceExpr{
									pos: position{line: 842, col: 9, offset: 27994},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 842, col: 9, offset: 27994},
											name: "nested_block",
										},
										&ruleRefExpr{
											pos:  position{line: 842, col: 24, offset: 28009},
											name: "newlineToken",
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 842, col: 39, offset: 28024},
							run: (*parser).callontemplate_param_text9,
						},
					},
				},
			},
		},
		{
			name: "lang_variant_or_tpl",
			pos:  position{line: 875, col: 1, offset: 28924},
			expr: &choiceExpr{
				pos: position{line: 876, col: 6, offset: 28949},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 876, col: 6, offset: 28949},
						run: (*parser).callonlang_variant_or_tpl2,
						expr: &seqExpr{
							pos: position{line: 876, col: 6, offset: 28949},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 876, col: 6, offset: 28949},
									expr: &seqExpr{
										pos: position{line: 876, col: 8, offset: 28951},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 876, col: 8, offset: 28951},
												val:        "-{",
												ignoreCase: false,
											},
											&andExpr{
												pos: position{line: 876, col: 13, offset: 28956},
												expr: &seqExpr{
													pos: position{line: 876, col: 15, offset: 28958},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 876, col: 15, offset: 28958},
															expr: &litMatcher{
																pos:        position{line: 876, col: 15, offset: 28958},
																val:        "{{{",
																ignoreCase: false,
															},
														},
														&notExpr{
															pos: position{line: 876, col: 22, offset: 28965},
															expr: &litMatcher{
																pos:        position{line: 876, col: 23, offset: 28966},
																val:        "{",
																ignoreCase: false,
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 876, col: 28, offset: 28971},
												name: "tplarg",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 876, col: 36, offset: 28979},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 876, col: 38, offset: 28981},
										name: "lang_variant",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 877, col: 5, offset: 29029},
						run: (*parser).callonlang_variant_or_tpl16,
						expr: &seqExpr{
							pos: position{line: 877, col: 5, offset: 29029},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 877, col: 5, offset: 29029},
									label: "a",
									expr: &seqExpr{
										pos: position{line: 877, col: 8, offset: 29032},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 877, col: 8, offset: 29032},
												val:        "-",
												ignoreCase: false,
											},
											&andExpr{
												pos: position{line: 877, col: 12, offset: 29036},
												expr: &seqExpr{
													pos: position{line: 877, col: 14, offset: 29038},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 877, col: 14, offset: 29038},
															expr: &litMatcher{
																pos:        position{line: 877, col: 14, offset: 29038},
																val:        "{{{",
																ignoreCase: false,
															},
														},
														&notExpr{
															pos: position{line: 877, col: 21, offset: 29045},
															expr: &litMatcher{
																pos:        position{line: 877, col: 22, offset: 29046},
																val:        "{",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 877, col: 28, offset: 29052},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 30, offset: 29054},
										name: "tplarg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 878, col: 5, offset: 29119},
						run: (*parser).callonlang_variant_or_tpl29,
						expr: &seqExpr{
							pos: position{line: 878, col: 5, offset: 29119},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 878, col: 5, offset: 29119},
									label: "a",
									expr: &seqExpr{
										pos: position{line: 878, col: 8, offset: 29122},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 878, col: 8, offset: 29122},
												val:        "-",
												ignoreCase: false,
											},
											&andExpr{
												pos: position{line: 878, col: 12, offset: 29126},
												expr: &seqExpr{
													pos: position{line: 878, col: 14, offset: 29128},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 878, col: 14, offset: 29128},
															val:        "{{",
															ignoreCase: false,
														},
														&zeroOrMoreExpr{
															pos: position{line: 878, col: 19, offset: 29133},
															expr: &litMatcher{
																pos:        position{line: 878, col: 19, offset: 29133},
																val:        "{{{",
																ignoreCase: false,
															},
														},
														&notExpr{
															pos: position{line: 878, col: 26, offset: 29140},
															expr: &litMatcher{
																pos:        position{line: 878, col: 27, offset: 29141},
																val:        "{",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 878, col: 33, offset: 29147},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 35, offset: 29149},
										name: "template",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 879, col: 5, offset: 29216},
						run: (*parser).callonlang_variant_or_tpl43,
						expr: &seqExpr{
							pos: position{line: 879, col: 5, offset: 29216},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 879, col: 5, offset: 29216},
									expr: &litMatcher{
										pos:        position{line: 879, col: 6, offset: 29217},
										val:        "-{",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 879, col: 11, offset: 29222},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 879, col: 13, offset: 29224},
										name: "lang_variant",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "broken_lang_variant",
			pos:  position{line: 881, col: 1, offset: 29269},
			expr: &actionExpr{
				pos: position{line: 882, col: 6, offset: 29294},
				run: (*parser).callonbroken_lang_variant1,
				expr: &seqExpr{
					pos: position{line: 882, col: 6, offset: 29294},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 882, col: 6, offset: 29294},
							run: (*parser).callonbroken_lang_variant3,
						},
						&labeledExpr{
							pos:   position{line: 884, col: 5, offset: 29433},
							label: "r",
							expr: &litMatcher{
								pos:        position{line: 884, col: 7, offset: 29435},
								val:        "-{",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant",
			pos:  position{line: 886, col: 1, offset: 29472},
			expr: &choiceExpr{
				pos: position{line: 887, col: 6, offset: 29490},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 887, col: 6, offset: 29490},
						run: (*parser).callonlang_variant2,
						expr: &seqExpr{
							pos: position{line: 887, col: 6, offset: 29490},
							exprs: []interface{}{
								&actionExpr{
									pos: position{line: 887, col: 7, offset: 29491},
									run: (*parser).callonlang_variant4,
									expr: &litMatcher{
										pos:        position{line: 887, col: 7, offset: 29491},
										val:        "",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 888, col: 5, offset: 29568},
									label: "lv",
									expr: &choiceExpr{
										pos: position{line: 888, col: 9, offset: 29572},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 888, col: 9, offset: 29572},
												name: "lang_variant_preproc",
											},
											&andCodeExpr{
												pos: position{line: 888, col: 32, offset: 29595},
												run: (*parser).callonlang_variant9,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 890, col: 5, offset: 29737},
						name: "broken_lang_variant",
					},
				},
			},
		},
		{
			name: "lang_variant_preproc",
			pos:  position{line: 892, col: 1, offset: 29758},
			expr: &actionExpr{
				pos: position{line: 893, col: 6, offset: 29784},
				run: (*parser).callonlang_variant_preproc1,
				expr: &seqExpr{
					pos: position{line: 893, col: 6, offset: 29784},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 893, col: 7, offset: 29785},
							run: (*parser).callonlang_variant_preproc3,
							expr: &litMatcher{
								pos:        position{line: 893, col: 7, offset: 29785},
								val:        "-{",
								ignoreCase: false,
							},
						},
						&choiceExpr{
							pos: position{line: 895, col: 8, offset: 29849},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 895, col: 8, offset: 29849},
									run: (*parser).callonlang_variant_preproc6,
									expr: &seqExpr{
										pos: position{line: 895, col: 8, offset: 29849},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 895, col: 8, offset: 29849},
												run: (*parser).callonlang_variant_preproc8,
											},
											&labeledExpr{
												pos:   position{line: 896, col: 8, offset: 29918},
												label: "ff",
												expr: &ruleRefExpr{
													pos:  position{line: 896, col: 11, offset: 29921},
													name: "opt_lang_variant_flags",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 909, col: 8, offset: 30325},
									run: (*parser).callonlang_variant_preproc11,
									expr: &seqExpr{
										pos: position{line: 909, col: 8, offset: 30325},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 909, col: 8, offset: 30325},
												run: (*parser).callonlang_variant_preproc13,
											},
											&litMatcher{
												pos:        position{line: 910, col: 8, offset: 30395},
												val:        "",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 918, col: 7, offset: 30560},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 918, col: 7, offset: 30560},
									run: (*parser).callonlang_variant_preproc16,
									expr: &seqExpr{
										pos: position{line: 918, col: 7, offset: 30560},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 918, col: 7, offset: 30560},
												run: (*parser).callonlang_variant_preproc18,
											},
											&labeledExpr{
												pos:   position{line: 918, col: 48, offset: 30601},
												label: "lv",
												expr: &ruleRefExpr{
													pos:  position{line: 918, col: 51, offset: 30604},
													name: "lang_variant_text",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 920, col: 7, offset: 30681},
									run: (*parser).callonlang_variant_preproc21,
									expr: &seqExpr{
										pos: position{line: 920, col: 7, offset: 30681},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 920, col: 7, offset: 30681},
												run: (*parser).callonlang_variant_preproc23,
											},
											&labeledExpr{
												pos:   position{line: 920, col: 49, offset: 30723},
												label: "lv",
												expr: &ruleRefExpr{
													pos:  position{line: 920, col: 52, offset: 30726},
													name: "lang_variant_option_list",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 922, col: 5, offset: 30794},
							name: "inline_breaks",
						},
						&actionExpr{
							pos: position{line: 923, col: 6, offset: 30813},
							run: (*parser).callonlang_variant_preproc27,
							expr: &litMatcher{
								pos:        position{line: 923, col: 6, offset: 30813},
								val:        "}-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "opt_lang_variant_flags",
			pos:  position{line: 963, col: 1, offset: 32085},
			expr: &actionExpr{
				pos: position{line: 964, col: 6, offset: 32113},
				run: (*parser).callonopt_lang_variant_flags1,
				expr: &labeledExpr{
					pos:   position{line: 964, col: 6, offset: 32113},
					label: "f",
					expr: &zeroOrOneExpr{
						pos: position{line: 964, col: 8, offset: 32115},
						expr: &actionExpr{
							pos: position{line: 964, col: 10, offset: 32117},
							run: (*parser).callonopt_lang_variant_flags4,
							expr: &seqExpr{
								pos: position{line: 964, col: 10, offset: 32117},
								exprs: []interface{}{
									&labeledExpr{
										pos:   position{line: 964, col: 10, offset: 32117},
										label: "ff",
										expr: &ruleRefExpr{
											pos:  position{line: 964, col: 13, offset: 32120},
											name: "lang_variant_flags",
										},
									},
									&litMatcher{
										pos:        position{line: 964, col: 32, offset: 32139},
										val:        "|",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant_flags",
			pos:  position{line: 1037, col: 1, offset: 34439},
			expr: &choiceExpr{
				pos: position{line: 1038, col: 6, offset: 34463},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1038, col: 6, offset: 34463},
						run: (*parser).callonlang_variant_flags2,
						expr: &seqExpr{
							pos: position{line: 1038, col: 6, offset: 34463},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 1038, col: 7, offset: 34464},
									expr: &ruleRefExpr{
										pos:  position{line: 1038, col: 7, offset: 34464},
										name: "space_or_newline",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1038, col: 26, offset: 34483},
									name: "lang_variant_flag",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1038, col: 45, offset: 34502},
									expr: &ruleRefExpr{
										pos:  position{line: 1038, col: 45, offset: 34502},
										name: "space_or_newline",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1039, col: 5, offset: 34525},
									expr: &seqExpr{
										pos: position{line: 1039, col: 7, offset: 34527},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1039, col: 7, offset: 34527},
												val:        ";",
												ignoreCase: false,
											},
											&zeroOrOneExpr{
												pos: position{line: 1039, col: 11, offset: 34531},
												expr: &ruleRefExpr{
													pos:  position{line: 1039, col: 11, offset: 34531},
													name: "lang_variant_flags",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1050, col: 5, offset: 34871},
						run: (*parser).callonlang_variant_flags14,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1050, col: 6, offset: 34872},
							expr: &ruleRefExpr{
								pos:  position{line: 1050, col: 6, offset: 34872},
								name: "space_or_newline",
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant_flag",
			pos:  position{line: 1056, col: 1, offset: 34972},
			expr: &choiceExpr{
				pos: position{line: 1057, col: 6, offset: 34995},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1057, col: 6, offset: 34995},
						run: (*parser).callonlang_variant_flag2,
						expr: &charClassMatcher{
							pos:        position{line: 1057, col: 6, offset: 34995},
							val:        "[-+A-Z]",
							chars:      []rune{'-', '+'},
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&actionExpr{
						pos: position{line: 1058, col: 5, offset: 35060},
						run: (*parser).callonlang_variant_flag4,
						expr: &ruleRefExpr{
							pos:  position{line: 1058, col: 5, offset: 35060},
							name: "lang_variant_name",
						},
					},
					&actionExpr{
						pos: position{line: 1059, col: 5, offset: 35128},
						run: (*parser).callonlang_variant_flag6,
						expr: &oneOrMoreExpr{
							pos: position{line: 1059, col: 5, offset: 35128},
							expr: &seqExpr{
								pos: position{line: 1059, col: 6, offset: 35129},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1059, col: 6, offset: 35129},
										expr: &ruleRefExpr{
											pos:  position{line: 1059, col: 7, offset: 35130},
											name: "space_or_newline",
										},
									},
									&notExpr{
										pos: position{line: 1059, col: 24, offset: 35147},
										expr: &ruleRefExpr{
											pos:  position{line: 1059, col: 25, offset: 35148},
											name: "nowiki",
										},
									},
									&charClassMatcher{
										pos:        position{line: 1059, col: 32, offset: 35155},
										val:        "[^{}|;]",
										chars:      []rune{'{', '}', '|', ';'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant_name",
			pos:  position{line: 1062, col: 1, offset: 35236},
			expr: &choiceExpr{
				pos: position{line: 1063, col: 6, offset: 35306},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1063, col: 6, offset: 35306},
						run: (*parser).callonlang_variant_name2,
						expr: &seqExpr{
							pos: position{line: 1063, col: 6, offset: 35306},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 1063, col: 6, offset: 35306},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1063, col: 12, offset: 35312},
									expr: &charClassMatcher{
										pos:        position{line: 1063, col: 12, offset: 35312},
										val:        "[-a-z]",
										chars:      []rune{'-'},
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 5, offset: 35522},
						name: "nowiki_text",
					},
				},
			},
		},
		{
			name: "lang_variant_option_list",
			pos:  position{line: 1069, col: 1, offset: 35535},
			expr: &choiceExpr{
				pos: position{line: 1070, col: 6, offset: 35565},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1070, col: 6, offset: 35565},
						run: (*parser).callonlang_variant_option_list2,
						expr: &seqExpr{
							pos: position{line: 1070, col: 6, offset: 35565},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1070, col: 6, offset: 35565},
									name: "lang_variant_option",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1070, col: 26, offset: 35585},
									expr: &actionExpr{
										pos: position{line: 1070, col: 28, offset: 35587},
										run: (*parser).callonlang_variant_option_list6,
										expr: &seqExpr{
											pos: position{line: 1070, col: 28, offset: 35587},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1070, col: 28, offset: 35587},
													val:        ";",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1070, col: 32, offset: 35591},
													name: "lang_variant_option",
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1071, col: 5, offset: 35651},
									expr: &seqExpr{
										pos: position{line: 1071, col: 7, offset: 35653},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1071, col: 7, offset: 35653},
												val:        ";",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1071, col: 11, offset: 35657},
												expr: &ruleRefExpr{
													pos:  position{line: 1071, col: 11, offset: 35657},
													name: "space_or_newline",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 35868},
						run: (*parser).callonlang_variant_option_list15,
						expr: &ruleRefExpr{
							pos:  position{line: 1079, col: 5, offset: 35868},
							name: "lang_variant_text",
						},
					},
				},
			},
		},
		{
			name: "lang_variant_option",
			pos:  position{line: 1081, col: 1, offset: 35937},
			expr: &choiceExpr{
				pos: position{line: 1082, col: 6, offset: 35962},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1082, col: 6, offset: 35962},
						run: (*parser).callonlang_variant_option2,
						expr: &seqExpr{
							pos: position{line: 1082, col: 6, offset: 35962},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 1082, col: 7, offset: 35963},
									expr: &ruleRefExpr{
										pos:  position{line: 1082, col: 7, offset: 35963},
										name: "space_or_newline",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1082, col: 26, offset: 35982},
									name: "lang_variant_name",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1083, col: 6, offset: 36005},
									expr: &ruleRefExpr{
										pos:  position{line: 1083, col: 6, offset: 36005},
										name: "space_or_newline",
									},
								},
								&litMatcher{
									pos:        position{line: 1083, col: 25, offset: 36024},
									val:        ":",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1084, col: 6, offset: 36033},
									expr: &ruleRefExpr{
										pos:  position{line: 1084, col: 6, offset: 36033},
										name: "space_or_newline",
									},
								},
								&choiceExpr{
									pos: position{line: 1085, col: 6, offset: 36057},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1085, col: 6, offset: 36057},
											name: "lang_variant_nowiki",
										},
										&ruleRefExpr{
											pos:  position{line: 1085, col: 28, offset: 36079},
											name: "lang_variant_text_no_semi",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1096, col: 5, offset: 36296},
						run: (*parser).callonlang_variant_option15,
						expr: &seqExpr{
							pos: position{line: 1096, col: 5, offset: 36296},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 1096, col: 6, offset: 36297},
									expr: &ruleRefExpr{
										pos:  position{line: 1096, col: 6, offset: 36297},
										name: "space_or_newline",
									},
								},
								&choiceExpr{
									pos: position{line: 1097, col: 6, offset: 36321},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1097, col: 6, offset: 36321},
											name: "lang_variant_nowiki",
										},
										&ruleRefExpr{
											pos:  position{line: 1097, col: 28, offset: 36343},
											name: "lang_variant_text_no_semi_or_arrow",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1098, col: 5, offset: 36383},
									val:        "=>",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1099, col: 6, offset: 36393},
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 6, offset: 36393},
										name: "space_or_newline",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1099, col: 25, offset: 36412},
									name: "lang_variant_name",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1100, col: 6, offset: 36435},
									expr: &ruleRefExpr{
										pos:  position{line: 1100, col: 6, offset: 36435},
										name: "space_or_newline",
									},
								},
								&litMatcher{
									pos:        position{line: 1100, col: 25, offset: 36454},
									val:        ":",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1101, col: 6, offset: 36463},
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 6, offset: 36463},
										name: "space_or_newline",
									},
								},
								&choiceExpr{
									pos: position{line: 1102, col: 6, offset: 36487},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1102, col: 6, offset: 36487},
											name: "lang_variant_nowiki",
										},
										&ruleRefExpr{
											pos:  position{line: 1102, col: 28, offset: 36509},
											name: "lang_variant_text_no_semi",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant_nowiki",
			pos:  position{line: 1118, col: 1, offset: 36939},
			expr: &actionExpr{
				pos: position{line: 1119, col: 6, offset: 36964},
				run: (*parser).callonlang_variant_nowiki1,
				expr: &seqExpr{
					pos: position{line: 1119, col: 6, offset: 36964},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 1119, col: 7, offset: 36965},
							run: (*parser).callonlang_variant_nowiki3,
							expr: &litMatcher{
								pos:        position{line: 1119, col: 7, offset: 36965},
								val:        "",
								ignoreCase: false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1120, col: 5, offset: 37016},
							name: "nowiki_text",
						},
						&actionExpr{
							pos: position{line: 1121, col: 6, offset: 37033},
							run: (*parser).callonlang_variant_nowiki6,
							expr: &litMatcher{
								pos:        position{line: 1121, col: 6, offset: 37033},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1122, col: 5, offset: 37083},
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 5, offset: 37083},
								name: "space_or_newline",
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant_text",
			pos:  position{line: 1128, col: 1, offset: 37187},
			expr: &actionExpr{
				pos: position{line: 1129, col: 6, offset: 37210},
				run: (*parser).callonlang_variant_text1,
				expr: &seqExpr{
					pos: position{line: 1129, col: 6, offset: 37210},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 1129, col: 7, offset: 37211},
							run: (*parser).callonlang_variant_text3,
							expr: &litMatcher{
								pos:        position{line: 1129, col: 7, offset: 37211},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1130, col: 5, offset: 37262},
							expr: &choiceExpr{
								pos: position{line: 1130, col: 6, offset: 37263},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1130, col: 6, offset: 37263},
										name: "inlineline",
									},
									&litMatcher{
										pos:        position{line: 1130, col: 19, offset: 37276},
										val:        "|",
										ignoreCase: false,
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 1131, col: 6, offset: 37288},
							run: (*parser).callonlang_variant_text9,
							expr: &litMatcher{
								pos:        position{line: 1131, col: 6, offset: 37288},
								val:        "",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "lang_variant_text_no_semi",
			pos:  position{line: 1134, col: 1, offset: 37420},
			expr: &choiceExpr{
				pos: position{line: 1135, col: 6, offset: 37451},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1135, col: 6, offset: 37451},
						run: (*parser).callonlang_variant_text_no_semi2,
						expr: &seqExpr{
							pos: position{line: 1135, col: 6, offset: 37451},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1135, col: 6, offset: 37451},
									run: (*parser).callonlang_variant_text_no_semi4,
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 5, offset: 37520},
									name: "lang_variant_text",
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1138, col: 5, offset: 37608},
						run: (*parser).callonlang_variant_text_no_semi6,
					},
				},
			},
		},
		{
			name: "lang_variant_text_no_semi_or_arrow",
			pos:  position{line: 1140, col: 1, offset: 37667},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 6, offset: 37707},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1141, col: 6, offset: 37707},
						run: (*parser).callonlang_variant_text_no_semi_or_arrow2,
						expr: &seqExpr{
							pos: position{line: 1141, col: 6, offset: 37707},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1141, col: 6, offset: 37707},
									run: (*parser).callonlang_variant_text_no_semi_or_arrow4,
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 5, offset: 37772},
									name: "lang_variant_text_no_semi",
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1143, col: 5, offset: 37860},
						run: (*parser).callonlang_variant_text_no_semi_or_arrow6,
					},
				},
			},
		},
		{
			name: "wikilink_content",
			pos:  position{line: 1145, col: 1, offset: 37915},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1146, col: 7, offset: 37938},
				expr: &actionExpr{
					pos: position{line: 1146, col: 8, offset: 37939},
					run: (*parser).callonwikilink_content2,
					expr: &seqExpr{
						pos: position{line: 1146, col: 8, offset: 37939},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1146, col: 8, offset: 37939},
								name: "pipe",
							},
							&labeledExpr{
								pos:   position{line: 1146, col: 13, offset: 37944},
								label: "lt",
								expr: &zeroOrOneExpr{
									pos: position{line: 1146, col: 16, offset: 37947},
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 16, offset: 37947},
										name: "link_text",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "wikilink",
			pos:  position{line: 1155, col: 1, offset: 38184},
			expr: &choiceExpr{
				pos: position{line: 1155, col: 13, offset: 38196},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1155, col: 13, offset: 38196},
						name: "wikilink_preproc",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 32, offset: 38215},
						name: "broken_wikilink",
					},
				},
			},
		},
		{
			name: "broken_wikilink",
			pos:  position{line: 1161, col: 1, offset: 38500},
			expr: &actionExpr{
				pos: position{line: 1162, col: 6, offset: 38521},
				run: (*parser).callonbroken_wikilink1,
				expr: &seqExpr{
					pos: position{line: 1162, col: 6, offset: 38521},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1162, col: 6, offset: 38521},
							expr: &litMatcher{
								pos:        position{line: 1162, col: 7, offset: 38522},
								val:        "[[",
								ignoreCase: false,
							},
						},
						&stateCodeExpr{
							pos: position{line: 1162, col: 12, offset: 38527},
							run: (*parser).callonbroken_wikilink5,
						},
						&labeledExpr{
							pos:   position{line: 1167, col: 5, offset: 38644},
							label: "a",
							expr: &seqExpr{
								pos: position{line: 1167, col: 8, offset: 38647},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1167, col: 8, offset: 38647},
										val:        "[",
										ignoreCase: false,
									},
									&choiceExpr{
										pos: position{line: 1167, col: 13, offset: 38652},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1167, col: 13, offset: 38652},
												name: "extlink",
											},
											&litMatcher{
												pos:        position{line: 1167, col: 23, offset: 38662},
												val:        "[",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 1168, col: 5, offset: 38672},
							run: (*parser).callonbroken_wikilink12,
						},
					},
				},
			},
		},
		{
			name: "wikilink_preproc",
			pos:  position{line: 1174, col: 1, offset: 38762},
			expr: &actionExpr{
				pos: position{line: 1175, col: 6, offset: 38784},
				run: (*parser).callonwikilink_preproc1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 6, offset: 38784},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1175, col: 6, offset: 38784},
							val:        "[[",
							ignoreCase: false,
						},
						&stateCodeExpr{
							pos: position{line: 1176, col: 5, offset: 38793},
							run: (*parser).callonwikilink_preproc4,
						},
						&labeledExpr{
							pos:   position{line: 1177, col: 5, offset: 38839},
							label: "target",
							expr: &zeroOrOneExpr{
								pos: position{line: 1177, col: 12, offset: 38846},
								expr: &ruleRefExpr{
									pos:  position{line: 1177, col: 12, offset: 38846},
									name: "wikilink_preprocessor_text",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1178, col: 5, offset: 38878},
							run: (*parser).callonwikilink_preproc8,
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 5, offset: 39002},
							label: "lcs",
							expr: &ruleRefExpr{
								pos:  position{line: 1180, col: 9, offset: 39006},
								name: "wikilink_content",
							},
						},
						&andCodeExpr{
							pos: position{line: 1181, col: 5, offset: 39027},
							run: (*parser).callonwikilink_preproc11,
						},
						&ruleRefExpr{
							pos:  position{line: 1182, col: 5, offset: 39124},
							name: "inline_breaks",
						},
						&litMatcher{
							pos:        position{line: 1182, col: 19, offset: 39138},
							val:        "]]",
							ignoreCase: false,
						},
						&stateCodeExpr{
							pos: position{line: 1183, col: 5, offset: 39147},
							run: (*parser).callonwikilink_preproc14,
						},
					},
				},
			},
		},
		{
			name: "link_text",
			pos:  position{line: 1230, col: 1, offset: 40427},
			expr: &actionExpr{
				pos: position{line: 1231, col: 6, offset: 40442},
				run: (*parser).callonlink_text1,
				expr: &seqExpr{
					pos: position{line: 1231, col: 6, offset: 40442},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 1231, col: 6, offset: 40442},
							run: (*parser).callonlink_text3,
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 5, offset: 40611},
							label: "c1",
							expr: &oneOrMoreExpr{
								pos: position{line: 1237, col: 8, offset: 40614},
								expr: &choiceExpr{
									pos: position{line: 1240, col: 10, offset: 40808},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 1240, col: 11, offset: 40809},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1240, col: 11, offset: 40809},
													name: "sol",
												},
												&choiceExpr{
													pos: position{line: 1240, col: 16, offset: 40814},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1240, col: 16, offset: 40814},
															name: "heading",
														},
														&ruleRefExpr{
															pos:  position{line: 1240, col: 26, offset: 40824},
															name: "hr",
														},
														&ruleRefExpr{
															pos:  position{line: 1240, col: 31, offset: 40829},
															name: "full_table_in_link_caption",
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1241, col: 10, offset: 40867},
											name: "urltext",
										},
										&actionExpr{
											pos: position{line: 1242, col: 11, offset: 40885},
											run: (*parser).callonlink_text14,
											expr: &seqExpr{
												pos: position{line: 1242, col: 11, offset: 40885},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1242, col: 11, offset: 40885},
														expr: &ruleRefExpr{
															pos:  position{line: 1242, col: 12, offset: 40886},
															name: "inline_breaks",
														},
													},
													&labeledExpr{
														pos:   position{line: 1243, col: 11, offset: 40910},
														label: "r",
														expr: &choiceExpr{
															pos: position{line: 1243, col: 15, offset: 40914},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1243, col: 15, offset: 40914},
																	name: "inline_element",
																},
																&seqExpr{
																	pos: position{line: 1243, col: 32, offset: 40931},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1243, col: 32, offset: 40931},
																			val:        "[",
																			ignoreCase: false,
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 1243, col: 36, offset: 40935},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1243, col: 36, offset: 40935},
																				name: "text_char",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 1243, col: 47, offset: 40946},
																			val:        "]",
																			ignoreCase: false,
																		},
																		&andExpr{
																			pos: position{line: 1243, col: 52, offset: 40951},
																			expr: &choiceExpr{
																				pos: position{line: 1243, col: 54, offset: 40953},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 1243, col: 54, offset: 40953},
																						expr: &litMatcher{
																							pos:        position{line: 1243, col: 55, offset: 40954},
																							val:        "]",
																							ignoreCase: false,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 1243, col: 61, offset: 40960},
																						val:        "]]",
																						ignoreCase: false,
																					},
																				},
																			},
																		},
																	},
																},
																&anyMatcher{
																	line: 1243, col: 70, offset: 40969,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 1245, col: 8, offset: 41007},
							run: (*parser).callonlink_text32,
						},
					},
				},
			},
		},
		{
			name: "quote",
			pos:  position{line: 1261, col: 1, offset: 41498},
			expr: &actionExpr{
				pos: position{line: 1261, col: 10, offset: 41507},
				run: (*parser).callonquote1,
				expr: &seqExpr{
					pos: position{line: 1261, col: 11, offset: 41508},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1261, col: 11, offset: 41508},
							val:        "''",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1261, col: 16, offset: 41513},
							expr: &litMatcher{
								pos:        position{line: 1261, col: 16, offset: 41513},
								val:        "'",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "extension_tag",
			pos:  position{line: 1290, col: 1, offset: 42341},
			expr: &actionExpr{
				pos: position{line: 1291, col: 3, offset: 42360},
				run: (*parser).callonextension_tag1,
				expr: &seqExpr{
					pos: position{line: 1291, col: 3, offset: 42360},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1291, col: 3, offset: 42360},
							run: (*parser).callonextension_tag3,
						},
						&ruleRefExpr{
							pos:  position{line: 1292, col: 3, offset: 42422},
							name: "xmlish_tag",
						},
						&andCodeExpr{
							pos: position{line: 1294, col: 3, offset: 42507},
							run: (*parser).callonextension_tag5,
						},
					},
				},
			},
		},
		{
			name: "nowiki",
			pos:  position{line: 1297, col: 1, offset: 42615},
			expr: &actionExpr{
				pos: position{line: 1298, col: 6, offset: 42627},
				run: (*parser).callonnowiki1,
				expr: &seqExpr{
					pos: position{line: 1298, col: 6, offset: 42627},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1298, col: 6, offset: 42627},
							name: "extension_tag",
						},
						&andCodeExpr{
							pos: position{line: 1299, col: 5, offset: 42645},
							run: (*parser).callonnowiki4,
						},
					},
				},
			},
		},
		{
			name: "nowiki_content",
			pos:  position{line: 1303, col: 1, offset: 42823},
			expr: &actionExpr{
				pos: position{line: 1304, col: 6, offset: 42843},
				run: (*parser).callonnowiki_content1,
				expr: &labeledExpr{
					pos:   position{line: 1304, col: 6, offset: 42843},
					label: "c2",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1304, col: 9, offset: 42846},
						expr: &choiceExpr{
							pos: position{line: 1304, col: 10, offset: 42847},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1304, col: 10, offset: 42847},
									name: "htmlentity",
								},
								&anyMatcher{
									line: 1304, col: 23, offset: 42860,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "nowiki_text",
			pos:  position{line: 1308, col: 1, offset: 43012},
			expr: &actionExpr{
				pos: position{line: 1309, col: 6, offset: 43029},
				run: (*parser).callonnowiki_text1,
				expr: &ruleRefExpr{
					pos:  position{line: 1309, col: 6, offset: 43029},
					name: "nowiki",
				},
			},
		},
		{
			name: "tag_name_chars",
			pos:  position{line: 1326, col: 1, offset: 43573},
			expr: &charClassMatcher{
				pos:        position{line: 1326, col: 19, offset: 43591},
				val:        "[^\\t\\n\\v />\\x00]",
				chars:      []rune{'\t', '\n', '\v', ' ', '/', '>', '\x00'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "tag_name",
			pos:  position{line: 1327, col: 1, offset: 43608},
			expr: &seqExpr{
				pos: position{line: 1327, col: 14, offset: 43621},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1327, col: 14, offset: 43621},
						val:        "[A-Za-z]",
						ranges:     []rune{'A', 'Z', 'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1327, col: 23, offset: 43630},
						expr: &ruleRefExpr{
							pos:  position{line: 1327, col: 23, offset: 43630},
							name: "tag_name_chars",
						},
					},
				},
			},
		},
		{
			name: "xmlish_tag",
			pos:  position{line: 1329, col: 1, offset: 43648},
			expr: &choiceExpr{
				pos: position{line: 1330, col: 6, offset: 43664},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1330, col: 6, offset: 43664},
						run: (*parser).callonxmlish_tag2,
						expr: &seqExpr{
							pos: position{line: 1330, col: 6, offset: 43664},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1330, col: 6, offset: 43664},
									run: (*parser).callonxmlish_tag4,
								},
								&litMatcher{
									pos:        position{line: 1337, col: 5, offset: 43931},
									val:        "<",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 1337, col: 9, offset: 43935},
									expr: &litMatcher{
										pos:        position{line: 1337, col: 9, offset: 43935},
										val:        "/",
										ignoreCase: false,
									},
								},
								&seqExpr{
									pos: position{line: 1338, col: 6, offset: 43945},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1338, col: 6, offset: 43945},
											name: "tag_name",
										},
										&andCodeExpr{
											pos: position{line: 1338, col: 15, offset: 43954},
											run: (*parser).callonxmlish_tag10,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1344, col: 5, offset: 44086},
									name: "generic_newline_attributes",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1345, col: 5, offset: 44117},
									expr: &ruleRefExpr{
										pos:  position{line: 1345, col: 5, offset: 44117},
										name: "space_or_newline",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1346, col: 5, offset: 44204},
									expr: &litMatcher{
										pos:        position{line: 1346, col: 5, offset: 44204},
										val:        "/",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1347, col: 5, offset: 44213},
									expr: &ruleRefExpr{
										pos:  position{line: 1347, col: 5, offset: 44213},
										name: "space",
									},
								},
								&litMatcher{
									pos:        position{line: 1348, col: 5, offset: 44278},
									val:        ">",
									ignoreCase: false,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1377, col: 7, offset: 45163},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1377, col: 7, offset: 45163},
								val:        "<",
								ignoreCase: false,
							},
							&zeroOrOneExpr{
								pos: position{line: 1377, col: 11, offset: 45167},
								expr: &litMatcher{
									pos:        position{line: 1377, col: 11, offset: 45167},
									val:        "/",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1377, col: 16, offset: 45172},
								name: "tag_name",
							},
							&andCodeExpr{
								pos: position{line: 1377, col: 25, offset: 45181},
								run: (*parser).callonxmlish_tag24,
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1378, col: 7, offset: 45243},
						run: (*parser).callonxmlish_tag25,
					},
				},
			},
		},
		{
			name: "block_tag",
			pos:  position{line: 1386, col: 1, offset: 45514},
			expr: &choiceExpr{
				pos: position{line: 1387, col: 6, offset: 45529},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1387, col: 6, offset: 45529},
						run: (*parser).callonblock_tag2,
						expr: &seqExpr{
							pos: position{line: 1387, col: 6, offset: 45529},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1387, col: 6, offset: 45529},
									run: (*parser).callonblock_tag4,
								},
								&litMatcher{
									pos:        position{line: 1394, col: 5, offset: 45778},
									val:        "<",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 1394, col: 9, offset: 45782},
									expr: &litMatcher{
										pos:        position{line: 1394, col: 9, offset: 45782},
										val:        "/",
										ignoreCase: false,
									},
								},
								&seqExpr{
									pos: position{line: 1395, col: 6, offset: 45792},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1395, col: 6, offset: 45792},
											name: "tag_name",
										},
										&andCodeExpr{
											pos: position{line: 1395, col: 15, offset: 45801},
											run: (*parser).callonblock_tag10,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1404, col: 5, offset: 45979},
									name: "generic_newline_attributes",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1405, col: 5, offset: 46010},
									expr: &ruleRefExpr{
										pos:  position{line: 1405, col: 5, offset: 46010},
										name: "space_or_newline",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1406, col: 5, offset: 46032},
									expr: &litMatcher{
										pos:        position{line: 1406, col: 5, offset: 46032},
										val:        "/",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1407, col: 5, offset: 46041},
									val:        ">",
									ignoreCase: false,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1420, col: 7, offset: 46391},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1420, col: 7, offset: 46391},
								val:        "<",
								ignoreCase: false,
							},
							&zeroOrOneExpr{
								pos: position{line: 1420, col: 11, offset: 46395},
								expr: &litMatcher{
									pos:        position{line: 1420, col: 11, offset: 46395},
									val:        "/",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1420, col: 16, offset: 46400},
								name: "tag_name",
							},
							&andCodeExpr{
								pos: position{line: 1420, col: 25, offset: 46409},
								run: (*parser).callonblock_tag22,
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1424, col: 7, offset: 46472},
						run: (*parser).callonblock_tag23,
					},
				},
			},
		},
		{
			name: "generic_newline_attribute",
			pos:  position{line: 1431, col: 1, offset: 46611},
			expr: &actionExpr{
				pos: position{line: 1432, col: 6, offset: 46642},
				run: (*parser).callongeneric_newline_attribute1,
				expr: &seqExpr{
					pos: position{line: 1432, col: 6, offset: 46642},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1432, col: 6, offset: 46642},
							expr: &ruleRefExpr{
								pos:  position{line: 1432, col: 6, offset: 46642},
								name: "space_or_newline",
							},
						},
						&actionExpr{
							pos: position{line: 1433, col: 6, offset: 46665},
							run: (*parser).callongeneric_newline_attribute5,
							expr: &litMatcher{
								pos:        position{line: 1433, col: 6, offset: 46665},
								val:        "",
								ignoreCase: false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1434, col: 5, offset: 46716},
							name: "generic_attribute_name",
						},
						&actionExpr{
							pos: position{line: 1435, col: 6, offset: 46744},
							run: (*parser).callongeneric_newline_attribute8,
							expr: &litMatcher{
								pos:        position{line: 1435, col: 6, offset: 46744},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1436, col: 5, offset: 46795},
							expr: &actionExpr{
								pos: position{line: 1436, col: 6, offset: 46796},
								run: (*parser).callongeneric_newline_attribute11,
								expr: &seqExpr{
									pos: position{line: 1436, col: 6, offset: 46796},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1436, col: 6, offset: 46796},
											expr: &ruleRefExpr{
												pos:  position{line: 1436, col: 6, offset: 46796},
												name: "space_or_newline",
											},
										},
										&litMatcher{
											pos:        position{line: 1436, col: 24, offset: 46814},
											val:        "=",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 1436, col: 28, offset: 46818},
											expr: &ruleRefExpr{
												pos:  position{line: 1436, col: 28, offset: 46818},
												name: "generic_att_value",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_attribute",
			pos:  position{line: 1459, col: 1, offset: 47500},
			expr: &actionExpr{
				pos: position{line: 1460, col: 6, offset: 47521},
				run: (*parser).callontable_attribute1,
				expr: &seqExpr{
					pos: position{line: 1460, col: 6, offset: 47521},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1460, col: 6, offset: 47521},
							name: "optionalSpaceToken",
						},
						&actionExpr{
							pos: position{line: 1461, col: 6, offset: 47545},
							run: (*parser).callontable_attribute4,
							expr: &litMatcher{
								pos:        position{line: 1461, col: 6, offset: 47545},
								val:        "",
								ignoreCase: false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1462, col: 5, offset: 47597},
							name: "table_attribute_name",
						},
						&actionExpr{
							pos: position{line: 1463, col: 6, offset: 47623},
							run: (*parser).callontable_attribute7,
							expr: &litMatcher{
								pos:        position{line: 1463, col: 6, offset: 47623},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1464, col: 5, offset: 47675},
							expr: &actionExpr{
								pos: position{line: 1464, col: 6, offset: 47676},
								run: (*parser).callontable_attribute10,
								expr: &seqExpr{
									pos: position{line: 1464, col: 6, offset: 47676},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1464, col: 6, offset: 47676},
											name: "optionalSpaceToken",
										},
										&litMatcher{
											pos:        position{line: 1464, col: 25, offset: 47695},
											val:        "=",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 1464, col: 29, offset: 47699},
											expr: &ruleRefExpr{
												pos:  position{line: 1464, col: 29, offset: 47699},
												name: "table_att_value",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "generic_attribute_name",
			pos:  position{line: 1489, col: 1, offset: 48549},
			expr: &actionExpr{
				pos: position{line: 1490, col: 6, offset: 48577},
				run: (*parser).callongeneric_attribute_name1,
				expr: &seqExpr{
					pos: position{line: 1490, col: 6, offset: 48577},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1490, col: 7, offset: 48578},
							expr: &charClassMatcher{
								pos:        position{line: 1490, col: 7, offset: 48578},
								val:        "[\"'=]",
								chars:      []rune{'"', '\'', '='},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1491, col: 5, offset: 48656},
							expr: &choiceExpr{
								pos: position{line: 1491, col: 7, offset: 48658},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1491, col: 7, offset: 48658},
										expr: &charClassMatcher{
											pos:        position{line: 1491, col: 7, offset: 48658},
											val:        "[^ \\t\\r\\n\\x00/=><&{}!|-]",
											chars:      []rune{' ', '\t', '\r', '\n', '\x00', '/', '=', '>', '<', '&', '{', '}', '!', '|', '-'},
											ignoreCase: false,
											inverted:   true,
										},
									},
									&actionExpr{
										pos: position{line: 1492, col: 11, offset: 48694},
										run: (*parser).callongeneric_attribute_name9,
										expr: &seqExpr{
											pos: position{line: 1492, col: 11, offset: 48694},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1492, col: 11, offset: 48694},
													expr: &ruleRefExpr{
														pos:  position{line: 1492, col: 12, offset: 48695},
														name: "inline_breaks",
													},
												},
												&choiceExpr{
													pos: position{line: 1494, col: 13, offset: 48778},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1494, col: 13, offset: 48778},
															name: "directive",
														},
														&actionExpr{
															pos: position{line: 1494, col: 25, offset: 48790},
															run: (*parser).callongeneric_attribute_name15,
															expr: &notExpr{
																pos: position{line: 1494, col: 25, offset: 48790},
																expr: &choiceExpr{
																	pos: position{line: 1494, col: 28, offset: 48793},
																	alternatives: []interface{}{
																		&ruleRefExpr{
																			pos:  position{line: 1494, col: 28, offset: 48793},
																			name: "space_or_newline",
																		},
																		&charClassMatcher{
																			pos:        position{line: 1494, col: 47, offset: 48812},
																			val:        "[\\x00/=>]",
																			chars:      []rune{'\x00', '/', '=', '>'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1497, col: 5, offset: 48913},
							run: (*parser).callongeneric_attribute_name20,
						},
					},
				},
			},
		},
		{
			name: "broken_table_attribute_name_char",
			pos:  position{line: 1502, col: 1, offset: 49184},
			expr: &actionExpr{
				pos: position{line: 1502, col: 37, offset: 49220},
				run: (*parser).callonbroken_table_attribute_name_char1,
				expr: &charClassMatcher{
					pos:        position{line: 1502, col: 37, offset: 49220},
					val:        "[\\x00/=>]",
					chars:      []rune{'\x00', '/', '=', '>'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "table_attribute_name",
			pos:  position{line: 1507, col: 1, offset: 49472},
			expr: &actionExpr{
				pos: position{line: 1508, col: 6, offset: 49498},
				run: (*parser).callontable_attribute_name1,
				expr: &seqExpr{
					pos: position{line: 1508, col: 6, offset: 49498},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1508, col: 7, offset: 49499},
							expr: &charClassMatcher{
								pos:        position{line: 1508, col: 7, offset: 49499},
								val:        "[\"'=]",
								chars:      []rune{'"', '\'', '='},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1509, col: 5, offset: 49577},
							expr: &choiceExpr{
								pos: position{line: 1509, col: 7, offset: 49579},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1509, col: 7, offset: 49579},
										expr: &charClassMatcher{
											pos:        position{line: 1509, col: 7, offset: 49579},
											val:        "[^ \\t\\r\\n\\x00/=><&{}!|[-]",
											chars:      []rune{' ', '\t', '\r', '\n', '\x00', '/', '=', '>', '<', '&', '{', '}', '!', '|', '[', '-'},
											ignoreCase: false,
											inverted:   true,
										},
									},
									&actionExpr{
										pos: position{line: 1510, col: 11, offset: 49616},
										run: (*parser).callontable_attribute_name9,
										expr: &seqExpr{
											pos: position{line: 1510, col: 11, offset: 49616},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1510, col: 11, offset: 49616},
													expr: &ruleRefExpr{
														pos:  position{line: 1510, col: 12, offset: 49617},
														name: "inline_breaks",
													},
												},
												&choiceExpr{
													pos: position{line: 1512, col: 15, offset: 49702},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1512, col: 15, offset: 49702},
															name: "wikilink",
														},
														&ruleRefExpr{
															pos:  position{line: 1513, col: 17, offset: 49727},
															name: "directive",
														},
														&actionExpr{
															pos: position{line: 1517, col: 17, offset: 49931},
															run: (*parser).callontable_attribute_name16,
															expr: &seqExpr{
																pos: position{line: 1517, col: 17, offset: 49931},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1517, col: 17, offset: 49931},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1517, col: 18, offset: 49932},
																			name: "xmlish_tag",
																		},
																	},
																	&ruleRefExpr{
																		pos:  position{line: 1517, col: 29, offset: 49943},
																		name: "inlineline",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1518, col: 17, offset: 50005},
															run: (*parser).callontable_attribute_name21,
															expr: &seqExpr{
																pos: position{line: 1518, col: 17, offset: 50005},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1518, col: 17, offset: 50005},
																		expr: &choiceExpr{
																			pos: position{line: 1518, col: 20, offset: 50008},
																			alternatives: []interface{}{
																				&ruleRefExpr{
																					pos:  position{line: 1518, col: 20, offset: 50008},
																					name: "space_or_newline",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1518, col: 39, offset: 50027},
																					val:        "[\\x00/=>]",
																					chars:      []rune{'\x00', '/', '=', '>'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1518, col: 51, offset: 50039,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1521, col: 5, offset: 50128},
							run: (*parser).callontable_attribute_name28,
						},
					},
				},
			},
		},
		{
			name: "generic_att_value",
			pos:  position{line: 1527, col: 1, offset: 50448},
			expr: &choiceExpr{
				pos: position{line: 1528, col: 6, offset: 50471},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1528, col: 6, offset: 50471},
						run: (*parser).callongeneric_att_value2,
						expr: &seqExpr{
							pos: position{line: 1528, col: 6, offset: 50471},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1528, col: 7, offset: 50472},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1528, col: 7, offset: 50472},
											expr: &ruleRefExpr{
												pos:  position{line: 1528, col: 7, offset: 50472},
												name: "space_or_newline",
											},
										},
										&litMatcher{
											pos:        position{line: 1528, col: 25, offset: 50490},
											val:        "'",
											ignoreCase: false,
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1528, col: 30, offset: 50495},
									expr: &ruleRefExpr{
										pos:  position{line: 1528, col: 30, offset: 50495},
										name: "attribute_preprocessor_text_single",
									},
								},
								&choiceExpr{
									pos: position{line: 1528, col: 67, offset: 50532},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 1528, col: 67, offset: 50532},
											val:        "'",
											ignoreCase: false,
										},
										&andExpr{
											pos: position{line: 1528, col: 73, offset: 50538},
											expr: &seqExpr{
												pos: position{line: 1528, col: 75, offset: 50540},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 1528, col: 75, offset: 50540},
														expr: &litMatcher{
															pos:        position{line: 1528, col: 75, offset: 50540},
															val:        "/",
															ignoreCase: false,
														},
													},
													&litMatcher{
														pos:        position{line: 1528, col: 80, offset: 50545},
														val:        ">",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1533, col: 5, offset: 50673},
						run: (*parser).callongeneric_att_value17,
						expr: &seqExpr{
							pos: position{line: 1533, col: 5, offset: 50673},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1533, col: 6, offset: 50674},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1533, col: 6, offset: 50674},
											expr: &ruleRefExpr{
												pos:  position{line: 1533, col: 6, offset: 50674},
												name: "space_or_newline",
											},
										},
										&litMatcher{
											pos:        position{line: 1533, col: 24, offset: 50692},
											val:        "\"",
											ignoreCase: false,
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1533, col: 29, offset: 50697},
									expr: &ruleRefExpr{
										pos:  position{line: 1533, col: 29, offset: 50697},
										name: "attribute_preprocessor_text_double",
									},
								},
								&choiceExpr{
									pos: position{line: 1533, col: 66, offset: 50734},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 1533, col: 66, offset: 50734},
											val:        "\"",
											ignoreCase: false,
										},
										&andExpr{
											pos: position{line: 1533, col: 72, offset: 50740},
											expr: &seqExpr{
												pos: position{line: 1533, col: 74, offset: 50742},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 1533, col: 74, offset: 50742},
														expr: &litMatcher{
															pos:        position{line: 1533, col: 74, offset: 50742},
															val:        "/",
															ignoreCase: false,
														},
													},
													&litMatcher{
														pos:        position{line: 1533, col: 79, offset: 50747},
														val:        ">",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1538, col: 5, offset: 50875},
						run: (*parser).callongeneric_att_value32,
						expr: &seqExpr{
							pos: position{line: 1538, col: 5, offset: 50875},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 1538, col: 5, offset: 50875},
									expr: &ruleRefExpr{
										pos:  position{line: 1538, col: 5, offset: 50875},
										name: "space_or_newline",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1538, col: 23, offset: 50893},
									name: "attribute_preprocessor_text",
								},
								&andExpr{
									pos: position{line: 1538, col: 51, offset: 50921},
									expr: &choiceExpr{
										pos: position{line: 1538, col: 53, offset: 50923},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1538, col: 53, offset: 50923},
												name: "space_or_newline",
											},
											&ruleRefExpr{
												pos:  position{line: 1538, col: 72, offset: 50942},
												name: "eof",
											},
											&seqExpr{
												pos: position{line: 1538, col: 78, offset: 50948},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 1538, col: 78, offset: 50948},
														expr: &litMatcher{
															pos:        position{line: 1538, col: 78, offset: 50948},
															val:        "/",
															ignoreCase: false,
														},
													},
													&litMatcher{
														pos:        position{line: 1538, col: 83, offset: 50953},
														val:        ">",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_att_value",
			pos:  position{line: 1547, col: 1, offset: 51265},
			expr: &choiceExpr{
				pos: position{line: 1548, col: 6, offset: 51286},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1548, col: 6, offset: 51286},
						run: (*parser).callontable_att_value2,
						expr: &seqExpr{
							pos: position{line: 1548, col: 6, offset: 51286},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1548, col: 7, offset: 51287},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1548, col: 7, offset: 51287},
											expr: &ruleRefExpr{
												pos:  position{line: 1548, col: 7, offset: 51287},
												name: "space",
											},
										},
										&litMatcher{
											pos:        position{line: 1548, col: 14, offset: 51294},
											val:        "'",
											ignoreCase: false,
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1548, col: 19, offset: 51299},
									expr: &ruleRefExpr{
										pos:  position{line: 1548, col: 19, offset: 51299},
										name: "table_attribute_preprocessor_text_single",
									},
								},
								&choiceExpr{
									pos: position{line: 1548, col: 62, offset: 51342},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 1548, col: 62, offset: 51342},
											val:        "'",
											ignoreCase: false,
										},
										&andExpr{
											pos: position{line: 1548, col: 68, offset: 51348},
											expr: &choiceExpr{
												pos: position{line: 1548, col: 70, offset: 51350},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 1548, col: 70, offset: 51350},
														val:        "!!",
														ignoreCase: false,
													},
													&charClassMatcher{
														pos:        position{line: 1548, col: 77, offset: 51357},
														val:        "[|\\r\\n]",
														chars:      []rune{'|', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1553, col: 5, offset: 51489},
						run: (*parser).callontable_att_value16,
						expr: &seqExpr{
							pos: position{line: 1553, col: 5, offset: 51489},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1553, col: 6, offset: 51490},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1553, col: 6, offset: 51490},
											expr: &ruleRefExpr{
												pos:  position{line: 1553, col: 6, offset: 51490},
												name: "space",
											},
										},
										&litMatcher{
											pos:        position{line: 1553, col: 13, offset: 51497},
											val:        "\"",
											ignoreCase: false,
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1553, col: 18, offset: 51502},
									expr: &ruleRefExpr{
										pos:  position{line: 1553, col: 18, offset: 51502},
										name: "table_attribute_preprocessor_text_double",
									},
								},
								&choiceExpr{
									pos: position{line: 1553, col: 61, offset: 51545},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 1553, col: 61, offset: 51545},
											val:        "\"",
											ignoreCase: false,
										},
										&andExpr{
											pos: position{line: 1553, col: 67, offset: 51551},
											expr: &choiceExpr{
												pos: position{line: 1553, col: 69, offset: 51553},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 1553, col: 69, offset: 51553},
														val:        "!!",
														ignoreCase: false,
													},
													&charClassMatcher{
														pos:        position{line: 1553, col: 76, offset: 51560},
														val:        "[|\\r\\n]",
														chars:      []rune{'|', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1558, col: 5, offset: 51692},
						run: (*parser).callontable_att_value30,
						expr: &seqExpr{
							pos: position{line: 1558, col: 5, offset: 51692},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 1558, col: 5, offset: 51692},
									expr: &ruleRefExpr{
										pos:  position{line: 1558, col: 5, offset: 51692},
										name: "space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1558, col: 12, offset: 51699},
									name: "table_attribute_preprocessor_text",
								},
								&andExpr{
									pos: position{line: 1558, col: 46, offset: 51733},
									expr: &choiceExpr{
										pos: position{line: 1558, col: 48, offset: 51735},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1558, col: 48, offset: 51735},
												name: "space_or_newline",
											},
											&ruleRefExpr{
												pos:  position{line: 1558, col: 66, offset: 51753},
												name: "eof",
											},
											&litMatcher{
												pos:        position{line: 1558, col: 72, offset: 51759},
												val:        "!!",
												ignoreCase: false,
											},
											&litMatcher{
												pos:        position{line: 1558, col: 79, offset: 51766},
												val:        "|",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "list_item",
			pos:  position{line: 1567, col: 1, offset: 52009},
			expr: &choiceExpr{
				pos: position{line: 1567, col: 14, offset: 52022},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1567, col: 14, offset: 52022},
						name: "dtdd",
					},
					&ruleRefExpr{
						pos:  position{line: 1567, col: 21, offset: 52029},
						name: "hacky_dl_uses",
					},
					&ruleRefExpr{
						pos:  position{line: 1567, col: 37, offset: 52045},
						name: "li",
					},
				},
			},
		},
		{
			name: "li",
			pos:  position{line: 1569, col: 1, offset: 52049},
			expr: &actionExpr{
				pos: position{line: 1569, col: 7, offset: 52055},
				run: (*parser).callonli1,
				expr: &seqExpr{
					pos: position{line: 1569, col: 7, offset: 52055},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1569, col: 7, offset: 52055},
							label: "bullets",
							expr: &oneOrMoreExpr{
								pos: position{line: 1569, col: 15, offset: 52063},
								expr: &ruleRefExpr{
									pos:  position{line: 1569, col: 15, offset: 52063},
									name: "list_char",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1570, col: 6, offset: 52079},
							label: "c2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1570, col: 9, offset: 52082},
								expr: &ruleRefExpr{
									pos:  position{line: 1570, col: 9, offset: 52082},
									name: "inlineline",
								},
							},
						},
						&andExpr{
							pos: position{line: 1572, col: 6, offset: 52170},
							expr: &choiceExpr{
								pos: position{line: 1572, col: 8, offset: 52172},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1572, col: 8, offset: 52172},
										name: "eolf",
									},
									&ruleRefExpr{
										pos:  position{line: 1572, col: 15, offset: 52179},
										name: "inline_breaks",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hacky_dl_uses",
			pos:  position{line: 1598, col: 1, offset: 52841},
			expr: &actionExpr{
				pos: position{line: 1598, col: 18, offset: 52858},
				run: (*parser).callonhacky_dl_uses1,
				expr: &seqExpr{
					pos: position{line: 1598, col: 18, offset: 52858},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1598, col: 18, offset: 52858},
							expr: &litMatcher{
								pos:        position{line: 1598, col: 18, offset: 52858},
								val:        ":",
								ignoreCase: false,
							},
						},
						&seqExpr{
							pos: position{line: 1599, col: 17, offset: 52879},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1599, col: 17, offset: 52879},
									name: "table_line",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1599, col: 28, offset: 52890},
									expr: &seqExpr{
										pos: position{line: 1599, col: 29, offset: 52891},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1599, col: 29, offset: 52891},
												name: "sol",
											},
											&ruleRefExpr{
												pos:  position{line: 1599, col: 33, offset: 52895},
												name: "table_line",
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1600, col: 16, offset: 52924},
							expr: &ruleRefExpr{
								pos:  position{line: 1600, col: 16, offset: 52924},
								name: "inlineline",
							},
						},
						&andExpr{
							pos: position{line: 1601, col: 16, offset: 52951},
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 17, offset: 52952},
								name: "comment_space_eolf",
							},
						},
					},
				},
			},
		},
		{
			name: "dtdd",
			pos:  position{line: 1613, col: 1, offset: 53262},
			expr: &choiceExpr{
				pos: position{line: 1614, col: 6, offset: 53272},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1614, col: 6, offset: 53272},
						run: (*parser).callondtdd2,
						expr: &seqExpr{
							pos: position{line: 1614, col: 6, offset: 53272},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 1614, col: 6, offset: 53272},
									expr: &actionExpr{
										pos: position{line: 1614, col: 7, offset: 53273},
										run: (*parser).callondtdd5,
										expr: &seqExpr{
											pos: position{line: 1614, col: 7, offset: 53273},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1614, col: 7, offset: 53273},
													expr: &seqExpr{
														pos: position{line: 1614, col: 9, offset: 53275},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1614, col: 9, offset: 53275},
																val:        ";",
																ignoreCase: false,
															},
															&notExpr{
																pos: position{line: 1614, col: 13, offset: 53279},
																expr: &ruleRefExpr{
																	pos:  position{line: 1614, col: 14, offset: 53280},
																	name: "list_char",
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1614, col: 25, offset: 53291},
													name: "list_char",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1615, col: 5, offset: 53341},
									val:        ";",
									ignoreCase: false,
								},
								&andCodeExpr{
									pos: position{line: 1616, col: 5, offset: 53349},
									run: (*parser).callondtdd14,
								},
								&zeroOrOneExpr{
									pos: position{line: 1617, col: 5, offset: 53405},
									expr: &ruleRefExpr{
										pos:  position{line: 1617, col: 5, offset: 53405},
										name: "inlineline",
									},
								},
								&actionExpr{
									pos: position{line: 1618, col: 6, offset: 53422},
									run: (*parser).callondtdd17,
									expr: &litMatcher{
										pos:        position{line: 1618, col: 6, offset: 53422},
										val:        ":",
										ignoreCase: false,
									},
								},
								&andCodeExpr{
									pos: position{line: 1621, col: 5, offset: 53571},
									run: (*parser).callondtdd19,
								},
								&zeroOrOneExpr{
									pos: position{line: 1622, col: 5, offset: 53640},
									expr: &ruleRefExpr{
										pos:  position{line: 1622, col: 5, offset: 53640},
										name: "inlineline",
									},
								},
								&andExpr{
									pos: position{line: 1623, col: 5, offset: 53656},
									expr: &ruleRefExpr{
										pos:  position{line: 1623, col: 6, offset: 53657},
										name: "eolf",
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1642, col: 5, offset: 54330},
						run: (*parser).callondtdd24,
					},
				},
			},
		},
		{
			name: "list_char",
			pos:  position{line: 1645, col: 1, offset: 54399},
			expr: &charClassMatcher{
				pos:        position{line: 1645, col: 14, offset: 54412},
				val:        "[*#:;]",
				chars:      []rune{'*', '#', ':', ';'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "full_table_in_link_caption",
			pos:  position{line: 1700, col: 1, offset: 56368},
			expr: &actionExpr{
				pos: position{line: 1701, col: 6, offset: 56400},
				run: (*parser).callonfull_table_in_link_caption1,
				expr: &seqExpr{
					pos: position{line: 1701, col: 6, offset: 56400},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1701, col: 7, offset: 56401},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 1701, col: 7, offset: 56401},
									expr: &ruleRefExpr{
										pos:  position{line: 1701, col: 9, offset: 56403},
										name: "inline_breaks",
									},
								},
								&andExpr{
									pos: position{line: 1701, col: 25, offset: 56419},
									expr: &litMatcher{
										pos:        position{line: 1701, col: 27, offset: 56421},
										val:        "{{!}}",
										ignoreCase: false,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1708, col: 9, offset: 56786},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1708, col: 9, offset: 56786},
									run: (*parser).callonfull_table_in_link_caption9,
									expr: &seqExpr{
										pos: position{line: 1708, col: 9, offset: 56786},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 1708, col: 9, offset: 56786},
												run: (*parser).callonfull_table_in_link_caption11,
											},
											&seqExpr{
												pos: position{line: 1711, col: 13, offset: 56908},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1711, col: 13, offset: 56908},
														name: "table_start_tag",
													},
													&ruleRefExpr{
														pos:  position{line: 1711, col: 29, offset: 56924},
														name: "optionalNewlines",
													},
													&oneOrMoreExpr{
														pos: position{line: 1714, col: 13, offset: 57053},
														expr: &seqExpr{
															pos: position{line: 1714, col: 14, offset: 57054},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1714, col: 14, offset: 57054},
																	expr: &seqExpr{
																		pos: position{line: 1714, col: 15, offset: 57055},
																		exprs: []interface{}{
																			&ruleRefExpr{
																				pos:  position{line: 1714, col: 15, offset: 57055},
																				name: "sol",
																			},
																			&choiceExpr{
																				pos: position{line: 1714, col: 20, offset: 57060},
																				alternatives: []interface{}{
																					&ruleRefExpr{
																						pos:  position{line: 1714, col: 20, offset: 57060},
																						name: "table_content_line",
																					},
																					&ruleRefExpr{
																						pos:  position{line: 1714, col: 41, offset: 57081},
																						name: "tplarg_or_template",
																					},
																				},
																			},
																			&ruleRefExpr{
																				pos:  position{line: 1714, col: 61, offset: 57101},
																				name: "optionalNewlines",
																			},
																		},
																	},
																},
																&ruleRefExpr{
																	pos:  position{line: 1715, col: 13, offset: 57132},
																	name: "sol",
																},
																&ruleRefExpr{
																	pos:  position{line: 1715, col: 17, offset: 57136},
																	name: "table_end_tag",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1723, col: 9, offset: 57313},
									run: (*parser).callonfull_table_in_link_caption26,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_line",
			pos:  position{line: 1727, col: 1, offset: 57475},
			expr: &actionExpr{
				pos: position{line: 1728, col: 6, offset: 57491},
				run: (*parser).callontable_line1,
				expr: &seqExpr{
					pos: position{line: 1728, col: 6, offset: 57491},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1728, col: 7, offset: 57492},
							alternatives: []interface{}{
								&notExpr{
									pos: position{line: 1728, col: 7, offset: 57492},
									expr: &ruleRefExpr{
										pos:  position{line: 1728, col: 9, offset: 57494},
										name: "inline_breaks",
									},
								},
								&andExpr{
									pos: position{line: 1728, col: 25, offset: 57510},
									expr: &litMatcher{
										pos:        position{line: 1728, col: 27, offset: 57512},
										val:        "{{!}}",
										ignoreCase: false,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1730, col: 9, offset: 57536},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1730, col: 9, offset: 57536},
									run: (*parser).callontable_line9,
									expr: &seqExpr{
										pos: position{line: 1730, col: 9, offset: 57536},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 1730, col: 9, offset: 57536},
												run: (*parser).callontable_line11,
											},
											&choiceExpr{
												pos: position{line: 1732, col: 14, offset: 57621},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 1732, col: 14, offset: 57621},
														exprs: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 1732, col: 14, offset: 57621},
																name: "table_start_tag",
															},
															&ruleRefExpr{
																pos:  position{line: 1732, col: 30, offset: 57637},
																name: "optionalNewlines",
															},
														},
													},
													&seqExpr{
														pos: position{line: 1733, col: 14, offset: 57667},
														exprs: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 1733, col: 14, offset: 57667},
																name: "table_content_line",
															},
															&ruleRefExpr{
																pos:  position{line: 1733, col: 33, offset: 57686},
																name: "optionalNewlines",
															},
														},
													},
													&ruleRefExpr{
														pos:  position{line: 1734, col: 14, offset: 57716},
														name: "table_end_tag",
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1741, col: 9, offset: 57856},
									run: (*parser).callontable_line20,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_content_line",
			pos:  position{line: 1744, col: 1, offset: 57951},
			expr: &seqExpr{
				pos: position{line: 1744, col: 23, offset: 57973},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1744, col: 23, offset: 57973},
						expr: &choiceExpr{
							pos: position{line: 1744, col: 24, offset: 57974},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1744, col: 24, offset: 57974},
									name: "space",
								},
								&ruleRefExpr{
									pos:  position{line: 1744, col: 32, offset: 57982},
									name: "comment",
								},
							},
						},
					},
					&choiceExpr{
						pos: position{line: 1745, col: 5, offset: 57998},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1745, col: 5, offset: 57998},
								name: "table_heading_tags",
							},
							&ruleRefExpr{
								pos:  position{line: 1746, col: 7, offset: 58023},
								name: "table_row_tag",
							},
							&ruleRefExpr{
								pos:  position{line: 1747, col: 7, offset: 58043},
								name: "table_data_tags",
							},
							&ruleRefExpr{
								pos:  position{line: 1748, col: 7, offset: 58065},
								name: "table_caption_tag",
							},
						},
					},
				},
			},
		},
		{
			name: "table_start_tag",
			pos:  position{line: 1751, col: 1, offset: 58088},
			expr: &actionExpr{
				pos: position{line: 1752, col: 6, offset: 58109},
				run: (*parser).callontable_start_tag1,
				expr: &seqExpr{
					pos: position{line: 1752, col: 6, offset: 58109},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1752, col: 6, offset: 58109},
							expr: &choiceExpr{
								pos: position{line: 1752, col: 7, offset: 58110},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1752, col: 7, offset: 58110},
										name: "space",
									},
									&ruleRefExpr{
										pos:  position{line: 1752, col: 15, offset: 58118},
										name: "comment",
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 1752, col: 26, offset: 58129},
							run: (*parser).callontable_start_tag7,
							expr: &litMatcher{
								pos:        position{line: 1752, col: 26, offset: 58129},
								val:        "",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1752, col: 73, offset: 58176},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1752, col: 77, offset: 58180},
							name: "pipe",
						},
						&andCodeExpr{
							pos: position{line: 1754, col: 5, offset: 58241},
							run: (*parser).callontable_start_tag11,
						},
						&ruleRefExpr{
							pos:  position{line: 1755, col: 5, offset: 58308},
							name: "table_attributes",
						},
						&actionExpr{
							pos: position{line: 1756, col: 6, offset: 58330},
							run: (*parser).callontable_start_tag13,
							expr: &litMatcher{
								pos:        position{line: 1756, col: 6, offset: 58330},
								val:        "",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "table_caption_tag",
			pos:  position{line: 1779, col: 1, offset: 58908},
			expr: &actionExpr{
				pos: position{line: 1781, col: 6, offset: 58976},
				run: (*parser).callontable_caption_tag1,
				expr: &seqExpr{
					pos: position{line: 1781, col: 6, offset: 58976},
					exprs: []interface{}{
						&notCodeExpr{
							pos: position{line: 1781, col: 6, offset: 58976},
							run: (*parser).callontable_caption_tag3,
						},
						&ruleRefExpr{
							pos:  position{line: 1782, col: 5, offset: 59046},
							name: "pipe",
						},
						&litMatcher{
							pos:        position{line: 1782, col: 10, offset: 59051},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 1783, col: 5, offset: 59059},
							expr: &ruleRefExpr{
								pos:  position{line: 1783, col: 5, offset: 59059},
								name: "row_syntax_table_args",
							},
						},
						&actionExpr{
							pos: position{line: 1784, col: 6, offset: 59087},
							run: (*parser).callontable_caption_tag8,
							expr: &litMatcher{
								pos:        position{line: 1784, col: 6, offset: 59087},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1785, col: 5, offset: 59138},
							expr: &ruleRefExpr{
								pos:  position{line: 1785, col: 5, offset: 59138},
								name: "nested_block_in_table",
							},
						},
					},
				},
			},
		},
		{
			name: "table_row_tag",
			pos:  position{line: 1791, col: 1, offset: 59312},
			expr: &actionExpr{
				pos: position{line: 1793, col: 5, offset: 59380},
				run: (*parser).callontable_row_tag1,
				expr: &seqExpr{
					pos: position{line: 1793, col: 5, offset: 59380},
					exprs: []interface{}{
						&notCodeExpr{
							pos: position{line: 1793, col: 5, offset: 59380},
							run: (*parser).callontable_row_tag3,
						},
						&ruleRefExpr{
							pos:  position{line: 1794, col: 5, offset: 59450},
							name: "pipe",
						},
						&oneOrMoreExpr{
							pos: position{line: 1794, col: 10, offset: 59455},
							expr: &litMatcher{
								pos:        position{line: 1794, col: 10, offset: 59455},
								val:        "-",
								ignoreCase: false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1795, col: 5, offset: 59464},
							run: (*parser).callontable_row_tag7,
						},
						&ruleRefExpr{
							pos:  position{line: 1796, col: 5, offset: 59531},
							name: "table_attributes",
						},
						&actionExpr{
							pos: position{line: 1797, col: 6, offset: 59553},
							run: (*parser).callontable_row_tag9,
							expr: &litMatcher{
								pos:        position{line: 1797, col: 6, offset: 59553},
								val:        "",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "tds",
			pos:  position{line: 1823, col: 1, offset: 60218},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1824, col: 6, offset: 60227},
				expr: &actionExpr{
					pos: position{line: 1824, col: 8, offset: 60229},
					run: (*parser).callontds2,
					expr: &seqExpr{
						pos: position{line: 1824, col: 8, offset: 60229},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1824, col: 10, offset: 60231},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1824, col: 10, offset: 60231},
										name: "pipe_pipe",
									},
									&actionExpr{
										pos: position{line: 1824, col: 22, offset: 60243},
										run: (*parser).callontds6,
										expr: &seqExpr{
											pos: position{line: 1824, col: 22, offset: 60243},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1824, col: 22, offset: 60243},
													name: "pipe",
												},
												&andExpr{
													pos: position{line: 1824, col: 27, offset: 60248},
													expr: &ruleRefExpr{
														pos:  position{line: 1824, col: 29, offset: 60250},
														name: "row_syntax_table_args",
													},
												},
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1825, col: 7, offset: 60313},
								name: "table_data_tag",
							},
						},
					},
				},
			},
		},
		{
			name: "table_data_tags",
			pos:  position{line: 1840, col: 1, offset: 60748},
			expr: &actionExpr{
				pos: position{line: 1841, col: 6, offset: 60769},
				run: (*parser).callontable_data_tags1,
				expr: &seqExpr{
					pos: position{line: 1841, col: 6, offset: 60769},
					exprs: []interface{}{
						&notCodeExpr{
							pos: position{line: 1841, col: 6, offset: 60769},
							run: (*parser).callontable_data_tags3,
						},
						&ruleRefExpr{
							pos:  position{line: 1842, col: 5, offset: 60839},
							name: "pipe",
						},
						&notExpr{
							pos: position{line: 1843, col: 5, offset: 60848},
							expr: &charClassMatcher{
								pos:        position{line: 1843, col: 6, offset: 60849},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1843, col: 11, offset: 60854},
							name: "table_data_tag",
						},
						&actionExpr{
							pos: position{line: 1844, col: 6, offset: 60874},
							run: (*parser).callontable_data_tags8,
							expr: &litMatcher{
								pos:        position{line: 1844, col: 6, offset: 60874},
								val:        "",
								ignoreCase: false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1845, col: 5, offset: 60925},
							name: "tds",
						},
					},
				},
			},
		},
		{
			name: "table_data_tag",
			pos:  position{line: 1849, col: 1, offset: 60979},
			expr: &actionExpr{
				pos: position{line: 1850, col: 6, offset: 60999},
				run: (*parser).callontable_data_tag1,
				expr: &seqExpr{
					pos: position{line: 1850, col: 6, offset: 60999},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1850, col: 6, offset: 60999},
							expr: &litMatcher{
								pos:        position{line: 1850, col: 8, offset: 61001},
								val:        "}",
								ignoreCase: false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1851, col: 5, offset: 61009},
							expr: &ruleRefExpr{
								pos:  position{line: 1851, col: 5, offset: 61009},
								name: "row_syntax_table_args",
							},
						},
						&actionExpr{
							pos: position{line: 1853, col: 6, offset: 61077},
							run: (*parser).callontable_data_tag7,
							expr: &litMatcher{
								pos:        position{line: 1853, col: 6, offset: 61077},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1854, col: 5, offset: 61128},
							expr: &ruleRefExpr{
								pos:  position{line: 1854, col: 5, offset: 61128},
								name: "nested_block_in_table",
							},
						},
					},
				},
			},
		},
		{
			name: "table_heading_tags",
			pos:  position{line: 1861, col: 1, offset: 61294},
			expr: &choiceExpr{
				pos: position{line: 1862, col: 6, offset: 61318},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1862, col: 6, offset: 61318},
						run: (*parser).callontable_heading_tags2,
						expr: &seqExpr{
							pos: position{line: 1862, col: 6, offset: 61318},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1862, col: 6, offset: 61318},
									val:        "!",
									ignoreCase: false,
								},
								&andCodeExpr{
									pos: position{line: 1863, col: 5, offset: 61326},
									run: (*parser).callontable_heading_tags5,
								},
								&ruleRefExpr{
									pos:  position{line: 1864, col: 5, offset: 61395},
									name: "table_heading_tag",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1865, col: 5, offset: 61417},
									expr: &actionExpr{
										pos: position{line: 1865, col: 7, offset: 61419},
										run: (*parser).callontable_heading_tags8,
										expr: &seqExpr{
											pos: position{line: 1865, col: 7, offset: 61419},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 1865, col: 8, offset: 61420},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 1865, col: 8, offset: 61420},
															val:        "!!",
															ignoreCase: false,
														},
														&ruleRefExpr{
															pos:  position{line: 1865, col: 15, offset: 61427},
															name: "pipe_pipe",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1865, col: 26, offset: 61438},
													name: "table_heading_tag",
												},
											},
										},
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1885, col: 7, offset: 62029},
						run: (*parser).callontable_heading_tags14,
					},
				},
			},
		},
		{
			name: "table_heading_tag",
			pos:  position{line: 1887, col: 1, offset: 62121},
			expr: &actionExpr{
				pos: position{line: 1888, col: 6, offset: 62144},
				run: (*parser).callontable_heading_tag1,
				expr: &seqExpr{
					pos: position{line: 1888, col: 6, offset: 62144},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1888, col: 6, offset: 62144},
							expr: &ruleRefExpr{
								pos:  position{line: 1888, col: 6, offset: 62144},
								name: "row_syntax_table_args",
							},
						},
						&actionExpr{
							pos: position{line: 1889, col: 6, offset: 62172},
							run: (*parser).callontable_heading_tag5,
							expr: &litMatcher{
								pos:        position{line: 1889, col: 6, offset: 62172},
								val:        "",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1890, col: 5, offset: 62223},
							expr: &actionExpr{
								pos: position{line: 1890, col: 7, offset: 62225},
								run: (*parser).callontable_heading_tag8,
								expr: &seqExpr{
									pos: position{line: 1890, col: 7, offset: 62225},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 1890, col: 7, offset: 62225},
											run: (*parser).callontable_heading_tag10,
										},
										&ruleRefExpr{
											pos:  position{line: 1901, col: 7, offset: 62604},
											name: "nested_block_in_table",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_end_tag",
			pos:  position{line: 1907, col: 1, offset: 62800},
			expr: &actionExpr{
				pos: position{line: 1908, col: 6, offset: 62819},
				run: (*parser).callontable_end_tag1,
				expr: &seqExpr{
					pos: position{line: 1908, col: 6, offset: 62819},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1908, col: 6, offset: 62819},
							expr: &choiceExpr{
								pos: position{line: 1908, col: 7, offset: 62820},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1908, col: 7, offset: 62820},
										name: "space",
									},
									&ruleRefExpr{
										pos:  position{line: 1908, col: 15, offset: 62828},
										name: "comment",
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 1908, col: 26, offset: 62839},
							run: (*parser).callontable_end_tag7,
							expr: &litMatcher{
								pos:        position{line: 1908, col: 26, offset: 62839},
								val:        "",
								ignoreCase: false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1908, col: 73, offset: 62886},
							name: "pipe",
						},
						&litMatcher{
							pos:        position{line: 1908, col: 78, offset: 62891},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "row_syntax_table_args",
			pos:  position{line: 1924, col: 1, offset: 63367},
			expr: &choiceExpr{
				pos: position{line: 1925, col: 6, offset: 63394},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1925, col: 6, offset: 63394},
						run: (*parser).callonrow_syntax_table_args2,
						expr: &seqExpr{
							pos: position{line: 1925, col: 6, offset: 63394},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 1925, col: 6, offset: 63394},
									run: (*parser).callonrow_syntax_table_args4,
								},
								&ruleRefExpr{
									pos:  position{line: 1926, col: 5, offset: 63479},
									name: "table_attributes",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1926, col: 22, offset: 63496},
									expr: &ruleRefExpr{
										pos:  position{line: 1926, col: 22, offset: 63496},
										name: "space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1926, col: 29, offset: 63503},
									name: "pipe",
								},
								&notExpr{
									pos: position{line: 1926, col: 34, offset: 63508},
									expr: &ruleRefExpr{
										pos:  position{line: 1926, col: 35, offset: 63509},
										name: "pipe",
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 1932, col: 7, offset: 63623},
						run: (*parser).callonrow_syntax_table_args11,
					},
				},
			},
		},
		{
			name: "text_char",
			pos:  position{line: 1950, col: 1, offset: 64345},
			expr: &charClassMatcher{
				pos:        position{line: 1950, col: 14, offset: 64358},
				val:        "[^'<~[{\\n\\r:;\\]}|!=-]",
				chars:      []rune{'\'', '<', '~', '[', '{', '\n', '\r', ':', ';', ']', '}', '|', '!', '=', '-'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "urltext",
			pos:  position{line: 1975, col: 1, offset: 65212},
			expr: &oneOrMoreExpr{
				pos: position{line: 1975, col: 12, offset: 65223},
				expr: &choiceExpr{
					pos: position{line: 1975, col: 14, offset: 65225},
					alternatives: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 1975, col: 14, offset: 65225},
							expr: &charClassMatcher{
								pos:        position{line: 1975, col: 14, offset: 65225},
								val:        "[^-'<~[{\\n/A-Za-z_|!:;\\]} &=]",
								chars:      []rune{'-', '\'', '<', '~', '[', '{', '\n', '/', '_', '|', '!', ':', ';', ']', '}', ' ', '&', '='},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&actionExpr{
							pos: position{line: 1976, col: 13, offset: 65268},
							run: (*parser).callonurltext5,
							expr: &seqExpr{
								pos: position{line: 1976, col: 13, offset: 65268},
								exprs: []interface{}{
									&andExpr{
										pos: position{line: 1976, col: 13, offset: 65268},
										expr: &charClassMatcher{
											pos:        position{line: 1976, col: 15, offset: 65270},
											val:        "[/A-Za-z]",
											chars:      []rune{'/'},
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&labeledExpr{
										pos:   position{line: 1976, col: 25, offset: 65280},
										label: "al",
										expr: &ruleRefExpr{
											pos:  position{line: 1976, col: 28, offset: 65283},
											name: "autolink",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 1977, col: 13, offset: 65337},
							run: (*parser).callonurltext11,
							expr: &seqExpr{
								pos: position{line: 1977, col: 13, offset: 65337},
								exprs: []interface{}{
									&andExpr{
										pos: position{line: 1977, col: 13, offset: 65337},
										expr: &litMatcher{
											pos:        position{line: 1977, col: 15, offset: 65339},
											val:        "&",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 1977, col: 19, offset: 65343},
										label: "he",
										expr: &ruleRefExpr{
											pos:  position{line: 1977, col: 22, offset: 65346},
											name: "htmlentity",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 1981, col: 13, offset: 65550},
							run: (*parser).callonurltext17,
							expr: &seqExpr{
								pos: position{line: 1981, col: 13, offset: 65550},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1981, col: 13, offset: 65550},
										val:        " ",
										ignoreCase: false,
									},
									&andExpr{
										pos: position{line: 1981, col: 17, offset: 65554},
										expr: &litMatcher{
											pos:        position{line: 1981, col: 19, offset: 65556},
											val:        ":",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 1993, col: 13, offset: 66019},
							run: (*parser).callonurltext22,
							expr: &seqExpr{
								pos: position{line: 1993, col: 13, offset: 66019},
								exprs: []interface{}{
									&andExpr{
										pos: position{line: 1993, col: 13, offset: 66019},
										expr: &litMatcher{
											pos:        position{line: 1993, col: 16, offset: 66022},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 1993, col: 22, offset: 66028},
										label: "bs",
										expr: &ruleRefExpr{
											pos:  position{line: 1993, col: 25, offset: 66031},
											name: "behavior_switch",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1996, col: 13, offset: 66193},
							name: "text_char",
						},
					},
				},
			},
		},
		{
			name: "raw_htmlentity",
			pos:  position{line: 1998, col: 1, offset: 66207},
			expr: &actionExpr{
				pos: position{line: 1998, col: 19, offset: 66225},
				run: (*parser).callonraw_htmlentity1,
				expr: &seqExpr{
					pos: position{line: 1998, col: 20, offset: 66226},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1998, col: 20, offset: 66226},
							val:        "&",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 1998, col: 24, offset: 66230},
							expr: &charClassMatcher{
								pos:        position{line: 1998, col: 24, offset: 66230},
								val:        "[#0-9a-zA-Z]",
								chars:      []rune{'#'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 1998, col: 38, offset: 66244},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "htmlentity",
			pos:  position{line: 2004, col: 1, offset: 66314},
			expr: &actionExpr{
				pos: position{line: 2004, col: 15, offset: 66328},
				run: (*parser).callonhtmlentity1,
				expr: &ruleRefExpr{
					pos:  position{line: 2004, col: 15, offset: 66328},
					name: "raw_htmlentity",
				},
			},
		},
		{
			name: "spaces",
			pos:  position{line: 2018, col: 1, offset: 66755},
			expr: &oneOrMoreExpr{
				pos: position{line: 2018, col: 11, offset: 66765},
				expr: &charClassMatcher{
					pos:        position{line: 2018, col: 11, offset: 66765},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "space",
			pos:  position{line: 2020, col: 1, offset: 66773},
			expr: &charClassMatcher{
				pos:        position{line: 2020, col: 10, offset: 66782},
				val:        "[ \\t]",
				chars:      []rune{' ', '\t'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "optionalSpaceToken",
			pos:  position{line: 2022, col: 1, offset: 66789},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2022, col: 23, offset: 66811},
				expr: &ruleRefExpr{
					pos:  position{line: 2022, col: 23, offset: 66811},
					name: "space",
				},
			},
		},
		{
			name: "space_or_newline",
			pos:  position{line: 2030, col: 1, offset: 67112},
			expr: &charClassMatcher{
				pos:        position{line: 2031, col: 6, offset: 67134},
				val:        "[ \\t\\n\\r\\x0c]",
				chars:      []rune{' ', '\t', '\n', '\r', '\f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "end_of_word",
			pos:  position{line: 2037, col: 1, offset: 67329},
			expr: &choiceExpr{
				pos: position{line: 2038, col: 6, offset: 67346},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2038, col: 6, offset: 67346},
						name: "eof",
					},
					&notExpr{
						pos: position{line: 2038, col: 12, offset: 67352},
						expr: &charClassMatcher{
							pos:        position{line: 2038, col: 13, offset: 67353},
							val:        "[A-Za-z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "unispace",
			pos:  position{line: 2044, col: 1, offset: 67631},
			expr: &charClassMatcher{
				pos:        position{line: 2044, col: 13, offset: 67643},
				val:        "[ \\u00A0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]",
				chars:      []rune{' ', '\u00a0', '\u1680', '\u202f', '\u205f', '\u3000'},
				ranges:     []rune{'\u2000', '\u200a'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "space_or_nbsp",
			pos:  position{line: 2047, col: 1, offset: 67772},
			expr: &choiceExpr{
				pos: position{line: 2048, col: 6, offset: 67791},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2048, col: 6, offset: 67791},
						name: "space",
					},
					&ruleRefExpr{
						pos:  position{line: 2049, col: 5, offset: 67816},
						name: "unispace",
					},
					&actionExpr{
						pos: position{line: 2050, col: 5, offset: 67829},
						run: (*parser).callonspace_or_nbsp4,
						expr: &seqExpr{
							pos: position{line: 2050, col: 5, offset: 67829},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2050, col: 5, offset: 67829},
									label: "he",
									expr: &ruleRefExpr{
										pos:  position{line: 2050, col: 8, offset: 67832},
										name: "htmlentity",
									},
								},
								&andCodeExpr{
									pos: position{line: 2050, col: 19, offset: 67843},
									run: (*parser).callonspace_or_nbsp8,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "space_or_nbsp_or_dash",
			pos:  position{line: 2054, col: 1, offset: 67992},
			expr: &choiceExpr{
				pos: position{line: 2055, col: 6, offset: 68019},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2055, col: 6, offset: 68019},
						name: "space_or_nbsp",
					},
					&litMatcher{
						pos:        position{line: 2055, col: 22, offset: 68035},
						val:        "-",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "optionalNewlines",
			pos:  position{line: 2060, col: 1, offset: 68200},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2061, col: 6, offset: 68222},
				expr: &seqExpr{
					pos: position{line: 2061, col: 7, offset: 68223},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 2061, col: 7, offset: 68223},
							val:        "[\\n\\r\\t ]",
							chars:      []rune{'\n', '\r', '\t', ' '},
							ignoreCase: false,
							inverted:   false,
						},
						&andExpr{
							pos: position{line: 2061, col: 17, offset: 68233},
							expr: &charClassMatcher{
								pos:        position{line: 2061, col: 18, offset: 68234},
								val:        "[\\n\\r]",
								chars:      []rune{'\n', '\r'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "comment_or_includes",
			pos:  position{line: 2063, col: 1, offset: 68244},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2063, col: 24, offset: 68267},
				expr: &choiceExpr{
					pos: position{line: 2063, col: 25, offset: 68268},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2063, col: 25, offset: 68268},
							name: "comment",
						},
						&choiceExpr{
							pos: position{line: 2064, col: 5, offset: 68284},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2064, col: 5, offset: 68284},
									run: (*parser).calloncomment_or_includes5,
									expr: &seqExpr{
										pos: position{line: 2064, col: 7, offset: 68286},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 2064, col: 7, offset: 68286},
												run: (*parser).calloncomment_or_includes7,
											},
											&labeledExpr{
												pos:   position{line: 2068, col: 7, offset: 68355},
												label: "i",
												expr: &ruleRefExpr{
													pos:  position{line: 2068, col: 9, offset: 68357},
													name: "include_limits",
												},
											},
											&andCodeExpr{
												pos: position{line: 2069, col: 7, offset: 68378},
												run: (*parser).calloncomment_or_includes10,
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 2074, col: 7, offset: 68470},
									run: (*parser).calloncomment_or_includes11,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "sol",
			pos:  position{line: 2080, col: 1, offset: 68536},
			expr: &seqExpr{
				pos: position{line: 2080, col: 8, offset: 68543},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 2080, col: 9, offset: 68544},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2080, col: 9, offset: 68544},
								name: "empty_line_with_comments",
							},
							&ruleRefExpr{
								pos:  position{line: 2080, col: 36, offset: 68571},
								name: "sol_prefix",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2080, col: 48, offset: 68583},
						name: "comment_or_includes",
					},
				},
			},
		},
		{
			name: "sol_prefix",
			pos:  position{line: 2082, col: 1, offset: 68604},
			expr: &choiceExpr{
				pos: position{line: 2083, col: 6, offset: 68620},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2083, col: 6, offset: 68620},
						name: "newlineToken",
					},
					&actionExpr{
						pos: position{line: 2084, col: 5, offset: 68637},
						run: (*parser).callonsol_prefix3,
						expr: &andCodeExpr{
							pos: position{line: 2084, col: 5, offset: 68637},
							run: (*parser).callonsol_prefix4,
						},
					},
				},
			},
		},
		{
			name: "empty_line_with_comments",
			pos:  position{line: 2094, col: 1, offset: 68933},
			expr: &actionExpr{
				pos: position{line: 2095, col: 6, offset: 68963},
				run: (*parser).callonempty_line_with_comments1,
				expr: &seqExpr{
					pos: position{line: 2095, col: 6, offset: 68963},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2095, col: 6, offset: 68963},
							name: "sol_prefix",
						},
						&actionExpr{
							pos: position{line: 2095, col: 18, offset: 68975},
							run: (*parser).callonempty_line_with_comments4,
							expr: &litMatcher{
								pos:        position{line: 2095, col: 18, offset: 68975},
								val:        "",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2095, col: 88, offset: 69045},
							expr: &seqExpr{
								pos: position{line: 2095, col: 89, offset: 69046},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 2095, col: 89, offset: 69046},
										expr: &ruleRefExpr{
											pos:  position{line: 2095, col: 89, offset: 69046},
											name: "space",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2095, col: 96, offset: 69053},
										name: "comment",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2095, col: 104, offset: 69061},
										expr: &choiceExpr{
											pos: position{line: 2095, col: 105, offset: 69062},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 2095, col: 105, offset: 69062},
													name: "space",
												},
												&ruleRefExpr{
													pos:  position{line: 2095, col: 113, offset: 69070},
													name: "comment",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2095, col: 123, offset: 69080},
										name: "newline",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "comment_space",
			pos:  position{line: 2107, col: 1, offset: 69354},
			expr: &choiceExpr{
				pos: position{line: 2107, col: 18, offset: 69371},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2107, col: 18, offset: 69371},
						name: "comment",
					},
					&ruleRefExpr{
						pos:  position{line: 2107, col: 28, offset: 69381},
						name: "space",
					},
				},
			},
		},
		{
			name: "nl_comment_space",
			pos:  position{line: 2109, col: 1, offset: 69388},
			expr: &choiceExpr{
				pos: position{line: 2109, col: 21, offset: 69408},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2109, col: 21, offset: 69408},
						name: "newlineToken",
					},
					&ruleRefExpr{
						pos:  position{line: 2109, col: 36, offset: 69423},
						name: "comment_space",
					},
				},
			},
		},
		{
			name: "include_limits",
			pos:  position{line: 2126, col: 1, offset: 69770},
			expr: &actionExpr{
				pos: position{line: 2127, col: 3, offset: 69790},
				run: (*parser).calloninclude_limits1,
				expr: &seqExpr{
					pos: position{line: 2127, col: 3, offset: 69790},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2127, col: 3, offset: 69790},
							label: "il",
							expr: &actionExpr{
								pos: position{line: 2127, col: 7, offset: 69794},
								run: (*parser).calloninclude_limits4,
								expr: &seqExpr{
									pos: position{line: 2127, col: 7, offset: 69794},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2127, col: 7, offset: 69794},
											val:        "<",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 2127, col: 11, offset: 69798},
											expr: &litMatcher{
												pos:        position{line: 2127, col: 11, offset: 69798},
												val:        "/",
												ignoreCase: false,
											},
										},
										&seqExpr{
											pos: position{line: 2127, col: 17, offset: 69804},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2127, col: 17, offset: 69804},
													expr: &charClassMatcher{
														pos:        position{line: 2127, col: 17, offset: 69804},
														val:        "[oyinclude]i",
														chars:      []rune{'o', 'y', 'i', 'n', 'c', 'l', 'u', 'd', 'e'},
														ignoreCase: true,
														inverted:   false,
													},
												},
												&andCodeExpr{
													pos: position{line: 2127, col: 31, offset: 69818},
													run: (*parser).calloninclude_limits12,
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2133, col: 6, offset: 69981},
											expr: &ruleRefExpr{
												pos:  position{line: 2133, col: 6, offset: 69981},
												name: "space_or_newline",
											},
										},
										&litMatcher{
											pos:        position{line: 2133, col: 24, offset: 69999},
											val:        ">",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2183, col: 6, offset: 71525},
							run: (*parser).calloninclude_limits16,
						},
					},
				},
			},
		},
		{
			name: "sof",
			pos:  position{line: 2186, col: 1, offset: 71622},
			expr: &andCodeExpr{
				pos: position{line: 2186, col: 8, offset: 71629},
				run: (*parser).callonsof1,
			},
		},
		{
			name: "eof",
			pos:  position{line: 2191, col: 1, offset: 71683},
			expr: &andCodeExpr{
				pos: position{line: 2191, col: 8, offset: 71690},
				run: (*parser).calloneof1,
			},
		},
		{
			name: "newline",
			pos:  position{line: 2196, col: 1, offset: 71767},
			expr: &choiceExpr{
				pos: position{line: 2196, col: 12, offset: 71778},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2196, col: 12, offset: 71778},
						val:        "\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 2196, col: 19, offset: 71785},
						val:        "\r\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "newlineToken",
			pos:  position{line: 2198, col: 1, offset: 71793},
			expr: &actionExpr{
				pos: position{line: 2198, col: 17, offset: 71809},
				run: (*parser).callonnewlineToken1,
				expr: &ruleRefExpr{
					pos:  position{line: 2198, col: 17, offset: 71809},
					name: "newline",
				},
			},
		},
		{
			name: "eolf",
			pos:  position{line: 2200, col: 1, offset: 71875},
			expr: &choiceExpr{
				pos: position{line: 2200, col: 9, offset: 71883},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2200, col: 9, offset: 71883},
						name: "newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2200, col: 19, offset: 71893},
						name: "eof",
					},
				},
			},
		},
		{
			name: "comment_space_eolf",
			pos:  position{line: 2202, col: 1, offset: 71898},
			expr: &seqExpr{
				pos: position{line: 2202, col: 23, offset: 71920},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2202, col: 23, offset: 71920},
						expr: &choiceExpr{
							pos: position{line: 2202, col: 24, offset: 71921},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2202, col: 24, offset: 71921},
									expr: &ruleRefExpr{
										pos:  position{line: 2202, col: 24, offset: 71921},
										name: "space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2202, col: 33, offset: 71930},
									name: "comment",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2202, col: 43, offset: 71940},
						name: "eolf",
					},
				},
			},
		},
		{
			name: "directive",
			pos:  position{line: 2206, col: 1, offset: 72046},
			expr: &choiceExpr{
				pos: position{line: 2207, col: 6, offset: 72061},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2207, col: 6, offset: 72061},
						name: "comment",
					},
					&ruleRefExpr{
						pos:  position{line: 2208, col: 5, offset: 72073},
						name: "extension_tag",
					},
					&ruleRefExpr{
						pos:  position{line: 2209, col: 5, offset: 72091},
						name: "tplarg_or_template",
					},
					&actionExpr{
						pos: position{line: 2210, col: 5, offset: 72114},
						run: (*parser).callondirective5,
						expr: &seqExpr{
							pos: position{line: 2210, col: 5, offset: 72114},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2210, col: 5, offset: 72114},
									expr: &litMatcher{
										pos:        position{line: 2210, col: 7, offset: 72116},
										val:        "-{",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 2210, col: 12, offset: 72121},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 2210, col: 14, offset: 72123},
										name: "lang_variant_or_tpl",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2211, col: 5, offset: 72178},
						run: (*parser).callondirective11,
						expr: &seqExpr{
							pos: position{line: 2211, col: 5, offset: 72178},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2211, col: 5, offset: 72178},
									expr: &litMatcher{
										pos:        position{line: 2211, col: 7, offset: 72180},
										val:        "&",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 2211, col: 11, offset: 72184},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 2211, col: 13, offset: 72186},
										name: "htmlentity",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2212, col: 5, offset: 72232},
						name: "include_limits",
					},
				},
			},
		},
		{
			name: "wikilink_preprocessor_text",
			pos:  position{line: 2214, col: 1, offset: 72248},
			expr: &actionExpr{
				pos: position{line: 2215, col: 6, offset: 72280},
				run: (*parser).callonwikilink_preprocessor_text1,
				expr: &labeledExpr{
					pos:   position{line: 2215, col: 6, offset: 72280},
					label: "r",
					expr: &oneOrMoreExpr{
						pos: position{line: 2215, col: 8, offset: 72282},
						expr: &choiceExpr{
							pos: position{line: 2215, col: 10, offset: 72284},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2215, col: 10, offset: 72284},
									expr: &charClassMatcher{
										pos:        position{line: 2215, col: 10, offset: 72284},
										val:        "[^<[{\\n\\r\\t|!\\]}{ &-]",
										chars:      []rune{'<', '[', '{', '\n', '\r', '\t', '|', '!', ']', '}', '{', ' ', '&', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2217, col: 11, offset: 72370},
									run: (*parser).callonwikilink_preprocessor_text7,
									expr: &seqExpr{
										pos: position{line: 2217, col: 11, offset: 72370},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2217, col: 11, offset: 72370},
												expr: &ruleRefExpr{
													pos:  position{line: 2217, col: 12, offset: 72371},
													name: "inline_breaks",
												},
											},
											&labeledExpr{
												pos:   position{line: 2217, col: 26, offset: 72385},
												label: "wr",
												expr: &choiceExpr{
													pos: position{line: 2217, col: 31, offset: 72390},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2217, col: 31, offset: 72390},
															name: "directive",
														},
														&seqExpr{
															pos: position{line: 2217, col: 45, offset: 72404},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 2217, col: 45, offset: 72404},
																	expr: &litMatcher{
																		pos:        position{line: 2217, col: 46, offset: 72405},
																		val:        "]]",
																		ignoreCase: false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2217, col: 53, offset: 72412},
																	alternatives: []interface{}{
																		&ruleRefExpr{
																			pos:  position{line: 2217, col: 53, offset: 72412},
																			name: "text_char",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2217, col: 65, offset: 72424},
																			val:        "[!<}\\]\\n\\r-]",
																			chars:      []rune{'!', '<', '}', ']', '\n', '\r', '-'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "extlink_preprocessor_text",
			pos:  position{line: 2225, col: 1, offset: 72565},
			expr: &choiceExpr{
				pos: position{line: 2228, col: 6, offset: 72688},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2228, col: 6, offset: 72688},
						run: (*parser).callonextlink_preprocessor_text2,
						expr: &seqExpr{
							pos: position{line: 2228, col: 6, offset: 72688},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2228, col: 6, offset: 72688},
									run: (*parser).callonextlink_preprocessor_text4,
								},
								&labeledExpr{
									pos:   position{line: 2235, col: 3, offset: 72897},
									label: "r",
									expr: &oneOrMoreExpr{
										pos: position{line: 2235, col: 5, offset: 72899},
										expr: &choiceExpr{
											pos: position{line: 2235, col: 7, offset: 72901},
											alternatives: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2235, col: 7, offset: 72901},
													expr: &charClassMatcher{
														pos:        position{line: 2235, col: 7, offset: 72901},
														val:        "[^'<~[{\\n\\r|!\\]}\\t&=\"' \\u00A0\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000-]",
														chars:      []rune{'\'', '<', '~', '[', '{', '\n', '\r', '|', '!', ']', '}', '\t', '&', '=', '"', '\'', ' ', '\u00a0', '\u1680', '\u180e', '\u202f', '\u205f', '\u3000', '-'},
														ranges:     []rune{'\u2000', '\u200a'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&actionExpr{
													pos: position{line: 2236, col: 5, offset: 72981},
													run: (*parser).callonextlink_preprocessor_text10,
													expr: &seqExpr{
														pos: position{line: 2236, col: 5, offset: 72981},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 2236, col: 5, offset: 72981},
																expr: &ruleRefExpr{
																	pos:  position{line: 2236, col: 6, offset: 72982},
																	name: "inline_breaks",
																},
															},
															&labeledExpr{
																pos:   position{line: 2236, col: 20, offset: 72996},
																label: "s",
																expr: &choiceExpr{
																	pos: position{line: 2236, col: 24, offset: 73000},
																	alternatives: []interface{}{
																		&ruleRefExpr{
																			pos:  position{line: 2236, col: 24, offset: 73000},
																			name: "directive",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 2236, col: 36, offset: 73012},
																			name: "no_punctuation_char",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2236, col: 58, offset: 73034},
																			val:        "[&|{-]",
																			chars:      []rune{'&', '|', '{', '-'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&seqExpr{
													pos: position{line: 2240, col: 6, offset: 73139},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2240, col: 6, offset: 73139},
															val:        "[.:,]",
															chars:      []rune{'.', ':', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2240, col: 12, offset: 73145},
															expr: &choiceExpr{
																pos: position{line: 2240, col: 14, offset: 73147},
																alternatives: []interface{}{
																	&ruleRefExpr{
																		pos:  position{line: 2240, col: 14, offset: 73147},
																		name: "space",
																	},
																	&ruleRefExpr{
																		pos:  position{line: 2240, col: 22, offset: 73155},
																		name: "eolf",
																	},
																},
															},
														},
													},
												},
												&seqExpr{
													pos: position{line: 2241, col: 6, offset: 73167},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2241, col: 6, offset: 73167},
															val:        "[']",
															chars:      []rune{'\''},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2241, col: 10, offset: 73171},
															expr: &charClassMatcher{
																pos:        position{line: 2241, col: 11, offset: 73172},
																val:        "[']",
																chars:      []rune{'\''},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 2248, col: 5, offset: 73329},
						run: (*parser).callonextlink_preprocessor_text29,
					},
				},
			},
		},
		{
			name: "attribute_preprocessor_text",
			pos:  position{line: 2257, col: 1, offset: 73673},
			expr: &actionExpr{
				pos: position{line: 2258, col: 6, offset: 73706},
				run: (*parser).callonattribute_preprocessor_text1,
				expr: &labeledExpr{
					pos:   position{line: 2258, col: 6, offset: 73706},
					label: "r",
					expr: &oneOrMoreExpr{
						pos: position{line: 2258, col: 8, offset: 73708},
						expr: &choiceExpr{
							pos: position{line: 2258, col: 10, offset: 73710},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2258, col: 10, offset: 73710},
									expr: &charClassMatcher{
										pos:        position{line: 2258, col: 10, offset: 73710},
										val:        "[^{}&<|/ \\t\\n\\r\\x0c>-]",
										chars:      []rune{'{', '}', '&', '<', '|', '/', ' ', '\t', '\n', '\r', '\f', '>', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2259, col: 5, offset: 73738},
									run: (*parser).callonattribute_preprocessor_text7,
									expr: &seqExpr{
										pos: position{line: 2259, col: 5, offset: 73738},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2259, col: 5, offset: 73738},
												expr: &ruleRefExpr{
													pos:  position{line: 2259, col: 6, offset: 73739},
													name: "inline_breaks",
												},
											},
											&notExpr{
												pos: position{line: 2260, col: 5, offset: 73757},
												expr: &litMatcher{
													pos:        position{line: 2260, col: 6, offset: 73758},
													val:        "/>",
													ignoreCase: false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2261, col: 5, offset: 73767},
												label: "s",
												expr: &choiceExpr{
													pos: position{line: 2261, col: 9, offset: 73771},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2261, col: 9, offset: 73771},
															name: "directive",
														},
														&charClassMatcher{
															pos:        position{line: 2261, col: 21, offset: 73783},
															val:        "[{}&<|/-]",
															chars:      []rune{'{', '}', '&', '<', '|', '/', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attribute_preprocessor_text_single",
			pos:  position{line: 2269, col: 1, offset: 73950},
			expr: &actionExpr{
				pos: position{line: 2270, col: 6, offset: 73990},
				run: (*parser).callonattribute_preprocessor_text_single1,
				expr: &labeledExpr{
					pos:   position{line: 2270, col: 6, offset: 73990},
					label: "r",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2270, col: 8, offset: 73992},
						expr: &choiceExpr{
							pos: position{line: 2270, col: 10, offset: 73994},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2270, col: 10, offset: 73994},
									expr: &charClassMatcher{
										pos:        position{line: 2270, col: 10, offset: 73994},
										val:        "[^{}&<|/'>-]",
										chars:      []rune{'{', '}', '&', '<', '|', '/', '\'', '>', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2271, col: 5, offset: 74012},
									run: (*parser).callonattribute_preprocessor_text_single7,
									expr: &seqExpr{
										pos: position{line: 2271, col: 5, offset: 74012},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2271, col: 5, offset: 74012},
												expr: &ruleRefExpr{
													pos:  position{line: 2271, col: 6, offset: 74013},
													name: "inline_breaks",
												},
											},
											&notExpr{
												pos: position{line: 2272, col: 5, offset: 74031},
												expr: &litMatcher{
													pos:        position{line: 2272, col: 6, offset: 74032},
													val:        "/>",
													ignoreCase: false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2273, col: 5, offset: 74041},
												label: "s",
												expr: &choiceExpr{
													pos: position{line: 2273, col: 9, offset: 74045},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2273, col: 9, offset: 74045},
															name: "directive",
														},
														&charClassMatcher{
															pos:        position{line: 2273, col: 21, offset: 74057},
															val:        "[{}&<|/-]",
															chars:      []rune{'{', '}', '&', '<', '|', '/', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attribute_preprocessor_text_double",
			pos:  position{line: 2281, col: 1, offset: 74224},
			expr: &actionExpr{
				pos: position{line: 2282, col: 6, offset: 74264},
				run: (*parser).callonattribute_preprocessor_text_double1,
				expr: &labeledExpr{
					pos:   position{line: 2282, col: 6, offset: 74264},
					label: "r",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2282, col: 8, offset: 74266},
						expr: &choiceExpr{
							pos: position{line: 2282, col: 10, offset: 74268},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2282, col: 10, offset: 74268},
									expr: &charClassMatcher{
										pos:        position{line: 2282, col: 10, offset: 74268},
										val:        "[^{}&<|/\">-]",
										chars:      []rune{'{', '}', '&', '<', '|', '/', '"', '>', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2283, col: 5, offset: 74286},
									run: (*parser).callonattribute_preprocessor_text_double7,
									expr: &seqExpr{
										pos: position{line: 2283, col: 5, offset: 74286},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2283, col: 5, offset: 74286},
												expr: &ruleRefExpr{
													pos:  position{line: 2283, col: 6, offset: 74287},
													name: "inline_breaks",
												},
											},
											&notExpr{
												pos: position{line: 2284, col: 5, offset: 74305},
												expr: &litMatcher{
													pos:        position{line: 2284, col: 6, offset: 74306},
													val:        "/>",
													ignoreCase: false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2285, col: 5, offset: 74315},
												label: "s",
												expr: &choiceExpr{
													pos: position{line: 2285, col: 9, offset: 74319},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2285, col: 9, offset: 74319},
															name: "directive",
														},
														&charClassMatcher{
															pos:        position{line: 2285, col: 21, offset: 74331},
															val:        "[{}&<|/-]",
															chars:      []rune{'{', '}', '&', '<', '|', '/', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_attribute_preprocessor_text",
			pos:  position{line: 2301, col: 1, offset: 74853},
			expr: &actionExpr{
				pos: position{line: 2302, col: 6, offset: 74892},
				run: (*parser).callontable_attribute_preprocessor_text1,
				expr: &labeledExpr{
					pos:   position{line: 2302, col: 6, offset: 74892},
					label: "r",
					expr: &oneOrMoreExpr{
						pos: position{line: 2302, col: 8, offset: 74894},
						expr: &choiceExpr{
							pos: position{line: 2302, col: 10, offset: 74896},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2302, col: 10, offset: 74896},
									expr: &charClassMatcher{
										pos:        position{line: 2302, col: 10, offset: 74896},
										val:        "[^{}&<![ \\t\\n\\r\\x0c|-]",
										chars:      []rune{'{', '}', '&', '<', '!', '[', ' ', '\t', '\n', '\r', '\f', '|', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2303, col: 5, offset: 74924},
									run: (*parser).callontable_attribute_preprocessor_text7,
									expr: &seqExpr{
										pos: position{line: 2303, col: 5, offset: 74924},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2303, col: 5, offset: 74924},
												expr: &ruleRefExpr{
													pos:  position{line: 2303, col: 6, offset: 74925},
													name: "inline_breaks",
												},
											},
											&labeledExpr{
												pos:   position{line: 2303, col: 20, offset: 74939},
												label: "s",
												expr: &choiceExpr{
													pos: position{line: 2303, col: 24, offset: 74943},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2303, col: 24, offset: 74943},
															name: "directive",
														},
														&charClassMatcher{
															pos:        position{line: 2303, col: 36, offset: 74955},
															val:        "[{}&<![-]",
															chars:      []rune{'{', '}', '&', '<', '!', '[', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_attribute_preprocessor_text_single",
			pos:  position{line: 2311, col: 1, offset: 75124},
			expr: &actionExpr{
				pos: position{line: 2312, col: 6, offset: 75170},
				run: (*parser).callontable_attribute_preprocessor_text_single1,
				expr: &labeledExpr{
					pos:   position{line: 2312, col: 6, offset: 75170},
					label: "r",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2312, col: 8, offset: 75172},
						expr: &choiceExpr{
							pos: position{line: 2312, col: 10, offset: 75174},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2312, col: 10, offset: 75174},
									expr: &charClassMatcher{
										pos:        position{line: 2312, col: 10, offset: 75174},
										val:        "[^{}&<!['\\r\\n|-]",
										chars:      []rune{'{', '}', '&', '<', '!', '[', '\'', '\r', '\n', '|', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2313, col: 5, offset: 75196},
									run: (*parser).callontable_attribute_preprocessor_text_single7,
									expr: &seqExpr{
										pos: position{line: 2313, col: 5, offset: 75196},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2313, col: 5, offset: 75196},
												expr: &ruleRefExpr{
													pos:  position{line: 2313, col: 6, offset: 75197},
													name: "inline_breaks",
												},
											},
											&labeledExpr{
												pos:   position{line: 2313, col: 20, offset: 75211},
												label: "s",
												expr: &choiceExpr{
													pos: position{line: 2313, col: 24, offset: 75215},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2313, col: 24, offset: 75215},
															name: "directive",
														},
														&charClassMatcher{
															pos:        position{line: 2313, col: 36, offset: 75227},
															val:        "[{}&<![-]",
															chars:      []rune{'{', '}', '&', '<', '!', '[', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "table_attribute_preprocessor_text_double",
			pos:  position{line: 2321, col: 1, offset: 75396},
			expr: &actionExpr{
				pos: position{line: 2322, col: 6, offset: 75442},
				run: (*parser).callontable_attribute_preprocessor_text_double1,
				expr: &labeledExpr{
					pos:   position{line: 2322, col: 6, offset: 75442},
					label: "r",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2322, col: 8, offset: 75444},
						expr: &choiceExpr{
							pos: position{line: 2322, col: 10, offset: 75446},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2322, col: 10, offset: 75446},
									expr: &charClassMatcher{
										pos:        position{line: 2322, col: 10, offset: 75446},
										val:        "[^{}&<![\"\\r\\n|-]",
										chars:      []rune{'{', '}', '&', '<', '!', '[', '"', '\r', '\n', '|', '-'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&actionExpr{
									pos: position{line: 2323, col: 5, offset: 75468},
									run: (*parser).callontable_attribute_preprocessor_text_double7,
									expr: &seqExpr{
										pos: position{line: 2323, col: 5, offset: 75468},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2323, col: 5, offset: 75468},
												expr: &ruleRefExpr{
													pos:  position{line: 2323, col: 6, offset: 75469},
													name: "inline_breaks",
												},
											},
											&labeledExpr{
												pos:   position{line: 2323, col: 20, offset: 75483},
												label: "s",
												expr: &choiceExpr{
													pos: position{line: 2323, col: 24, offset: 75487},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 2323, col: 24, offset: 75487},
															name: "directive",
														},
														&charClassMatcher{
															pos:        position{line: 2323, col: 36, offset: 75499},
															val:        "[{}&<![-]",
															chars:      []rune{'{', '}', '&', '<', '!', '[', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "pipe",
			pos:  position{line: 2331, col: 1, offset: 75660},
			expr: &choiceExpr{
				pos: position{line: 2331, col: 9, offset: 75668},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2331, col: 9, offset: 75668},
						val:        "|",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 2331, col: 15, offset: 75674},
						val:        "{{!}}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "pipe_pipe",
			pos:  position{line: 2334, col: 1, offset: 75726},
			expr: &choiceExpr{
				pos: position{line: 2334, col: 14, offset: 75739},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2334, col: 14, offset: 75739},
						val:        "||",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 2334, col: 21, offset: 75746},
						val:        "{{!}}{{!}}",
						ignoreCase: false,
					},
				},
			},
		},
	},
}

func (c *current) onstart1(tlb interface{}) (interface{}, error) {
	n := &html.Node{
		Type: html.DocumentNode,
	}
	addChild(n, tlb)
	if len(c.state) > 0 {
		panic(errors.Errorf("poluted state! %#v", c.state))
	}
	return n, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["tlb"])
}

func (c *current) onredirect13(wl interface{}) (bool, error) {
	/*
	   return wl.length === 1 && wl[0] && wl[0].constructor !== String;
	*/
	return false, nil

}

func (p *parser) callonredirect13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onredirect13(stack["wl"])
}

func (c *current) onredirect1(wl interface{}) (interface{}, error) {
	/*
		    var link = wl[0];
		    if (sp) { rw += sp; }
		    if (c) { rw += c; }
		// Build a redirect token
		    var redirect = new SelfclosingTagTk('mw:redirect',
		// Put 'href' into attributes so it gets template-expanded
		            [Util.lookupKV(link.attribs, 'href')],
		            {
		                src: rw,
		                tsr: tsrOffsets(),
		                linkTk: link,
		            });
		    return redirect;
	*/
	return "todo redirect", nil
}

func (p *parser) callonredirect1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onredirect1(stack["wl"])
}

func (c *current) ontable_attributes4(b interface{}) (interface{}, error) {
	return b, nil
}

func (p *parser) callontable_attributes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attributes4(stack["b"])
}

func (c *current) onredirect_word11() (bool, error) {
	return false, nil /*return env.conf.wiki.getMagicWordMatcher('redirect').test(rw);*/
}

func (p *parser) callonredirect_word11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onredirect_word11()
}

func (c *current) onstart_async7() (bool, error) {
	return false, nil
	/*
		      if (endOffset() === input.length) {
		          emitChunk([ new EOFTk() ]);
		      }
		// terminate the loop
		      return false;
	*/

}

func (p *parser) callonstart_async7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart_async7()
}

func (c *current) ontlb1(b interface{}) (interface{}, error) {
	return b, nil
}

func (p *parser) callontlb1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontlb1(stack["b"])
}

func (c *current) onblock2() (interface{}, error) {
	return "comment_or_includes", nil /*return [r].concat(cil, bl || []);*/
}

func (p *parser) callonblock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock2()
}

func (c *current) onblock17(cm interface{}) (interface{}, error) {
	return cm, nil /*return c;*/
}

func (p *parser) callonblock17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock17(stack["cm"])
}

func (c *current) onblock11(rs interface{}) (interface{}, error) {
	return rs, nil /*return rs;*/
}

func (p *parser) callonblock11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock11(stack["rs"])
}

func (c *current) onblock26(s interface{}) (interface{}, error) {
	return s, nil /*return s;*/
}

func (p *parser) callonblock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock26(stack["s"])
}

func (c *current) onnested_block1(b interface{}) (interface{}, error) {
	return b, nil /*return b;*/
}

func (p *parser) callonnested_block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnested_block1(stack["b"])
}

func (c *current) onnested_block_in_table3() error {
	push(c, "tableDataBlock", true)
	return nil
	/*
	   return stops.push('tableDataBlock', true);
	*/

}

func (p *parser) callonnested_block_in_table3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnested_block_in_table3()
}

func (c *current) onnested_block_in_table19(b interface{}) error {
	pop(c, "tableDataBlock")
	return nil
}

func (p *parser) callonnested_block_in_table19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnested_block_in_table19(stack["b"])
}

func (c *current) onnested_block_in_table1(b interface{}) (interface{}, error) {
	return b, nil
	/*
	   stops.pop('tableDataBlock');
	   return b;
	*/

}

func (p *parser) callonnested_block_in_table1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnested_block_in_table1(stack["b"])
}

func (c *current) onhr7() (interface{}, error) {
	return nil, nil /*return undefined;*/
}

func (p *parser) callonhr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhr7()
}

func (c *current) onhr12() (interface{}, error) {
	return true, nil /*return true;*/
}

func (p *parser) callonhr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhr12()
}

func (c *current) onhr1() (interface{}, error) {
	return &html.Node{
		Type: html.ElementNode,
		Data: "hr",
	}, nil
	/*
	   var dataAttribs = {
	     tsr: tsrOffsets(),
	     lineContent: lineContent,
	   };
	   if (d.length > 0) {
	     dataAttribs.extra_dashes = d.length;
	   }
	   return new SelfclosingTagTk('hr', [], dataAttribs);
	*/

}

func (p *parser) callonhr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhr1()
}

func (c *current) onblock_line12(tl interface{}) (interface{}, error) {
	return tl, nil /*return tl;*/
}

func (p *parser) callonblock_line12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_line12(stack["tl"])
}

func (c *current) onblock_line22(bt, stl interface{}) (interface{}, error) {
	return concat(bt, stl), nil /*return bt.concat(stl);*/
}

func (p *parser) callonblock_line22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_line22(stack["bt"], stack["stl"])
}

func (c *current) onblock_line18(bts interface{}) (interface{}, error) {
	return bts, nil /*return bts;*/
}

func (p *parser) callonblock_line18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_line18(stack["bts"])
}

func (c *current) onblock_line5(st, r interface{}) (interface{}, error) {
	return concat(st, r), nil
	/*
	   return st.concat(r);
	*/

}

func (p *parser) callonblock_line5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_line5(stack["st"], stack["r"])
}

func (c *current) onparagraph1(s1, s2, c1 interface{}) (interface{}, error) {
	n := &html.Node{
		Type: html.ElementNode,
		Data: "p",
	}
	addChild(n, c1)
	return n, nil
}

func (p *parser) callonparagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparagraph1(stack["s1"], stack["s2"], stack["c1"])
}

func (c *current) onbr1() (interface{}, error) {
	return &html.Node{
		Type: html.ElementNode,
		Data: "br",
	}, nil
	/*
	   return s.concat([
	     new SelfclosingTagTk('br', [], { tsr: tsrOffsets() }),
	   ]);
	*/
}

func (p *parser) callonbr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbr1()
}

func (c *current) oninline_breaks1() (bool, error) {
	return inlineBreaks(c)
}

func (p *parser) calloninline_breaks1() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninline_breaks1()
}

func (c *current) oninlineline6(r interface{}) error {
	log.Printf("urltext %q", concat(r))
	return nil
}

func (p *parser) calloninlineline6() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninlineline6(stack["r"])
}

func (c *current) oninlineline_element9(r interface{}) error {
	log.Printf("inline_element: %q", concat(r))
	return nil
}

func (p *parser) calloninlineline_element9() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninlineline_element9(stack["r"])
}

func (c *current) oninlineline_element1(r interface{}) (interface{}, error) {
	return r, nil
}

func (p *parser) calloninlineline_element1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninlineline_element1(stack["r"])
}

func (c *current) oninline_element2(r interface{}) (interface{}, error) {
	return r, nil /*return r;*/
}

func (p *parser) calloninline_element2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninline_element2(stack["r"])
}

func (c *current) oninline_element10(r interface{}) (interface{}, error) {
	return r, nil /* return r; */
}

func (p *parser) calloninline_element10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninline_element10(stack["r"])
}

func (c *current) oninline_element16(r interface{}) (interface{}, error) {
	return r, nil /* return r; */
}

func (p *parser) calloninline_element16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninline_element16(stack["r"])
}

func (c *current) oninline_element27(r interface{}) (interface{}, error) {
	return r, nil /* return r; */
}

func (p *parser) calloninline_element27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninline_element27(stack["r"])
}

func (c *current) oninline_element35(r interface{}) (interface{}, error) {
	return r, nil /* return r; */
}

func (p *parser) calloninline_element35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninline_element35(stack["r"])
}

func (c *current) onheading8() error {
	inc(c, "h")
	return nil /*return stops.inc('h');*/
}

func (p *parser) callonheading8() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onheading8()
}

func (c *current) onheading14(ill interface{}) (interface{}, error) {
	return ill, nil
}

func (p *parser) callonheading14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onheading14(stack["ill"])
}

func (c *current) onheading24(s, ce interface{}) (bool, error) {
	return ce != nil || len(concat(s)) > 2, nil
	/*return ce || s.length > 2;*/

}

func (p *parser) callonheading24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onheading24(stack["s"], stack["ce"])
}

func (c *current) onheading32(s, ce, spc interface{}) error {
	dec(c, "h")
	return nil
}

func (p *parser) callonheading32() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onheading32(stack["s"], stack["ce"], stack["spc"])
}

func (c *current) onheading6(s, ce, spc interface{}) (interface{}, error) {
	n := &html.Node{
		Type: html.ElementNode,
		Data: "h" + strconv.Itoa(len(concat(s))),
	}
	addChild(n, []interface{}{ce, spc})
	return n, nil
	/*
		        var c;
		        var e;
		        var level;
		        stops.dec('h');
		        if (ce) {
		            c = ce[0];
		            e = ce[1];
		            level = Math.min(s.length, e.length);
		        } else {
		// split up equal signs into two equal parts, with at least
		// one character in the middle.
		            level = Math.floor((s.length - 1) / 2);
		            c = ['='.repeat(s.length - 2 * level)];
		            s = e = '='.repeat(level);
		        }
		        level = Math.min(6, level);
		// convert surplus equals into text
		        if (s.length > level) {
		            var extras1 = s.substr(0, s.length - level);
		            if (c[0].constructor === String) {
		                c[0] = extras1 + c[0];
		            } else {
		                c.unshift(extras1);
		            }
		        }
		        if (e.length > level) {
		            var extras2 = e.substr(0, e.length - level);
		            var lastElem = lastItem(c);
		            if (lastElem.constructor === String) {
		                c[c.length - 1] += extras2;
		            } else {
		                c.push(extras2);
		            }
		        }

		        var tsr = tsrOffsets('start');
		        tsr[1] += level;
		        return [
		          new TagTk('h' + level, [], { tsr: tsr }),
		        ].concat(c, [
		          new EndTagTk('h' + level, [], { tsr: [endTPos - level, endTPos] }),
		          spc,
		        ]);
	*/

}

func (p *parser) callonheading6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onheading6(stack["s"], stack["ce"], stack["spc"])
}

func (c *current) onheading1(r interface{}) (interface{}, error) {
	return r, nil /*return r;*/

}

func (p *parser) callonheading1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onheading1(stack["r"])
}

func (c *current) oncomment1(c1 interface{}) (interface{}, error) {
	return &html.Node{
		Type: html.CommentNode,
		Data: concat(c1),
	}, nil
	/*
	   var data = DU.encodeComment(c);
	   return [new CommentTk(data, { tsr: tsrOffsets() })];
	*/

}

func (p *parser) calloncomment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment1(stack["c1"])
}

func (c *current) onbehavior_switch1() (interface{}, error) {
	return "behavior_text", nil
	/*
	   if (env.conf.wiki.isMagicWord(bs)) {
	     return [
	       new SelfclosingTagTk('behavior-switch', [ new KV('word', bs) ],
	         { tsr: tsrOffsets(), src: bs, magicSrc: bs }
	       ),
	     ];
	   } else {
	     return [ bs ];
	   }
	*/

}

func (p *parser) callonbehavior_switch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbehavior_switch1()
}

func (c *current) onautolink3() (bool, error) {
	return true, nil /*return stops.onStack('extlink');*/
}

func (p *parser) callonautolink3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautolink3()
}

func (c *current) onautolink4() (bool, error) {
	return true, nil /*return /\w/.test(input[endOffset() - 1] || '');*/
}

func (p *parser) callonautolink4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautolink4()
}

func (c *current) onautolink7(target interface{}) (interface{}, error) {
	return "autourl", nil
	/*
	   var res = [new SelfclosingTagTk('urllink', [new KV('href', target)], { tsr: tsrOffsets() })];
	     return res;
	*/

}

func (p *parser) callonautolink7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautolink7(stack["target"])
}

func (c *current) onautolink1(r interface{}) (interface{}, error) {
	return r, nil /*return r;*/
}

func (p *parser) callonautolink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautolink1(stack["r"])
}

func (c *current) onextlink3() (bool, error) {
	return true, nil /* return stops.onStack('extlink'); */
}

func (p *parser) callonextlink3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink3()
}

func (c *current) onextlink8() (bool, error) {
	return false, nil /*return stops.push('extlink', return true, nil);*/
}

func (p *parser) callonextlink8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink8()
}

func (c *current) onextlink17() (bool, error) {
	return false, nil /*
		// Protocol must be valid and there ought to be at least one
		// post-protocol character.  So strip last char off target
		// before testing protocol.
		          var flat = tu.flattenString([addr, target]);
		          if (Array.isArray(flat)) {
		// There are templates present, alas.
		             return flat.length > 0;
		          }
		          return Util.isProtocolValid(flat.slice(0, -1), env);
	*/

}

func (p *parser) callonextlink17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink17()
}

func (c *current) onextlink5() (interface{}, error) {
	return nil, nil
	/*
	   stops.pop('extlink');
	   return [
	       new SelfclosingTagTk('extlink', [
	           new KV('href', tu.flattenString([addr, target])),
	           new KV('mw:content', content || ''),
	           new KV('spaces', sp),
	       ], {
	           targetOff: targetOff,
	           tsr: tsrOffsets(),
	           contentOffsets: [targetOff, endOffset() - 1],
	       }),
	   ];
	*/

}

func (p *parser) callonextlink5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink5()
}

func (c *current) onextlink27() (bool, error) {
	return false, nil /*return stops.pop('extlink');*/
}

func (p *parser) callonextlink27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink27()
}

func (c *current) onextlink1() (interface{}, error) {
	return nil, nil /*return r;*/
}

func (p *parser) callonextlink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink1()
}

func (c *current) onautoref1() (interface{}, error) {
	return nil, nil
	/*
	   var base_urls = {
	     'RFC': 'https://tools.ietf.org/html/rfc%s',
	     'PMID': '//www.ncbi.nlm.nih.gov/pubmed/%s?dopt=Abstract',
	   };
	   return [
	       new SelfclosingTagTk('extlink', [
	          new KV('href', tu.sprintf(base_urls[ref], identifier)),
	          new KV('mw:content', tu.flattenString([ref, sp, identifier])),
	          new KV('typeof', 'mw:ExtLink/' + ref),
	       ],
	       { stx: "magiclink", tsr: tsrOffsets() }),
	   ];
	*/
}

func (p *parser) callonautoref1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautoref1()
}

func (c *current) onisbn10() (interface{}, error) {
	return nil, nil /* return s; */
}

func (p *parser) callonisbn10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onisbn10()
}

func (c *current) onisbn23() (interface{}, error) {
	return nil, nil
	/*
		// Convert isbn token-and-entity array to stripped string.
		        return tu.flattenStringlist(isbn).filter(function(e) {
		          return e.constructor === String;
		        }).join('').replace(/[^\dX]/ig, '').toUpperCase();
	*/

}

func (p *parser) callonisbn23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onisbn23()
}

func (c *current) onisbn25() (bool, error) {
	return false, nil
	/*
		// ISBNs can only be 10 or 13 digits long (with a specific format)
		       return isbncode.length === 10 ||
		             (isbncode.length === 13 && /^97[89]/.test(isbncode));
	*/

}

func (p *parser) callonisbn25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onisbn25()
}

func (c *current) onisbn1() (interface{}, error) {
	return nil, nil
	/*
	   return [
	     new SelfclosingTagTk('extlink', [
	        new KV('href', 'Special:BookSources/' + isbncode),
	        new KV('mw:content', tu.flattenString(['ISBN', sp, isbn])),
	        new KV('typeof', 'mw:WikiLink/ISBN'),
	     ],
	     { stx: "magiclink", tsr: tsrOffsets() }),
	   ];
	*/
}

func (p *parser) callonisbn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onisbn1()
}

func (c *current) onurl_protocol3() (bool, error) {
	return false, nil /* return Util.isProtocolValid(input.substr(endOffset()), env); */
}

func (p *parser) callonurl_protocol3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl_protocol3()
}

func (c *current) onurl_protocol1() (interface{}, error) {
	return nil, nil /* return p;*/
}

func (p *parser) callonurl_protocol1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl_protocol1()
}

func (c *current) onurl12(c1 interface{}) (interface{}, error) {
	return c1, nil /*return c; */
}

func (p *parser) callonurl12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl12(stack["c1"])
}

func (c *current) onurl18(s interface{}) (interface{}, error) {
	return s, nil /* return s; */
}

func (p *parser) callonurl18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl18(stack["s"])
}

func (c *current) onurl38(he interface{}) (interface{}, error) {
	return he, nil /* return he; */
}

func (p *parser) callonurl38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl38(stack["he"])
}

func (c *current) onurl23(r interface{}) (interface{}, error) {
	return r, nil /*return r;*/
}

func (p *parser) callonurl23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl23(stack["r"])
}

func (c *current) onurl45(proto, addr, path interface{}) (bool, error) {
	return false, nil /*return addr.length > 0 || path.length > 0;*/
}

func (p *parser) callonurl45() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl45(stack["proto"], stack["addr"], stack["path"])
}

func (c *current) onurl1(proto, addr, path interface{}) (interface{}, error) {
	return []interface{}{proto, addr, path}, nil
	/*
	   return tu.flattenString([proto, addr].concat(path));
	*/
}

func (p *parser) callonurl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurl1(stack["proto"], stack["addr"], stack["path"])
}

func (c *current) onautourl4() (bool, error) {
	return true, nil /*return stops.push('autourl', { sawLParen: false }); */
}

func (p *parser) callonautourl4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl4()
}

func (c *current) onautourl15(c1 interface{}) (interface{}, error) {
	return c1, nil /* return c; */
}

func (p *parser) callonautourl15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl15(stack["c1"])
}

func (c *current) onautourl23() (interface{}, error) {
	return "(", nil /* stops.onStack('autourl').sawLParen = true; return "("; */
}

func (p *parser) callonautourl23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl23()
}

func (c *current) onautourl37() (bool, error) {
	return false, nil /* return /^[<>\u00A0]$/.test(rhe); */
}

func (p *parser) callonautourl37() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl37()
}

func (c *current) onautourl40(he interface{}) (interface{}, error) {
	return he, nil /* return he; */
}

func (p *parser) callonautourl40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl40(stack["he"])
}

func (c *current) onautourl32(r interface{}) (interface{}, error) {
	return r, nil /* return r; */
}

func (p *parser) callonautourl32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl32(stack["r"])
}

func (c *current) onautourl7() (interface{}, error) {
	return "TODO: autourl", nil
	/*
	   // as in Parser.php::makeFreeExternalLink, we're going to
	   // yank trailing punctuation out of this match.
	       var url = tu.flattenStringlist([proto, addr].concat(path));
	   // only need to look at last element; HTML entities are strip-proof.
	       var last = lastItem(url);
	       var trim = 0;
	       if (last && last.constructor === String) {
	         var strip = ',;\\.:!?';
	         if (!stops.onStack('autourl').sawLParen) {
	           strip += ')';
	         }
	         strip = new RegExp('[' + JSUtils.escapeRegExp(strip) + ']*$');
	         trim = strip.exec(last)[0].length;
	         url[url.length - 1] = last.slice(0, last.length - trim);
	       }
	       url = tu.flattenStringlist(url);
	       if (url.length === 1 && url[0].constructor === String && url[0].length <= proto.length) {
	         return null; // ensure we haven't stripped everything: T106945
	       }
	       peg$currPos -= trim;
	       stops.pop('autourl');
	       return url;
	*/
}

func (p *parser) callonautourl7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl7()
}

func (c *current) onautourl47() (bool, error) {
	return false, nil /* return r !== null; */
}

func (p *parser) callonautourl47() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl47()
}

func (c *current) onautourl2() (interface{}, error) {
	return nil, nil /*return r; */
}

func (p *parser) callonautourl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl2()
}

func (c *current) onautourl48() (bool, error) {
	return false, nil /*return stops.pop('autourl');*/
}

func (p *parser) callonautourl48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onautourl48()
}

func (c *current) ontplarg_or_template1(t interface{}) (interface{}, error) {
	return t, nil /*return t;*/
}

func (p *parser) callontplarg_or_template1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template1(stack["t"])
}

func (c *current) ontplarg_or_template_guarded3() error {
	inc(c, "templatedepth")
	return nil /* return stops.inc('templatedepth');*/
}

func (p *parser) callontplarg_or_template_guarded3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded3()
}

func (c *current) ontplarg_or_template_guarded6(a interface{}) (interface{}, error) {
	return a, nil /*return a;*/
}

func (p *parser) callontplarg_or_template_guarded6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded6(stack["a"])
}

func (c *current) ontplarg_or_template_guarded22(a, b interface{}) (interface{}, error) {
	return concat(a, b), nil /*return [a].concat(b);*/
}

func (p *parser) callontplarg_or_template_guarded22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded22(stack["a"], stack["b"])
}

func (c *current) ontplarg_or_template_guarded36(a, b interface{}) (interface{}, error) {
	return concat(a, b), nil /*return [a].concat(b);*/
}

func (p *parser) callontplarg_or_template_guarded36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded36(stack["a"], stack["b"])
}

func (c *current) ontplarg_or_template_guarded49(a interface{}) (interface{}, error) {
	return a, nil /*return a;*/
}

func (p *parser) callontplarg_or_template_guarded49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded49(stack["a"])
}

func (c *current) ontplarg_or_template_guarded52(r interface{}) error {
	dec(c, "templatedepth")
	return nil

}

func (p *parser) callontplarg_or_template_guarded52() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded52(stack["r"])
}

func (c *current) ontplarg_or_template_guarded1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   stops.dec('templatedepth');
	   return r;
	*/

}

func (p *parser) callontplarg_or_template_guarded1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_or_template_guarded1(stack["r"])
}

func (c *current) ontemplate3() error {
	push(c, "level", push(c, "preproc" /*{{*/, "}}"))
	return nil
	/* return stops.push('preproc', / * {{ * /"}}"); */

}

func (p *parser) callontemplate3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate3()
}

func (c *current) ontemplate6(t interface{}) error {
	popTo(c, "preproc", pop(c, "level").(int))
	return nil

}

func (p *parser) callontemplate6() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate6(stack["t"])
}

func (c *current) ontemplate1(t interface{}) (interface{}, error) {
	return nil, nil /* stops.popTo('preproc', stopLen); return t; */
}

func (p *parser) callontemplate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate1(stack["t"])
}

func (c *current) onbroken_template5() error {
	push(c, "preproc", "broken")
	return nil /* return stops.push('preproc', 'broken'); */
}

func (p *parser) callonbroken_template5() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_template5()
}

func (c *current) onbroken_template8(t interface{}) error {
	pop(c, "preproc")
	return nil
}

func (p *parser) callonbroken_template8() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_template8(stack["t"])
}

func (c *current) onbroken_template1(t interface{}) (interface{}, error) {
	return t, nil /* return t; */
}

func (p *parser) callonbroken_template1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_template1(stack["t"])
}

func (c *current) ontemplate_preproc7() (bool, error) {
	log.Println("template_preproc", c.text)
	return true, nil
}

func (p *parser) callontemplate_preproc7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_preproc7()
}

func (c *current) ontemplate_preproc10(target interface{}) (bool, error) {
	log.Println("template_param_value", concat(c.text))
	spew.Dump(target)
	return true, nil
}

func (p *parser) callontemplate_preproc10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_preproc10(stack["target"])
}

func (c *current) ontemplate_preproc19(v interface{}) (interface{}, error) {
	return v, nil /* return new KV('', tu.flattenIfArray(v), [p0, p0, p0,
	   p]);*/

}

func (p *parser) callontemplate_preproc19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_preproc19(stack["v"])
}

func (c *current) ontemplate_preproc12(r interface{}) (interface{}, error) {
	return r, nil /* return r; */
}

func (p *parser) callontemplate_preproc12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_preproc12(stack["r"])
}

func (c *current) ontemplate_preproc31(target interface{}) (bool, error) {
	log.Println("nl_comment_space")
	return true, nil
}

func (p *parser) callontemplate_preproc31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_preproc31(stack["target"])
}

func (c *current) ontemplate_preproc2(target interface{}) (interface{}, error) {
	return target, nil
	/*
		// Insert target as first positional attribute, so that it can be
		// generically expanded. The TemplateHandler then needs to shift it out
		// again.
		      params.unshift(new KV(tu.flattenIfArray(target.tokens), '', target.srcOffsets));
		      var obj = new SelfclosingTagTk('template', params, { tsr: tsrOffsets(), src: text() });
		      return obj;
	*/

}

func (p *parser) callontemplate_preproc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_preproc2(stack["target"])
}

func (c *current) ontplarg5() (bool, error) {
	return false, nil /*return stops.popTo('preproc', stopLen); */
}

func (p *parser) callontplarg5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg5()
}

func (c *current) ontplarg1(t interface{}) (interface{}, error) {
	return t, nil /* stops.popTo('preproc', stopLen); return t; */
}

func (p *parser) callontplarg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg1(stack["t"])
}

func (c *current) ontplarg_preproc17() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontplarg_preproc17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_preproc17()
}

func (c *current) ontplarg_preproc21() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontplarg_preproc21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_preproc21()
}

func (c *current) ontplarg_preproc15() (interface{}, error) {
	return nil, nil /* return {return nil, nil tokens: v, srcOffsets: [p0, p1] }; */
}

func (p *parser) callontplarg_preproc15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_preproc15()
}

func (c *current) ontplarg_preproc9() (interface{}, error) {
	return nil, nil /* return r; */
}

func (p *parser) callontplarg_preproc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_preproc9()
}

func (c *current) ontplarg_preproc1(target, params interface{}) (interface{}, error) {
	return concat(target, params), nil
	/*
		      params = params.map(function(o) {
		        var s = o.srcOffsets;
		        return new KV('', tu.flattenIfArray(o.tokens), [s[0], s[0], s[0], s[1]]);
		      });
		      if (target === null) { target = { tokens: '', srcOffsets: [p, p, p, p] }; }
		// Insert target as first positional attribute, so that it can be
		// generically expanded. The TemplateHandler then needs to shift it out
		// again.
		      params.unshift(new KV(tu.flattenIfArray(target.tokens), '', target.srcOffsets));
		      var obj = new SelfclosingTagTk('templatearg', params, { tsr: tsrOffsets(), src: text() });
		      return obj;
	*/

}

func (p *parser) callontplarg_preproc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontplarg_preproc1(stack["target"], stack["params"])
}

func (c *current) ontemplate_param7(tpv interface{}) (interface{}, error) {
	return tpv, nil
	/*
	   return { kEndPos: kEndPos, vStartPos: vStartPos, value: (tpv && tpv.tokens) || [] };
	*/

}

func (p *parser) callontemplate_param7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param7(stack["tpv"])
}

func (c *current) ontemplate_param2(val interface{}) (interface{}, error) {
	return val, nil
	/*
	   if (val !== null) {
	       if (val.value !== null) {
	         return new KV(name, tu.flattenIfArray(val.value), [startOffset(), val.kEndPos, val.vStartPos, endOffset()]);
	       } else {
	         return new KV(tu.flattenIfArray(name), '', [startOffset(), val.kEndPos, val.vStartPos, endOffset()]);
	       }
	   } else {
	     return new KV('', tu.flattenIfArray(name), [startOffset(), startOffset(), startOffset(), endOffset()]);
	   }
	*/

}

func (p *parser) callontemplate_param2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param2(stack["val"])
}

func (c *current) ontemplate_param15() (interface{}, error) {
	return nil, nil
	/*
	   return new KV('', '', [startOffset(), startOffset(), startOffset(), endOffset()]);
	*/

}

func (p *parser) callontemplate_param15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param15()
}

func (c *current) ontemplate_param_name4() (bool, error) {
	push(c, "equal", true)
	return true, nil /*return stops.push('equal', true); */
}

func (p *parser) callontemplate_param_name4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_name4()
}

func (c *current) ontemplate_param_name8() (interface{}, error) {
	return "", nil /* return ''; */
}

func (p *parser) callontemplate_param_name8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_name8()
}

func (c *current) ontemplate_param_name2(tpt interface{}) (interface{}, error) {
	pop(c, "equal")
	return tpt, nil
	/*
	   stops.pop('equal');
	   return tpt;
	*/

}

func (p *parser) callontemplate_param_name2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_name2(stack["tpt"])
}

func (c *current) ontemplate_param_name11() (bool, error) {
	pop(c, "equal")
	return false, nil
	/* return stops.pop('equal'); */

}

func (p *parser) callontemplate_param_name11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_name11()
}

func (c *current) ontemplate_param_value3() error {
	push(c, "equal", false)
	return nil
}

func (p *parser) callontemplate_param_value3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_value3()
}

func (c *current) ontemplate_param_value6(tpt interface{}) error {
	pop(c, "equal")
	return nil
}

func (p *parser) callontemplate_param_value6() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_value6(stack["tpt"])
}

func (c *current) ontemplate_param_value1(tpt interface{}) (interface{}, error) {
	return tpt, nil
	/*
	   stops.pop('equal');
	   return { tokens: tpt, srcOffsets: tsrOffsets() };
	*/

}

func (p *parser) callontemplate_param_value1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_value1(stack["tpt"])
}

func (c *current) ontemplate_param_text3() error {
	push(c, "table", false)
	push(c, "extlink", false)
	push(c, "templateArg", true)
	push(c, "tableCellArg", false)
	inc(c, "template")
	return nil
	/*
	  // re-enable tables within template parameters
	        stops.push('table', false);
	        stops.push('extlink', false);
	        stops.push('templateArg', true);
	        stops.push('tableCellArg', false);
	        return stops.inc('template');
	*/

}

func (p *parser) callontemplate_param_text3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_text3()
}

func (c *current) ontemplate_param_text9(il interface{}) error {
	pop(c, "table")
	pop(c, "extlink")
	pop(c, "templateArg")
	pop(c, "tableCellArg")
	dec(c, "template")
	return nil

}

func (p *parser) callontemplate_param_text9() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_text9(stack["il"])
}

func (c *current) ontemplate_param_text1(il interface{}) (interface{}, error) {
	return il, nil
	/*
		        stops.pop('table');
		        stops.pop('extlink');
		        stops.pop('templateArg');
		        stops.pop('tableCellArg');
		        stops.dec('template');
		// il is guaranteed to be an array -- so, tu.flattenIfArray will
		// always return an array
		        var r = tu.flattenIfArray(il);
		        if (r.length === 1 && r[0].constructor === String) {
		            r = r[0];
		        }
		        return r;
	*/

}

func (p *parser) callontemplate_param_text1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_param_text1(stack["il"])
}

func (c *current) onlang_variant_or_tpl2(a interface{}) (interface{}, error) {
	return a, nil /* return a; */
}

func (p *parser) callonlang_variant_or_tpl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_or_tpl2(stack["a"])
}

func (c *current) onlang_variant_or_tpl16(a, b interface{}) (interface{}, error) {
	return concat(a, b), nil /*return [a].concat(b);*/
}

func (p *parser) callonlang_variant_or_tpl16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_or_tpl16(stack["a"], stack["b"])
}

func (c *current) onlang_variant_or_tpl29(a, b interface{}) (interface{}, error) {
	return concat(a, b), nil /* return [a].concat(b); */
}

func (p *parser) callonlang_variant_or_tpl29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_or_tpl29(stack["a"], stack["b"])
}

func (c *current) onlang_variant_or_tpl43(a interface{}) (interface{}, error) {
	return a, nil /*return a; */
}

func (p *parser) callonlang_variant_or_tpl43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_or_tpl43(stack["a"])
}

func (c *current) onbroken_lang_variant3() (bool, error) {
	return true, nil /*return stops.push('preproc', 'broken'); */
}

func (p *parser) callonbroken_lang_variant3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_lang_variant3()
}

func (c *current) onbroken_lang_variant1(r interface{}) (interface{}, error) {
	return r, nil /*return r; */
}

func (p *parser) callonbroken_lang_variant1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_lang_variant1(stack["r"])
}

func (c *current) onlang_variant4() (interface{}, error) {
	return nil, nil /*return stops.push('preproc', /* -{ * / '}-'); */
}

func (p *parser) callonlang_variant4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant4()
}

func (c *current) onlang_variant9() (bool, error) {
	return false, nil /*return stops.popTo('preproc', stopLen); */
}

func (p *parser) callonlang_variant9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant9()
}

func (c *current) onlang_variant2(lv interface{}) (interface{}, error) {
	return lv, nil /*stops.popTo('preproc', stopLen); return lv; */
}

func (p *parser) callonlang_variant2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant2(stack["lv"])
}

func (c *current) onlang_variant_preproc3() (interface{}, error) {
	return nil, nil /* return startOffset(); */
}

func (p *parser) callonlang_variant_preproc3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc3()
}

func (c *current) onlang_variant_preproc8() (bool, error) {
	return false, nil /* return env.langConverterEnabled(); */
}

func (p *parser) callonlang_variant_preproc8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc8()
}

func (c *current) onlang_variant_preproc6(ff interface{}) (interface{}, error) {
	return ff, nil
	/*
		// Avoid mutating cached expression results
		         ff = Util.clone(ff, true);
		// if flags contains 'R', then don't treat ; or : specially inside.
		         if (ff.flags) {
		           ff.raw = ff.flags.has('R') || ff.flags.has('N');
		         } else if (ff.variants) {
		           ff.raw = true;
		         }
		         return ff;
	*/

}

func (p *parser) callonlang_variant_preproc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc6(stack["ff"])
}

func (c *current) onlang_variant_preproc13() (bool, error) {
	return false, nil /*return !env.langConverterEnabled(); */
}

func (p *parser) callonlang_variant_preproc13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc13()
}

func (c *current) onlang_variant_preproc11() (interface{}, error) {
	return nil, nil
	/*
		// if language converter not enabled, don't try to parse inside.
		         return { raw: true };
	*/

}

func (p *parser) callonlang_variant_preproc11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc11()
}

func (c *current) onlang_variant_preproc18() (bool, error) {
	return false, nil /*return f.raw; */
}

func (p *parser) callonlang_variant_preproc18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc18()
}

func (c *current) onlang_variant_preproc16(lv interface{}) (interface{}, error) {
	return lv, nil /* return [{ text: lv }]; */
}

func (p *parser) callonlang_variant_preproc16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc16(stack["lv"])
}

func (c *current) onlang_variant_preproc23() (bool, error) {
	return false, nil /* return !f.raw; */
}

func (p *parser) callonlang_variant_preproc23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc23()
}

func (c *current) onlang_variant_preproc21(lv interface{}) (interface{}, error) {
	return lv, nil /* return lv; */
}

func (p *parser) callonlang_variant_preproc21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc21(stack["lv"])
}

func (c *current) onlang_variant_preproc27() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callonlang_variant_preproc27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc27()
}

func (c *current) onlang_variant_preproc1() (interface{}, error) {
	return "TODO lang_variant_preproc", nil
	/*

		      if (!env.langConverterEnabled()) {
		        return [ "-{", ts[0].text.tokens, "}-" ];
		      }
		      var lvsrc = input.substring(lv0, lv1);
		      var attribs = [];

		// Do a deep clone since we may be destructively modifying
		// (the `t[fld] = name;` below) the result of a cached expression
		      ts = Util.clone(ts, true);

		      ts.forEach(function(t) {
		// move token strings into KV attributes so that they are
		// properly expanded by early stages of the token pipeline
		        ['text','from','to'].forEach(function(fld) {
		          if (t[fld] === undefined) { return; }
		          var name = 'mw:lv' + attribs.length;
		          attribs.push(new KV(name, t[fld].tokens, t[fld].srcOffsets));
		          t[fld] = name;
		        });
		      });
		      return [
		        new SelfclosingTagTk(
		          'language-variant',
		           attribs,
		           {return nil, nil
		             tsr: [lv0, lv1],
		             src: lvsrc,
		             flags: f.flags && Array.from(f.flags).sort(),
		             variants: f.variants && Array.from(f.variants).sort(),
		             original: f.original,
		             flagSp: f.sp,
		             texts: ts,
		           }),
		      ];
	*/

}

func (p *parser) callonlang_variant_preproc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_preproc1()
}

func (c *current) onopt_lang_variant_flags4(ff interface{}) (interface{}, error) {
	return ff, nil /* return ff; */
}

func (p *parser) callonopt_lang_variant_flags4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopt_lang_variant_flags4(stack["ff"])
}

func (c *current) onopt_lang_variant_flags1(f interface{}) (interface{}, error) {
	return f, nil
	/*
		// Collect & separate flags and variants into a set and ordered list
		    var flags = new Set();
		    var variants = new Set();
		    var flagList = [];
		    var flagSpace = [];
		    var variantList = [];
		    var variantSpace = [];
		    var useVariants = false;
		    var internalSp = []; // internal whitespace, for round-tripping
		    if (f !== null) {
		// lang_variant_flags returns arrays in reverse order.
		      f.flags.reverse();
		      f.sp.reverse();
		      var spPtr = 0;
		      f.flags.forEach(function(item) {
		        if (item.flag) {
		          flagSpace.push(f.sp[spPtr++]);
		          flags.add(item.flag);
		          flagList.push(item.flag);
		          flagSpace.push(f.sp[spPtr++]);
		        }
		        if (item.variant) {
		          variantSpace.push(f.sp[spPtr++]);
		          variants.add(item.variant);
		          variantList.push(item.variant);
		          variantSpace.push(f.sp[spPtr++]);
		        }
		      });
		      if (spPtr < f.sp.length) {
		// handle space after a trailing semicolon
		        flagSpace.push(f.sp[spPtr]);
		        variantSpace.push(f.sp[spPtr]);
		      }
		    }
		// Parse flags (this logic is from core/languages/ConverterRule.php
		// in the parseFlags() function)
		    if (flags.size === 0 && variants.size === 0) {
		      flags.add('$S');
		    } else if (flags.has('R')) {
		      flags = new Set(['R']); // remove other flags
		    } else if (flags.has('N')) {
		      flags = new Set(['N']); // remove other flags
		    } else if (flags.has('-')) {
		      flags = new Set(['-']); // remove other flags
		    } else if (flags.has('T') && flags.size === 1) {
		      flags.add('H');
		    } else if (flags.has('H')) {
		// Replace A flag, and remove other flags except T and D
		      var nf = new Set(['$+', 'H']);
		      if (flags.has('T')) { nf.add('T'); }
		      if (flags.has('D')) { nf.add('D'); }
		      flags = nf;
		    } else if (variants.size > 0) {
		      useVariants = true;
		    } else {
		      if (flags.has('A')) {
		        flags.add('$+');
		        flags.add('$S');
		      }
		      if (flags.has('D')) {
		        flags.delete('$S');
		      }
		    }
		    if (useVariants) {
		      return { variants: variants, original: variantList, sp: variantSpace };
		    } else {
		      return { flags: flags, original: flagList, sp: flagSpace };
		    }
	*/

}

func (p *parser) callonopt_lang_variant_flags1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopt_lang_variant_flags1(stack["f"])
}

func (c *current) onlang_variant_flags2() (interface{}, error) {
	return nil, nil
	/*
		    var r = more && more[1] ? more[1] : { sp: [], flags: [] };
		// Note that sp and flags are in reverse order, since we're using
		// right recursion and want to push instead of unshift.
		    r.sp.push(sp2.join(''));
		    r.sp.push(sp1.join(''));
		    r.flags.push(f);
		    return r;
	*/

}

func (p *parser) callonlang_variant_flags2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_flags2()
}

func (c *current) onlang_variant_flags14() (interface{}, error) {
	return nil, nil
	/*
	   return { sp: [ sp.join('') ], flags: [] };
	*/

}

func (p *parser) callonlang_variant_flags14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_flags14()
}

func (c *current) onlang_variant_flag2() (interface{}, error) {
	return nil, nil /*return { flag: f }; */
}

func (p *parser) callonlang_variant_flag2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_flag2()
}

func (c *current) onlang_variant_flag4() (interface{}, error) {
	return nil, nil /* return { variant: v }; */
}

func (p *parser) callonlang_variant_flag4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_flag4()
}

func (c *current) onlang_variant_flag6() (interface{}, error) {
	return nil, nil /* return { bogus: b.join('') }; /*
	bad flag * /*/
}

func (p *parser) callonlang_variant_flag6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_flag6()
}

func (c *current) onlang_variant_name2() (interface{}, error) {
	return nil, nil /* return h + t.join(''); */
}

func (p *parser) callonlang_variant_name2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_name2()
}

func (c *current) onlang_variant_option_list6() (interface{}, error) {
	return nil, nil /* return oo; */
}

func (p *parser) callonlang_variant_option_list6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_option_list6()
}

func (c *current) onlang_variant_option_list2() (interface{}, error) {
	return nil, nil
	/*
	   var r = [ o ].concat(rest);
	   if (tr) { r.push({ semi: true, sp: tr[1].join('') }); }
	   return r;
	*/

}

func (p *parser) callonlang_variant_option_list2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_option_list2()
}

func (c *current) onlang_variant_option_list15() (interface{}, error) {
	return nil, nil /* return [{ text: lvtext }]; */
}

func (p *parser) callonlang_variant_option_list15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_option_list15()
}

func (c *current) onlang_variant_option2() (interface{}, error) {
	return nil, nil
	/*
	   return {
	     twoway: true,
	     lang: lang,
	     text: lvtext,
	     sp: [sp1.join(''), sp2.join(''), sp3.join('')]
	   };
	*/

}

func (p *parser) callonlang_variant_option2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_option2()
}

func (c *current) onlang_variant_option15() (interface{}, error) {
	return nil, nil
	/*
	   return {
	     oneway: true,
	     from: from,
	     lang: lang,
	     to: to,
	     sp: [sp1.join(''), sp2.join(''), sp3.join(''), sp4.join('')]
	   };
	*/

}

func (p *parser) callonlang_variant_option15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_option15()
}

func (c *current) onlang_variant_nowiki3() (interface{}, error) {
	return nil, nil /*return startOffset();*/
}

func (p *parser) callonlang_variant_nowiki3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_nowiki3()
}

func (c *current) onlang_variant_nowiki6() (interface{}, error) {
	return nil, nil /* return endOffset();*/
}

func (p *parser) callonlang_variant_nowiki6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_nowiki6()
}

func (c *current) onlang_variant_nowiki1() (interface{}, error) {
	return nil, nil
	/*
	  return { tokens: [ n ], srcOffsets: [start, end] };
	*/
}

func (p *parser) callonlang_variant_nowiki1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_nowiki1()
}

func (c *current) onlang_variant_text3() (interface{}, error) {
	return nil, nil /*return startOffset();*/
}

func (p *parser) callonlang_variant_text3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text3()
}

func (c *current) onlang_variant_text9() (interface{}, error) {
	return nil, nil /*return endOffset();*/
}

func (p *parser) callonlang_variant_text9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text9()
}

func (c *current) onlang_variant_text1() (interface{}, error) {
	return nil, nil /* return { tokens: tokens || [], srcOffsets: [start, end] }; */
}

func (p *parser) callonlang_variant_text1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text1()
}

func (c *current) onlang_variant_text_no_semi4() (bool, error) {
	return false, nil /* return stops.push('semicolon', true); */
}

func (p *parser) callonlang_variant_text_no_semi4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text_no_semi4()
}

func (c *current) onlang_variant_text_no_semi2() (interface{}, error) {
	return nil, nil /* stops.pop('semicolon'); return lvtext; */
}

func (p *parser) callonlang_variant_text_no_semi2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text_no_semi2()
}

func (c *current) onlang_variant_text_no_semi6() (bool, error) {
	return false, nil /* return stops.pop('semicolon'); */
}

func (p *parser) callonlang_variant_text_no_semi6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text_no_semi6()
}

func (c *current) onlang_variant_text_no_semi_or_arrow4() (bool, error) {
	return false, nil /* return stops.push('arrow', true); */
}

func (p *parser) callonlang_variant_text_no_semi_or_arrow4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text_no_semi_or_arrow4()
}

func (c *current) onlang_variant_text_no_semi_or_arrow2() (interface{}, error) {
	return nil, nil /* stops.pop('arrow'); return lvtext; */
}

func (p *parser) callonlang_variant_text_no_semi_or_arrow2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text_no_semi_or_arrow2()
}

func (c *current) onlang_variant_text_no_semi_or_arrow6() (bool, error) {
	return false, nil /* return stops.pop('arrow'); */
}

func (p *parser) callonlang_variant_text_no_semi_or_arrow6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlang_variant_text_no_semi_or_arrow6()
}

func (c *current) onwikilink_content2(lt interface{}) (interface{}, error) {
	return lt, nil
	/*
	   var maybeContent = new KV('mw:maybeContent', lt, [startPos, endOffset()]);
	   maybeContent.vsrc = input.substring(startPos, endOffset());
	   return maybeContent;
	*/

}

func (p *parser) callonwikilink_content2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_content2(stack["lt"])
}

func (c *current) onbroken_wikilink5() error {
	push(c, "preproc", "broken")
	return nil
	/* return stops.push('preproc', 'broken'); */

}

func (p *parser) callonbroken_wikilink5() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_wikilink5()
}

func (c *current) onbroken_wikilink12(a interface{}) error {
	pop(c, "preproc")
	return nil
}

func (p *parser) callonbroken_wikilink12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_wikilink12(stack["a"])
}

func (c *current) onbroken_wikilink1(a interface{}) (interface{}, error) {
	return a, nil
	/* return a; */

}

func (p *parser) callonbroken_wikilink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_wikilink1(stack["a"])
}

func (c *current) onwikilink_preproc4() error {
	push(c, "preproc", "]]")
	return nil
}

func (p *parser) callonwikilink_preproc4() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_preproc4()
}

func (c *current) onwikilink_preproc8(target interface{}) (bool, error) {
	log.Printf("wikilink_preproc %#v", target)
	return true, nil
}

func (p *parser) callonwikilink_preproc8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_preproc8(stack["target"])
}

func (c *current) onwikilink_preproc11(target, lcs interface{}) (bool, error) {
	log.Printf("wikilink_content %#v %s", lcs, c.text)
	spew.Dump(target)
	return true, nil
}

func (p *parser) callonwikilink_preproc11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_preproc11(stack["target"], stack["lcs"])
}

func (c *current) onwikilink_preproc14(target, lcs interface{}) error {
	pop(c, "preproc")
	return nil
}

func (p *parser) callonwikilink_preproc14() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_preproc14(stack["target"], stack["lcs"])
}

func (c *current) onwikilink_preproc1(target, lcs interface{}) (interface{}, error) {
	targetStr := concat(target)
	n := &html.Node{
		Type: html.ElementNode,
		Data: "a",
		Attr: []html.Attribute{
			{Key: "href", Val: targetStr},
		},
	}
	log.Println(lcs)
	if !addChild(n, lcs) {
		addChild(n, targetStr)
	}
	return n, nil
	/*
		      var pipeTrick = (lcs.length === 1 && lcs[0].v === null);
		      var textTokens = [];
		      if (target === null || pipeTrick) {
		        textTokens.push("[[");
		        if (target) {
		          textTokens.push(target);
		        }
		        lcs.forEach(function(a) {
		// a is a mw:maybeContent attribute
		          textTokens.push("|");
		          if (a.v !== null) { textTokens.push(a.v); }
		        });
		        textTokens.push("]]");
		        return textTokens;
		      }
		      var obj = new SelfclosingTagTk('wikilink');
		      var hrefKV = new KV('href', target);
		      hrefKV.vsrc = input.substring(startOffset() + 2, tpos);
		// XXX: Point to object with path, revision and input information
		// obj.source = input;
		      obj.attribs.push(hrefKV);
		      obj.attribs = obj.attribs.concat(lcs);
		      obj.dataAttribs = {
		          tsr: tsrOffsets(),
		          src: text(),
		      };
		      return [obj];
	*/

}

func (p *parser) callonwikilink_preproc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_preproc1(stack["target"], stack["lcs"])
}

func (c *current) onlink_text3() error {
	// Suppress the flag temporarily in this rule to consume the '=' here.
	push(c, "equal", false)
	push(c, "linkdesc", true)
	return nil

}

func (p *parser) callonlink_text3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlink_text3()
}

func (c *current) onlink_text14(r interface{}) (interface{}, error) {
	return r, nil
}

func (p *parser) callonlink_text14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlink_text14(stack["r"])
}

func (c *current) onlink_text32(c1 interface{}) error {
	pop(c, "equal")
	pop(c, "linkdesc")
	return nil

}

func (p *parser) callonlink_text32() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlink_text32(stack["c1"])
}

func (c *current) onlink_text1(c1 interface{}) (interface{}, error) {
	return c1, nil

}

func (p *parser) callonlink_text1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlink_text1(stack["c1"])
}

func (c *current) onquote1() (interface{}, error) {
	return nil, nil
	/*
	   // sequences of four or more than five quotes are assumed to start
	   // with some number of plain-text apostrophes.
	       var plainticks = 0;
	       var result = [];
	       if (quotes.length === 4) {
	           plainticks = 1;
	       } else if (quotes.length > 5) {
	           plainticks = quotes.length - 5;
	       }
	       if (plainticks > 0) {
	           result.push(quotes.substring(0, plainticks));
	       }
	   // mw-quote token Will be consumed in token transforms
	       var tsr = tsrOffsets();
	       tsr[0] += plainticks;
	       var mwq = new SelfclosingTagTk('mw-quote', [], { tsr: tsr });
	       mwq.value = quotes.substring(plainticks);
	       result.push(mwq);
	       return result;
	*/
}

func (p *parser) callonquote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquote1()
}

func (c *current) onextension_tag3() (bool, error) {
	return false, nil /*return !stops.onStack('extTag'); */
}

func (p *parser) callonextension_tag3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextension_tag3()
}

func (c *current) onextension_tag5() (bool, error) {
	return false, nil /* return extToken.name === 'extension'; */
}

func (p *parser) callonextension_tag5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextension_tag5()
}

func (c *current) onextension_tag1() (interface{}, error) {
	return nil, nil /* return extToken; */
}

func (p *parser) callonextension_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextension_tag1()
}

func (c *current) onnowiki4() (bool, error) {
	return false, nil /* return extToken.getAttribute('name') === 'nowiki'; */
}

func (p *parser) callonnowiki4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnowiki4()
}

func (c *current) onnowiki1() (interface{}, error) {
	return nil, nil /* return extToken; */
}

func (p *parser) callonnowiki1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnowiki1()
}

func (c *current) onnowiki_content1(c2 interface{}) (interface{}, error) {
	return c2, nil /* return tu.flattenIfArray(c); */
}

func (p *parser) callonnowiki_content1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnowiki_content1(stack["c2"])
}

func (c *current) onnowiki_text1() (interface{}, error) {
	return nil, nil
	/*
	   var txt = Util.getExtArgInfo(extToken).dict.body.extsrc;
	   return Util.decodeEntities(txt);
	*/

}

func (p *parser) callonnowiki_text1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnowiki_text1()
}

func (c *current) onxmlish_tag4() (bool, error) {
	return false, nil
}

func (p *parser) callonxmlish_tag4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onxmlish_tag4()
}

func (c *current) onxmlish_tag10() (bool, error) {
	return false, nil
}

func (p *parser) callonxmlish_tag10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onxmlish_tag10()
}

func (c *current) onxmlish_tag2() (interface{}, error) {
	return nil, nil
	/*
		        stops.pop('table');
		        stops.pop('tableCellArg');
		        stops.pop('extTag');

		        var lcName = name.toLowerCase();

		// Extension tags don't necessarily have the same semantics as html tags,
		// so don't treat them as void elements.
		        var isVoidElt = Util.isVoidElement(lcName) && !env.conf.wiki.extensionTags.has(lcName);

		// Support </br>
		        if (lcName === 'br' && end) {
		            end = null;
		        }

		        var res = tu.buildXMLTag(name, lcName, attribs, end, !!selfclose || isVoidElt, tsrOffsets());

		// change up data-attribs in one scenario
		// void-elts that aren't self-closed ==> useful for accurate RT-ing
		        if (!selfclose && isVoidElt) {
		            res.dataAttribs.selfClose = undefined;
		            res.dataAttribs.noClose = true;
		        }

		        return maybeExtensionTag(res);
	*/

}

func (p *parser) callonxmlish_tag2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onxmlish_tag2()
}

func (c *current) onxmlish_tag24() (bool, error) {
	return false, nil /* return stops.pop('extTag'); */
}

func (p *parser) callonxmlish_tag24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onxmlish_tag24()
}

func (c *current) onxmlish_tag25() (bool, error) {
	return false, nil /* stops.pop('table'); return stops.pop('tableCellArg'); */
}

func (p *parser) callonxmlish_tag25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onxmlish_tag25()
}

func (c *current) onblock_tag4() (bool, error) {
	// By the time we get to `doTableStuff` in the php parser, we've already
	// safely encoded element attributes. See 55313f4e in core.
	push(c, "table", false)
	push(c, "tableCellArg", false)
	return true, nil

}

func (p *parser) callonblock_tag4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_tag4()
}

func (c *current) onblock_tag10() (bool, error) {
	push(c, "extTag", false)
	return false, nil

}

func (p *parser) callonblock_tag10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_tag10()
}

func (c *current) onblock_tag2() (interface{}, error) {
	pop(c, "table")
	pop(c, "tableCellArg")
	pop(c, "extTag")
	return nil, nil
	/*
	   stops.pop('table');
	   stops.pop('tableCellArg');
	   stops.pop('extTag');
	   var t = tu.buildXMLTag(name, name.toLowerCase(), attribs, end, !!selfclose, tsrOffsets());
	   return [maybeExtensionTag(t)];
	*/

}

func (p *parser) callonblock_tag2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_tag2()
}

func (c *current) onblock_tag22() (bool, error) {
	pop(c, "extTag")
	return false, nil

}

func (p *parser) callonblock_tag22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_tag22()
}

func (c *current) onblock_tag23() (bool, error) {
	pop(c, "table")
	pop(c, "tableCellArg")
	return false, nil

}

func (p *parser) callonblock_tag23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock_tag23()
}

func (c *current) ongeneric_newline_attribute5() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callongeneric_newline_attribute5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_newline_attribute5()
}

func (c *current) ongeneric_newline_attribute8() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callongeneric_newline_attribute8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_newline_attribute8()
}

func (c *current) ongeneric_newline_attribute11() (interface{}, error) {
	return nil, nil /* return v; */
}

func (p *parser) callongeneric_newline_attribute11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_newline_attribute11()
}

func (c *current) ongeneric_newline_attribute1() (interface{}, error) {
	return nil, nil
	/*
	   // NB: Keep in sync w/ table_attibute
	       var res;
	   // Encapsulate protected attributes.
	       if (typeof name === 'string') {return nil, nil
	           name = tu.protectAttrs(name);
	       }
	       if (vd !== null) {
	           res = new KV(name, vd.value, [namePos0, namePos, vd.srcOffsets[0], vd.srcOffsets[1]]);
	           res.vsrc = input.substring(vd.srcOffsets[0], vd.srcOffsets[1]);
	       } else {
	           res = new KV(name, '', [namePos0, namePos, namePos, namePos]);
	       }
	       if (Array.isArray(name)) {
	           res.ksrc = input.substring(namePos0, namePos);
	       }
	       return res;
	*/
}

func (p *parser) callongeneric_newline_attribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_newline_attribute1()
}

func (c *current) ontable_attribute4() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontable_attribute4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute4()
}

func (c *current) ontable_attribute7() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontable_attribute7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute7()
}

func (c *current) ontable_attribute10() (interface{}, error) {
	return nil, nil /* return v; */
}

func (p *parser) callontable_attribute10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute10()
}

func (c *current) ontable_attribute1() (interface{}, error) {
	return nil, nil
	/*
	   // NB: Keep in sync w/ generic_newline_attribute
	       var res;
	   // Encapsulate protected attributes.
	       if (typeof name === 'string') {
	           name = tu.protectAttrs(name);
	       }
	       if (vd !== null) {
	           res = new KV(name, vd.value, [namePos0, namePos, vd.srcOffsets[0], vd.srcOffsets[1]]);
	           res.vsrc = input.substring(vd.srcOffsets[0], vd.srcOffsets[1]);
	       } else {
	           res = new KV(name, '', [namePos0, namePos, namePos, namePos]);
	       }
	       if (Array.isArray(name)) {
	           res.ksrc = input.substring(namePos0, namePos);
	       }
	       return res;
	*/
}

func (p *parser) callontable_attribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute1()
}

func (c *current) ongeneric_attribute_name15() (interface{}, error) {
	return nil, nil /*return c;*/
}

func (p *parser) callongeneric_attribute_name15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_attribute_name15()
}

func (c *current) ongeneric_attribute_name9() (interface{}, error) {
	return nil, nil /*return t; */
}

func (p *parser) callongeneric_attribute_name9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_attribute_name9()
}

func (c *current) ongeneric_attribute_name20() (bool, error) {
	return false, nil /* return r.length > 0 || q.length > 0; */
}

func (p *parser) callongeneric_attribute_name20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_attribute_name20()
}

func (c *current) ongeneric_attribute_name1() (interface{}, error) {
	return nil, nil /* return tu.flattenString([q].concat(r)); */
}

func (p *parser) callongeneric_attribute_name1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_attribute_name1()
}

func (c *current) onbroken_table_attribute_name_char1() (interface{}, error) {
	return nil, nil /* return new KV(c, ''); */
}

func (p *parser) callonbroken_table_attribute_name_char1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbroken_table_attribute_name_char1()
}

func (c *current) ontable_attribute_name16() (interface{}, error) {
	return nil, nil /* return ill; */
}

func (p *parser) callontable_attribute_name16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_name16()
}

func (c *current) ontable_attribute_name21() (interface{}, error) {
	return nil, nil /* return c; */
}

func (p *parser) callontable_attribute_name21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_name21()
}

func (c *current) ontable_attribute_name9() (interface{}, error) {
	return nil, nil /* return t; */
}

func (p *parser) callontable_attribute_name9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_name9()
}

func (c *current) ontable_attribute_name28() (bool, error) {
	return false, nil /* return r.length > 0 || q.length > 0; */
}

func (p *parser) callontable_attribute_name28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_name28()
}

func (c *current) ontable_attribute_name1() (interface{}, error) {
	return nil, nil /* return tu.flattenString([q].concat(r)); */
}

func (p *parser) callontable_attribute_name1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_name1()
}

func (c *current) ongeneric_att_value2() (interface{}, error) {
	return nil, nil
	/*
	   return tu.getAttrVal(t, startOffset() + s.length, endOffset() - q.length);
	*/

}

func (p *parser) callongeneric_att_value2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_att_value2()
}

func (c *current) ongeneric_att_value17() (interface{}, error) {
	return nil, nil
	/*
	   return tu.getAttrVal(t, startOffset() + s.length, endOffset() - q.length);
	*/

}

func (p *parser) callongeneric_att_value17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_att_value17()
}

func (c *current) ongeneric_att_value32() (interface{}, error) {
	return nil, nil
	/*
	   return tu.getAttrVal(t, startOffset() + s.length, endOffset());
	*/

}

func (p *parser) callongeneric_att_value32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongeneric_att_value32()
}

func (c *current) ontable_att_value2() (interface{}, error) {
	return nil, nil
	/*
	   return tu.getAttrVal(t, startOffset() + s.length, endOffset() - q.length);
	*/

}

func (p *parser) callontable_att_value2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_att_value2()
}

func (c *current) ontable_att_value16() (interface{}, error) {
	return nil, nil
	/*
	   return tu.getAttrVal(t, startOffset() + s.length, endOffset() - q.length);
	*/

}

func (p *parser) callontable_att_value16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_att_value16()
}

func (c *current) ontable_att_value30() (interface{}, error) {
	return nil, nil
	/*
	   return tu.getAttrVal(t, startOffset() + s.length, endOffset());
	*/

}

func (p *parser) callontable_att_value30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_att_value30()
}

func (c *current) onli1(bullets, c2 interface{}) (interface{}, error) {
	n := &html.Node{
		Type: html.ElementNode,
		Data: "li",
	}
	addChild(n, c2)
	return n, nil
	/*
	   // Leave bullets as an array -- list handler expects this
	       var tsr = tsrOffsets('start');
	       tsr[1] += bullets.length;
	       var li = new TagTk('listItem', [], { tsr: tsr });
	       li.bullets = bullets;
	       return [ li ].concat(c || []);
	*/
}

func (p *parser) callonli1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onli1(stack["bullets"], stack["c2"])
}

func (c *current) onhacky_dl_uses1() (interface{}, error) {
	return nil, nil
	/*
	   // Leave bullets as an array -- list handler expects this
	       var tsr = tsrOffsets('start');
	       tsr[1] += bullets.length;
	       var li = new TagTk('listItem', [], { tsr: tsr });
	       li.bullets = bullets;
	       return tu.flattenIfArray([li, tbl || [], line || []]);
	*/
}

func (p *parser) callonhacky_dl_uses1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhacky_dl_uses1()
}

func (c *current) ondtdd5() (interface{}, error) {
	return nil, nil /*return lc;*/
}

func (p *parser) callondtdd5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondtdd5()
}

func (c *current) ondtdd14() (bool, error) {
	return false, nil /*return stops.inc('colon');*/
}

func (p *parser) callondtdd14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondtdd14()
}

func (c *current) ondtdd17() (interface{}, error) {
	return nil, nil /*return endOffset(); */
}

func (p *parser) callondtdd17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondtdd17()
}

func (c *current) ondtdd19() (bool, error) {
	return false, nil /*stops.counters.colon = 0; return true;*/
}

func (p *parser) callondtdd19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondtdd19()
}

func (c *current) ondtdd2() (interface{}, error) {
	return nil, nil
	/*
		// Leave bullets as an array -- list handler expects this
		// TSR: +1 for the leading ";"
		        var numBullets = bullets.length + 1;
		        var tsr = tsrOffsets('start');
		        tsr[1] += numBullets;
		        var li1 = new TagTk('listItem', [], { tsr: tsr });
		        li1.bullets = bullets.slice();
		        li1.bullets.push(";");
		// TSR: -1 for the intermediate ":"
		        var li2 = new TagTk('listItem', [], { tsr: [cpos - 1, cpos], stx: 'row' });
		        li2.bullets = bullets.slice();
		        li2.bullets.push(":");

		        return [ li1 ].concat(c || [], [ li2 ], d || []);
	*/

}

func (p *parser) callondtdd2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondtdd2()
}

func (c *current) ondtdd24() (bool, error) {
	return false, nil /*stops.counters.colon = 0; return false; */
}

func (p *parser) callondtdd24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondtdd24()
}

func (c *current) onfull_table_in_link_caption11() (bool, error) {
	return false, nil /*stops.push('linkdesc', false); return stops.push('table', true);
	 */
}

func (p *parser) callonfull_table_in_link_caption11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfull_table_in_link_caption11()
}

func (c *current) onfull_table_in_link_caption9() (interface{}, error) {
	return nil, nil
	/*
	   stops.pop('linkdesc');
	   stops.pop('table');
	   return tbl;
	*/

}

func (p *parser) callonfull_table_in_link_caption9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfull_table_in_link_caption9()
}

func (c *current) onfull_table_in_link_caption26() (bool, error) {
	return false, nil /* stops.pop('linkdesc'); return stops.pop('table'); */
}

func (p *parser) callonfull_table_in_link_caption26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfull_table_in_link_caption26()
}

func (c *current) onfull_table_in_link_caption1() (interface{}, error) {
	return nil, nil /* return r; */
}

func (p *parser) callonfull_table_in_link_caption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfull_table_in_link_caption1()
}

func (c *current) ontable_line11() (bool, error) {
	return false, nil /* return stops.push('table', true); */
}

func (p *parser) callontable_line11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_line11()
}

func (c *current) ontable_line9() (interface{}, error) {
	return nil, nil
	/*
	   stops.pop('table');
	   return tl;
	*/

}

func (p *parser) callontable_line9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_line9()
}

func (c *current) ontable_line20() (bool, error) {
	return false, nil /* return stops.pop('table'); */
}

func (p *parser) callontable_line20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_line20()
}

func (c *current) ontable_line1() (interface{}, error) {
	return nil, nil /* return r; */
}

func (p *parser) callontable_line1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_line1()
}

func (c *current) ontable_start_tag7() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontable_start_tag7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_start_tag7()
}

func (c *current) ontable_start_tag11() (bool, error) {
	return false, nil /* return stops.push('table', false); */
}

func (p *parser) callontable_start_tag11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_start_tag11()
}

func (c *current) ontable_start_tag13() (interface{}, error) {
	return nil, nil /* stops.pop('table'); return endOffset(); */
}

func (p *parser) callontable_start_tag13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_start_tag13()
}

func (c *current) ontable_start_tag1() (interface{}, error) {
	return nil, nil
	/*
		        var coms = tu.popComments(ta);
		        if (coms) {
		          tsEndPos = coms.commentStartPos;
		        }

		        var da = { tsr: [startPos, tsEndPos] };
		        if (p !== "|") {
		// Variation from default
		            da.startTagSrc = b + p;
		        }

		        sc.push(new TagTk('table', ta, da));
		        if (coms) {
		          sc = sc.concat(coms.buf);
		        }
		        return sc;
	*/

}

func (p *parser) callontable_start_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_start_tag1()
}

func (c *current) ontable_caption_tag3() (bool, error) {
	return true, nil /*return stops.onStack('tableDataBlock');*/
}

func (p *parser) callontable_caption_tag3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_caption_tag3()
}

func (c *current) ontable_caption_tag8() (interface{}, error) {
	return nil, nil /*return endOffset();*/
}

func (p *parser) callontable_caption_tag8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_caption_tag8()
}

func (c *current) ontable_caption_tag1() (interface{}, error) {
	return nil, nil
	/*
	   return tu.buildTableTokens("caption", "|+", args, [startOffset(), tagEndPos], endOffset(), c, true);
	*/

}

func (p *parser) callontable_caption_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_caption_tag1()
}

func (c *current) ontable_row_tag3() (bool, error) {
	return true, nil /*return stops.onStack('tableDataBlock'); */
}

func (p *parser) callontable_row_tag3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_row_tag3()
}

func (c *current) ontable_row_tag7() (bool, error) {
	return false, nil /* return stops.push('table', false); */
}

func (p *parser) callontable_row_tag7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_row_tag7()
}

func (c *current) ontable_row_tag9() (interface{}, error) {
	return nil, nil /* stops.pop('table'); return endOffset(); */
}

func (p *parser) callontable_row_tag9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_row_tag9()
}

func (c *current) ontable_row_tag1() (interface{}, error) {
	return nil, nil
	/*
		        var coms = tu.popComments(a);
		        if (coms) {
		          tagEndPos = coms.commentStartPos;
		        }

		        var da = {
		          tsr: [ startOffset(), tagEndPos ],
		          startTagSrc: p + dashes,
		        };

		// We rely on our tree builder to close the row as needed. This is
		// needed to support building tables from fragment templates with
		// individual cells or rows.
		        var trToken = new TagTk('tr', a, da);

		        var res = [ trToken ];
		        if (coms) {
		          res = res.concat(coms.buf);
		        }
		        return res;
	*/

}

func (p *parser) callontable_row_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_row_tag1()
}

func (c *current) ontds6() (interface{}, error) {
	return nil, nil /*return p;*/
}

func (p *parser) callontds6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontds6()
}

func (c *current) ontds2() (interface{}, error) {
	return nil, nil
	/*
		        var da = tdt[0].dataAttribs;
		        da.stx = "row";
		        da.tsr[0] -= pp.length; // include "||"
		        if (pp !== "||" || (da.startTagSrc && da.startTagSrc !== pp)) {
		// Variation from default
		          da.startTagSrc = pp + (da.startTagSrc ? da.startTagSrc.substring(1) : '');
		        }
		        return tdt;
	*/

}

func (p *parser) callontds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontds2()
}

func (c *current) ontable_data_tags3() (bool, error) {
	return true, nil /* return stops.onStack('tableDataBlock'); */
}

func (p *parser) callontable_data_tags3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_data_tags3()
}

func (c *current) ontable_data_tags8() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontable_data_tags8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_data_tags8()
}

func (c *current) ontable_data_tags1() (interface{}, error) {
	return nil, nil
	// blahaskjdf;alsdf;;

}

func (p *parser) callontable_data_tags1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_data_tags1()
}

func (c *current) ontable_data_tag7() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontable_data_tag7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_data_tag7()
}

func (c *current) ontable_data_tag1() (interface{}, error) {
	return nil, nil
	/*
	   return tu.buildTableTokens("td", "|", arg, [startOffset(), tagEndPos], endOffset(), td);
	*/

}

func (p *parser) callontable_data_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_data_tag1()
}

func (c *current) ontable_heading_tags5() (bool, error) {
	return false, nil /*return stops.push('th', endOffset()); */
}

func (p *parser) callontable_heading_tags5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tags5()
}

func (c *current) ontable_heading_tags8() (interface{}, error) {
	return nil, nil
	/*
		            var da = tht[0].dataAttribs;
		            da.stx = 'row';
		            da.tsr[0] -= pp.length; // include "!!" or "||"

		            if (pp !== "!!" || (da.startTagSrc && da.startTagSrc !== pp)) {
		// Variation from default
		                da.startTagSrc = pp + (da.startTagSrc ? da.startTagSrc.substring(1) : '');
		            }
		            return tht;
	*/

}

func (p *parser) callontable_heading_tags8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tags8()
}

func (c *current) ontable_heading_tags2() (interface{}, error) {
	return nil, nil
	/*
	   stops.pop('th');
	   th[0].dataAttribs.tsr[0]--; // include "!"
	   return th.concat(ths);
	*/

}

func (p *parser) callontable_heading_tags2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tags2()
}

func (c *current) ontable_heading_tags14() (bool, error) {
	return false, nil /*return stops.onStack('th') !== false ? stops.pop('th') : false;*/
}

func (p *parser) callontable_heading_tags14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tags14()
}

func (c *current) ontable_heading_tag5() (interface{}, error) {
	return nil, nil /*return endOffset();*/
}

func (p *parser) callontable_heading_tag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tag5()
}

func (c *current) ontable_heading_tag10() (bool, error) {
	return false, nil
	/*
		// This SyntaxStop is only true until we hit the end of the line.
		      if (stops.onStack('th') !== false &&
		              /\n/.test(input.substring(stops.onStack('th'), endOffset()))) {
		// There's been a newline. Remove the break and continue
		// tokenizing nested_block_in_tables.
		          stops.pop('th');
		      }
		      return true;
	*/

}

func (p *parser) callontable_heading_tag10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tag10()
}

func (c *current) ontable_heading_tag8() (interface{}, error) {
	return nil, nil /* return d; */
}

func (p *parser) callontable_heading_tag8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tag8()
}

func (c *current) ontable_heading_tag1() (interface{}, error) {
	return nil, nil
	/*
	   return tu.buildTableTokens("th", "!", arg, [startOffset(), tagEndPos], endOffset(), c);
	*/

}

func (p *parser) callontable_heading_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_heading_tag1()
}

func (c *current) ontable_end_tag7() (interface{}, error) {
	return nil, nil /* return endOffset(); */
}

func (p *parser) callontable_end_tag7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_end_tag7()
}

func (c *current) ontable_end_tag1() (interface{}, error) {
	return nil, nil
	/*
		      var tblEnd = new EndTagTk('table', [], { tsr: [startPos, endOffset()] });
		      if (p !== "|") {
		// p+"<brace-char>" is triggering some bug in pegJS
		// I cannot even use that expression in the comment!
		          tblEnd.dataAttribs.endTagSrc = p + b;
		      }
		      return sc.concat([tblEnd]);
	*/

}

func (p *parser) callontable_end_tag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_end_tag1()
}

func (c *current) onrow_syntax_table_args4() (bool, error) {
	return false, nil /* return stops.push('tableCellArg', return true, nil); */
}

func (p *parser) callonrow_syntax_table_args4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrow_syntax_table_args4()
}

func (c *current) onrow_syntax_table_args2() (interface{}, error) {
	return nil, nil
	/*
	   stops.pop('tableCellArg');
	   return [as, s, p];
	*/

}

func (p *parser) callonrow_syntax_table_args2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrow_syntax_table_args2()
}

func (c *current) onrow_syntax_table_args11() (bool, error) {
	return false, nil /* return stops.pop('tableCellArg'); */
}

func (p *parser) callonrow_syntax_table_args11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrow_syntax_table_args11()
}

func (c *current) onurltext5(al interface{}) (interface{}, error) {
	return al, nil /*return al;*/
}

func (p *parser) callonurltext5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurltext5(stack["al"])
}

func (c *current) onurltext11(he interface{}) (interface{}, error) {
	return he, nil /*return he;*/
}

func (p *parser) callonurltext11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurltext11(stack["he"])
}

func (c *current) onurltext17() (interface{}, error) {
	return "&nbsp;", nil
	/*
	   var toks = Util.placeholder('\u00a0', {
	      ' ',
	     tsr: tsrOffsets('start'),
	     isDisplayHack: true,
	   }, { tsr: tsrOffsets('end'), isDisplayHack: true });
	   var typeOf = toks[0].getAttribute('typeof');
	   toks[0].setAttribute('typeof', 'mw:DisplaySpace ' + typeOf);
	   return toks;
	*/

}

func (p *parser) callonurltext17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurltext17()
}

func (c *current) onurltext22(bs interface{}) (interface{}, error) {
	return bs, nil /*return bs;*/
}

func (p *parser) callonurltext22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onurltext22(stack["bs"])
}

func (c *current) onraw_htmlentity1() (interface{}, error) {
	return nil, nil
	/*
	   return Util.decodeEntities(m);
	*/
}

func (p *parser) callonraw_htmlentity1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onraw_htmlentity1()
}

func (c *current) onhtmlentity1() (interface{}, error) {
	return nil, nil
	/*
	   // if this is an invalid entity, don't tag it with 'mw:Entity'
	       if (cc.length > 2 /* decoded entity would be 1 or 2 UTF-16 characters * /) {
	           return cc;
	       }
	       return [
	           new TagTk('span', [new KV('typeof', 'mw:Entity')], { src: text(), srcContent: cc, tsr: tsrOffsets('start') }),
	           cc,
	           new EndTagTk('span', [], { tsr: tsrOffsets('end') }),
	       ];
	*/
}

func (p *parser) callonhtmlentity1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlentity1()
}

func (c *current) onspace_or_nbsp8(he interface{}) (bool, error) {
	return false, nil /*return Array.isArray(he) && /^\u00A0$/.test(he[1]);*/
}

func (p *parser) callonspace_or_nbsp8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onspace_or_nbsp8(stack["he"])
}

func (c *current) onspace_or_nbsp4(he interface{}) (interface{}, error) {
	return he, nil /*return he;*/
}

func (p *parser) callonspace_or_nbsp4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onspace_or_nbsp4(stack["he"])
}

func (c *current) oncomment_or_includes7() (bool, error) {
	push(c, "sol_il", true)
	return true, nil

}

func (p *parser) calloncomment_or_includes7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment_or_includes7()
}

func (c *current) oncomment_or_includes10(i interface{}) (bool, error) {
	//pop(c, "sol_il")
	return true, nil

}

func (p *parser) calloncomment_or_includes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment_or_includes10(stack["i"])
}

func (c *current) oncomment_or_includes5(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) calloncomment_or_includes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment_or_includes5(stack["i"])
}

func (c *current) oncomment_or_includes11() (bool, error) {
	//pop(c, "sol_il")
	return false, nil

}

func (p *parser) calloncomment_or_includes11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment_or_includes11()
}

func (c *current) onsol_prefix4() (bool, error) {
	//log.Printf("sol_prefix %v", c.pos)
	return c.pos.offset == 0, nil
	/*
		// Use the sol flag only at the start of the input
		// NOTE: Explicitly check for 'false' and not a falsy value
		      return endOffset() === 0 && options.sol !== false;
	*/

}

func (p *parser) callonsol_prefix4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsol_prefix4()
}

func (c *current) onsol_prefix3() (interface{}, error) {
	return nil, nil /*return [];*/
}

func (p *parser) callonsol_prefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsol_prefix3()
}

func (c *current) onempty_line_with_comments4() (interface{}, error) {
	return "empty_line_with_comments", nil /*return endOffset();*/
}

func (p *parser) callonempty_line_with_comments4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onempty_line_with_comments4()
}

func (c *current) onempty_line_with_comments1() (interface{}, error) {
	return nil, nil
	/*
	   return [
	       sp,
	       new SelfclosingTagTk("meta", [new KV('typeof', 'mw:EmptyLine')], {
	           tokens: tu.flattenIfArray(c),
	           tsr: [p, endOffset()],
	       }),
	   ];
	*/

}

func (p *parser) callonempty_line_with_comments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onempty_line_with_comments1()
}

func (c *current) oninclude_limits12() (bool, error) {
	return false, nil
	/*
	   var incl = n.toLowerCase();
	   return incl === "noinclude" || incl === "onlyinclude" ||
	     incl === "includeonly";
	*/

}

func (p *parser) calloninclude_limits12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninclude_limits12()
}

func (c *current) oninclude_limits4() (interface{}, error) {
	return nil, nil
	/*
		    var incl = name.toLowerCase();
		    var dp = { tsr: tsrOffsets() };

		// Record variant since tag is not in normalized lower case
		    if (name !== incl) {
		      dp.srcTagName = name;
		    }

		// End tag only
		    if (c) {
		      return new EndTagTk(name, [], dp);
		    }

		    var restOfInput = input.substring(endOffset());
		    var tagContent = restOfInput.match(new RegExp("^([\\s\\S]*?)(?:</\\s*" + incl + "\\s*>)", "m"));

		// Start tag only
		    if (!tagContent || !tagContent[1]) {
		      return new TagTk(name, [], dp);
		    }

		// Get the content
		    var inclContent = tagContent[1];

		// Preserve SOL where necessary (for onlyinclude and noinclude)
		// Note that this only works because we encounter <*include*> tags in
		// the toplevel content and we rely on the php preprocessor to expand
		// templates, so we shouldn't ever be tokenizing inInclude.
		// Last line should be empty (except for comments)
		    if (incl !== "includeonly" && stops.onStack("sol_il")) {
		      var last = lastItem(inclContent.split('\n'));
		      if (!/^(<!--([^-]|-(?!->))*-->)*$/.test(last)) {
		        return false;
		      }
		    }

		// Tokenize include content in a new tokenizer
		    var inclContentToks = (new PegTokenizer(env)).tokenizeSync(inclContent);
		    inclContentToks = Util.stripEOFTkfromTokens(inclContentToks);

		// Shift tsr
		    Util.shiftTokenTSR(inclContentToks, endOffset());

		// Skip past content
		    peg$currPos += inclContent.length;

		    return [new TagTk(name, [], dp)].concat(inclContentToks);
	*/

}

func (p *parser) calloninclude_limits4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninclude_limits4()
}

func (c *current) oninclude_limits16(il interface{}) (bool, error) {
	return il != nil, nil /*return !!il; */
}

func (p *parser) calloninclude_limits16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninclude_limits16(stack["il"])
}

func (c *current) oninclude_limits1(il interface{}) (interface{}, error) {
	return il, nil /*return il; */
}

func (p *parser) calloninclude_limits1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninclude_limits1(stack["il"])
}

func (c *current) onsof1() (bool, error) {
	return c.pos.offset == 0, nil
}

func (p *parser) callonsof1() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsof1()
}

func (c *current) oneof1() (bool, error) {
	len := c.globalStore["len"].(int)
	return c.pos.offset == len, nil
}

func (p *parser) calloneof1() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oneof1()
}

func (c *current) onnewlineToken1() (interface{}, error) {
	return "\n", nil /* return [new NlTk(tsrOffsets())]; */
}

func (p *parser) callonnewlineToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnewlineToken1()
}

func (c *current) ondirective5(v interface{}) (interface{}, error) {
	return v, nil /* return v; */
}

func (p *parser) callondirective5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondirective5(stack["v"])
}

func (c *current) ondirective11(e interface{}) (interface{}, error) {
	return e, nil /* return e; */
}

func (p *parser) callondirective11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondirective11(stack["e"])
}

func (c *current) onwikilink_preprocessor_text7(wr interface{}) (interface{}, error) {
	return wr, nil /* return wr; */
}

func (p *parser) callonwikilink_preprocessor_text7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_preprocessor_text7(stack["wr"])
}

func (c *current) onwikilink_preprocessor_text1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenStringlist(r);
	*/

}

func (p *parser) callonwikilink_preprocessor_text1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwikilink_preprocessor_text1(stack["r"])
}

func (c *current) onextlink_preprocessor_text4() (bool, error) {
	return true, nil
	/*
		// Prevent breaking on pipes when we're in a link description.
		// See the test, 'Images with the "|" character in the comment'.
		    return stops.push('linkdesc', false);
	*/

}

func (p *parser) callonextlink_preprocessor_text4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink_preprocessor_text4()
}

func (c *current) onextlink_preprocessor_text10(s interface{}) (interface{}, error) {
	return s, nil /* return s;
	 */
}

func (p *parser) callonextlink_preprocessor_text10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink_preprocessor_text10(stack["s"])
}

func (c *current) onextlink_preprocessor_text2(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   stops.pop('linkdesc');
	   return tu.flattenString(r);
	*/

}

func (p *parser) callonextlink_preprocessor_text2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink_preprocessor_text2(stack["r"])
}

func (c *current) onextlink_preprocessor_text29() (bool, error) {
	return false, nil /* return stops.pop('linkdesc'); */
}

func (p *parser) callonextlink_preprocessor_text29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextlink_preprocessor_text29()
}

func (c *current) onattribute_preprocessor_text7(s interface{}) (interface{}, error) {
	return s, nil /*return s; */
}

func (p *parser) callonattribute_preprocessor_text7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute_preprocessor_text7(stack["s"])
}

func (c *current) onattribute_preprocessor_text1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenString(r);
	*/

}

func (p *parser) callonattribute_preprocessor_text1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute_preprocessor_text1(stack["r"])
}

func (c *current) onattribute_preprocessor_text_single7(s interface{}) (interface{}, error) {
	return s, nil /* return s; */
}

func (p *parser) callonattribute_preprocessor_text_single7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute_preprocessor_text_single7(stack["s"])
}

func (c *current) onattribute_preprocessor_text_single1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenString(r);
	*/

}

func (p *parser) callonattribute_preprocessor_text_single1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute_preprocessor_text_single1(stack["r"])
}

func (c *current) onattribute_preprocessor_text_double7(s interface{}) (interface{}, error) {
	return s, nil /* return s; */
}

func (p *parser) callonattribute_preprocessor_text_double7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute_preprocessor_text_double7(stack["s"])
}

func (c *current) onattribute_preprocessor_text_double1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenString(r);
	*/

}

func (p *parser) callonattribute_preprocessor_text_double1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute_preprocessor_text_double1(stack["r"])
}

func (c *current) ontable_attribute_preprocessor_text7(s interface{}) (interface{}, error) {
	return s, nil /* return s; */
}

func (p *parser) callontable_attribute_preprocessor_text7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_preprocessor_text7(stack["s"])
}

func (c *current) ontable_attribute_preprocessor_text1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenString(r);
	*/

}

func (p *parser) callontable_attribute_preprocessor_text1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_preprocessor_text1(stack["r"])
}

func (c *current) ontable_attribute_preprocessor_text_single7(s interface{}) (interface{}, error) {
	return s, nil /* return s; */
}

func (p *parser) callontable_attribute_preprocessor_text_single7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_preprocessor_text_single7(stack["s"])
}

func (c *current) ontable_attribute_preprocessor_text_single1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenString(r);
	*/

}

func (p *parser) callontable_attribute_preprocessor_text_single1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_preprocessor_text_single1(stack["r"])
}

func (c *current) ontable_attribute_preprocessor_text_double7(s interface{}) (interface{}, error) {
	return s, nil /* return s; */
}

func (p *parser) callontable_attribute_preprocessor_text_double7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_preprocessor_text_double7(stack["s"])
}

func (c *current) ontable_attribute_preprocessor_text_double1(r interface{}) (interface{}, error) {
	return r, nil
	/*
	   return tu.flattenString(r);
	*/

}

func (p *parser) callontable_attribute_preprocessor_text_double1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontable_attribute_preprocessor_text_double1(stack["r"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	start := p.pt
	p.cur.pos = start.position
	p.cur.text = p.sliceFrom(start)

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	start := p.pt
	p.cur.pos = start.position
	p.cur.text = p.sliceFrom(start)

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
